(global["webpackJsonp"] = global["webpackJsonp"] || []).push([["common/vendor"],{

/***/ 1:
/*!***********************************************************!*\
  !*** ./node_modules/@dcloudio/uni-app-plus/dist/index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.createApp = createApp;exports.createComponent = createComponent;exports.createPage = createPage;exports.default = void 0;var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};var ownKeys = Object.keys(source);if (typeof Object.getOwnPropertySymbols === 'function') {ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {return Object.getOwnPropertyDescriptor(source, sym).enumerable;}));}ownKeys.forEach(function (key) {_defineProperty(target, key, source[key]);});}return target;}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");}function _iterableToArrayLimit(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i[\"return\"] != null) _i[\"return\"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError(\"Invalid attempt to spread non-iterable instance\");}function _iterableToArray(iter) {if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;}}\n\nvar _toString = Object.prototype.toString;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction isFn(fn) {\n  return typeof fn === 'function';\n}\n\nfunction isStr(str) {\n  return typeof str === 'string';\n}\n\nfunction isPlainObject(obj) {\n  return _toString.call(obj) === '[object Object]';\n}\n\nfunction hasOwn(obj, key) {\n  return hasOwnProperty.call(obj, key);\n}\n\nfunction noop() {}\n\n/**\r\n                    * Create a cached version of a pure function.\r\n                    */\nfunction cached(fn) {\n  var cache = Object.create(null);\n  return function cachedFn(str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str));\n  };\n}\n\n/**\r\n   * Camelize a hyphen-delimited string.\r\n   */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) {return c ? c.toUpperCase() : '';});\n});\n\nvar HOOKS = [\n'invoke',\n'success',\n'fail',\n'complete',\n'returnValue'];\n\n\nvar globalInterceptors = {};\nvar scopedInterceptors = {};\n\nfunction mergeHook(parentVal, childVal) {\n  var res = childVal ?\n  parentVal ?\n  parentVal.concat(childVal) :\n  Array.isArray(childVal) ?\n  childVal : [childVal] :\n  parentVal;\n  return res ?\n  dedupeHooks(res) :\n  res;\n}\n\nfunction dedupeHooks(hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res;\n}\n\nfunction removeHook(hooks, hook) {\n  var index = hooks.indexOf(hook);\n  if (index !== -1) {\n    hooks.splice(index, 1);\n  }\n}\n\nfunction mergeInterceptorHook(interceptor, option) {\n  Object.keys(option).forEach(function (hook) {\n    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {\n      interceptor[hook] = mergeHook(interceptor[hook], option[hook]);\n    }\n  });\n}\n\nfunction removeInterceptorHook(interceptor, option) {\n  if (!interceptor || !option) {\n    return;\n  }\n  Object.keys(option).forEach(function (hook) {\n    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {\n      removeHook(interceptor[hook], option[hook]);\n    }\n  });\n}\n\nfunction addInterceptor(method, option) {\n  if (typeof method === 'string' && isPlainObject(option)) {\n    mergeInterceptorHook(scopedInterceptors[method] || (scopedInterceptors[method] = {}), option);\n  } else if (isPlainObject(method)) {\n    mergeInterceptorHook(globalInterceptors, method);\n  }\n}\n\nfunction removeInterceptor(method, option) {\n  if (typeof method === 'string') {\n    if (isPlainObject(option)) {\n      removeInterceptorHook(scopedInterceptors[method], option);\n    } else {\n      delete scopedInterceptors[method];\n    }\n  } else if (isPlainObject(method)) {\n    removeInterceptorHook(globalInterceptors, method);\n  }\n}\n\nfunction wrapperHook(hook) {\n  return function (data) {\n    return hook(data) || data;\n  };\n}\n\nfunction isPromise(obj) {\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n}\n\nfunction queue(hooks, data) {\n  var promise = false;\n  for (var i = 0; i < hooks.length; i++) {\n    var hook = hooks[i];\n    if (promise) {\n      promise = Promise.then(wrapperHook(hook));\n    } else {\n      var res = hook(data);\n      if (isPromise(res)) {\n        promise = Promise.resolve(res);\n      }\n      if (res === false) {\n        return {\n          then: function then() {} };\n\n      }\n    }\n  }\n  return promise || {\n    then: function then(callback) {\n      return callback(data);\n    } };\n\n}\n\nfunction wrapperOptions(interceptor) {var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  ['success', 'fail', 'complete'].forEach(function (name) {\n    if (Array.isArray(interceptor[name])) {\n      var oldCallback = options[name];\n      options[name] = function callbackInterceptor(res) {\n        queue(interceptor[name], res).then(function (res) {\n          /* eslint-disable no-mixed-operators */\n          return isFn(oldCallback) && oldCallback(res) || res;\n        });\n      };\n    }\n  });\n  return options;\n}\n\nfunction wrapperReturnValue(method, returnValue) {\n  var returnValueHooks = [];\n  if (Array.isArray(globalInterceptors.returnValue)) {\n    returnValueHooks.push.apply(returnValueHooks, _toConsumableArray(globalInterceptors.returnValue));\n  }\n  var interceptor = scopedInterceptors[method];\n  if (interceptor && Array.isArray(interceptor.returnValue)) {\n    returnValueHooks.push.apply(returnValueHooks, _toConsumableArray(interceptor.returnValue));\n  }\n  returnValueHooks.forEach(function (hook) {\n    returnValue = hook(returnValue) || returnValue;\n  });\n  return returnValue;\n}\n\nfunction getApiInterceptorHooks(method) {\n  var interceptor = Object.create(null);\n  Object.keys(globalInterceptors).forEach(function (hook) {\n    if (hook !== 'returnValue') {\n      interceptor[hook] = globalInterceptors[hook].slice();\n    }\n  });\n  var scopedInterceptor = scopedInterceptors[method];\n  if (scopedInterceptor) {\n    Object.keys(scopedInterceptor).forEach(function (hook) {\n      if (hook !== 'returnValue') {\n        interceptor[hook] = (interceptor[hook] || []).concat(scopedInterceptor[hook]);\n      }\n    });\n  }\n  return interceptor;\n}\n\nfunction invokeApi(method, api, options) {for (var _len = arguments.length, params = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {params[_key - 3] = arguments[_key];}\n  var interceptor = getApiInterceptorHooks(method);\n  if (interceptor && Object.keys(interceptor).length) {\n    if (Array.isArray(interceptor.invoke)) {\n      var res = queue(interceptor.invoke, options);\n      return res.then(function (options) {\n        return api.apply(void 0, [wrapperOptions(interceptor, options)].concat(params));\n      });\n    } else {\n      return api.apply(void 0, [wrapperOptions(interceptor, options)].concat(params));\n    }\n  }\n  return api.apply(void 0, [options].concat(params));\n}\n\nvar promiseInterceptor = {\n  returnValue: function returnValue(res) {\n    if (!isPromise(res)) {\n      return res;\n    }\n    return res.then(function (res) {\n      return res[1];\n    }).catch(function (res) {\n      return res[0];\n    });\n  } };\n\n\nvar SYNC_API_RE =\n/^\\$|restoreGlobal|getCurrentSubNVue|getMenuButtonBoundingClientRect|^report|interceptors|Interceptor$|getSubNVueById|requireNativePlugin|upx2px|hideKeyboard|canIUse|^create|Sync$|Manager$|base64ToArrayBuffer|arrayBufferToBase64/;\n\nvar CONTEXT_API_RE = /^create|Manager$/;\n\nvar CALLBACK_API_RE = /^on/;\n\nfunction isContextApi(name) {\n  return CONTEXT_API_RE.test(name);\n}\nfunction isSyncApi(name) {\n  return SYNC_API_RE.test(name);\n}\n\nfunction isCallbackApi(name) {\n  return CALLBACK_API_RE.test(name) && name !== 'onPush';\n}\n\nfunction handlePromise(promise) {\n  return promise.then(function (data) {\n    return [null, data];\n  }).\n  catch(function (err) {return [err];});\n}\n\nfunction shouldPromise(name) {\n  if (\n  isContextApi(name) ||\n  isSyncApi(name) ||\n  isCallbackApi(name))\n  {\n    return false;\n  }\n  return true;\n}\n\nfunction promisify(name, api) {\n  if (!shouldPromise(name)) {\n    return api;\n  }\n  return function promiseApi() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {params[_key2 - 1] = arguments[_key2];}\n    if (isFn(options.success) || isFn(options.fail) || isFn(options.complete)) {\n      return wrapperReturnValue(name, invokeApi.apply(void 0, [name, api, options].concat(params)));\n    }\n    return wrapperReturnValue(name, handlePromise(new Promise(function (resolve, reject) {\n      invokeApi.apply(void 0, [name, api, Object.assign({}, options, {\n        success: resolve,\n        fail: reject })].concat(\n      params));\n      /* eslint-disable no-extend-native */\n      if (!Promise.prototype.finally) {\n        Promise.prototype.finally = function (callback) {\n          var promise = this.constructor;\n          return this.then(\n          function (value) {return promise.resolve(callback()).then(function () {return value;});},\n          function (reason) {return promise.resolve(callback()).then(function () {\n              throw reason;\n            });});\n\n        };\n      }\n    })));\n  };\n}\n\nvar EPS = 1e-4;\nvar BASE_DEVICE_WIDTH = 750;\nvar isIOS = false;\nvar deviceWidth = 0;\nvar deviceDPR = 0;\n\nfunction checkDeviceWidth() {var _wx$getSystemInfoSync =\n\n\n\n\n  wx.getSystemInfoSync(),platform = _wx$getSystemInfoSync.platform,pixelRatio = _wx$getSystemInfoSync.pixelRatio,windowWidth = _wx$getSystemInfoSync.windowWidth; // uni=>wx runtime 编译目标是 uni 对象，内部不允许直接使用 uni\n\n  deviceWidth = windowWidth;\n  deviceDPR = pixelRatio;\n  isIOS = platform === 'ios';\n}\n\nfunction upx2px(number, newDeviceWidth) {\n  if (deviceWidth === 0) {\n    checkDeviceWidth();\n  }\n\n  number = Number(number);\n  if (number === 0) {\n    return 0;\n  }\n  var result = number / BASE_DEVICE_WIDTH * (newDeviceWidth || deviceWidth);\n  if (result < 0) {\n    result = -result;\n  }\n  result = Math.floor(result + EPS);\n  if (result === 0) {\n    if (deviceDPR === 1 || !isIOS) {\n      return 1;\n    } else {\n      return 0.5;\n    }\n  }\n  return number < 0 ? -result : result;\n}\n\nvar interceptors = {\n  promiseInterceptor: promiseInterceptor };\n\n\n\n\nvar baseApi = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  upx2px: upx2px,\n  interceptors: interceptors,\n  addInterceptor: addInterceptor,\n  removeInterceptor: removeInterceptor });\n\n\nvar protocols = {};\nvar todos = [];\nvar canIUses = [];\n\nvar CALLBACKS = ['success', 'fail', 'cancel', 'complete'];\n\nfunction processCallback(methodName, method, returnValue) {\n  return function (res) {\n    return method(processReturnValue(methodName, res, returnValue));\n  };\n}\n\nfunction processArgs(methodName, fromArgs) {var argsOption = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};var returnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};var keepFromArgs = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  if (isPlainObject(fromArgs)) {// 一般 api 的参数解析\n    var toArgs = keepFromArgs === true ? fromArgs : {}; // returnValue 为 false 时，说明是格式化返回值，直接在返回值对象上修改赋值\n    if (isFn(argsOption)) {\n      argsOption = argsOption(fromArgs, toArgs) || {};\n    }\n    for (var key in fromArgs) {\n      if (hasOwn(argsOption, key)) {\n        var keyOption = argsOption[key];\n        if (isFn(keyOption)) {\n          keyOption = keyOption(fromArgs[key], fromArgs, toArgs);\n        }\n        if (!keyOption) {// 不支持的参数\n          console.warn(\"app-plus \".concat(methodName, \"\\u6682\\u4E0D\\u652F\\u6301\").concat(key));\n        } else if (isStr(keyOption)) {// 重写参数 key\n          toArgs[keyOption] = fromArgs[key];\n        } else if (isPlainObject(keyOption)) {// {name:newName,value:value}可重新指定参数 key:value\n          toArgs[keyOption.name ? keyOption.name : key] = keyOption.value;\n        }\n      } else if (CALLBACKS.indexOf(key) !== -1) {\n        toArgs[key] = processCallback(methodName, fromArgs[key], returnValue);\n      } else {\n        if (!keepFromArgs) {\n          toArgs[key] = fromArgs[key];\n        }\n      }\n    }\n    return toArgs;\n  } else if (isFn(fromArgs)) {\n    fromArgs = processCallback(methodName, fromArgs, returnValue);\n  }\n  return fromArgs;\n}\n\nfunction processReturnValue(methodName, res, returnValue) {var keepReturnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  if (isFn(protocols.returnValue)) {// 处理通用 returnValue\n    res = protocols.returnValue(methodName, res);\n  }\n  return processArgs(methodName, res, returnValue, {}, keepReturnValue);\n}\n\nfunction wrapper(methodName, method) {\n  if (hasOwn(protocols, methodName)) {\n    var protocol = protocols[methodName];\n    if (!protocol) {// 暂不支持的 api\n      return function () {\n        console.error(\"app-plus \\u6682\\u4E0D\\u652F\\u6301\".concat(methodName));\n      };\n    }\n    return function (arg1, arg2) {// 目前 api 最多两个参数\n      var options = protocol;\n      if (isFn(protocol)) {\n        options = protocol(arg1);\n      }\n\n      arg1 = processArgs(methodName, arg1, options.args, options.returnValue);\n\n      var args = [arg1];\n      if (typeof arg2 !== 'undefined') {\n        args.push(arg2);\n      }\n      var returnValue = wx[options.name || methodName].apply(wx, args);\n      if (isSyncApi(methodName)) {// 同步 api\n        return processReturnValue(methodName, returnValue, options.returnValue, isContextApi(methodName));\n      }\n      return returnValue;\n    };\n  }\n  return method;\n}\n\nvar todoApis = Object.create(null);\n\nvar TODOS = [\n'onTabBarMidButtonTap',\n'subscribePush',\n'unsubscribePush',\n'onPush',\n'offPush',\n'share'];\n\n\nfunction createTodoApi(name) {\n  return function todoApi(_ref)\n\n\n  {var fail = _ref.fail,complete = _ref.complete;\n    var res = {\n      errMsg: \"\".concat(name, \":fail:\\u6682\\u4E0D\\u652F\\u6301 \").concat(name, \" \\u65B9\\u6CD5\") };\n\n    isFn(fail) && fail(res);\n    isFn(complete) && complete(res);\n  };\n}\n\nTODOS.forEach(function (name) {\n  todoApis[name] = createTodoApi(name);\n});\n\nvar getEmitter = function () {\n  if (typeof getUniEmitter === 'function') {\n    /* eslint-disable no-undef */\n    return getUniEmitter;\n  }\n  var Emitter;\n  return function getUniEmitter() {\n    if (!Emitter) {\n      Emitter = new _vue.default();\n    }\n    return Emitter;\n  };\n}();\n\nfunction apply(ctx, method, args) {\n  return ctx[method].apply(ctx, args);\n}\n\nfunction $on() {\n  return apply(getEmitter(), '$on', Array.prototype.slice.call(arguments));\n}\nfunction $off() {\n  return apply(getEmitter(), '$off', Array.prototype.slice.call(arguments));\n}\nfunction $once() {\n  return apply(getEmitter(), '$once', Array.prototype.slice.call(arguments));\n}\nfunction $emit() {\n  return apply(getEmitter(), '$emit', Array.prototype.slice.call(arguments));\n}\n\nvar eventApi = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  $on: $on,\n  $off: $off,\n  $once: $once,\n  $emit: $emit });\n\n\nfunction requireNativePlugin(pluginName) {\n  /* eslint-disable no-undef */\n  if (typeof weex !== 'undefined') {\n    return weex.requireModule(pluginName);\n  }\n  /* eslint-disable no-undef */\n  return __requireNativePlugin__(pluginName);\n}\n\nfunction wrapper$1(webview) {\n  webview.$processed = true;\n\n  webview.postMessage = function (data) {\n    plus.webview.postMessageToUniNView({\n      type: 'UniAppSubNVue',\n      data: data },\n    webview.id);\n  };\n  var callbacks = [];\n  webview.onMessage = function (callback) {\n    callbacks.push(callback);\n  };\n  webview.$consumeMessage = function (e) {\n    callbacks.forEach(function (callback) {return callback(e);});\n  };\n\n  if (!webview.__uniapp_mask_id) {\n    return;\n  }\n  var maskColor = webview.__uniapp_mask;\n  var maskWebview = webview.__uniapp_mask_id === '0' ? {\n    setStyle: function setStyle(_ref2)\n\n    {var mask = _ref2.mask;\n      requireNativePlugin('uni-tabview').setMask({\n        color: mask });\n\n    } } :\n  plus.webview.getWebviewById(webview.__uniapp_mask_id);\n  var oldShow = webview.show;\n  var oldHide = webview.hide;\n  var oldClose = webview.close;\n\n  var showMask = function showMask() {\n    maskWebview.setStyle({\n      mask: maskColor });\n\n  };\n  var closeMask = function closeMask() {\n    maskWebview.setStyle({\n      mask: 'none' });\n\n  };\n  webview.show = function () {\n    showMask();for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {args[_key3] = arguments[_key3];}\n    return oldShow.apply(webview, args);\n  };\n  webview.hide = function () {\n    closeMask();for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {args[_key4] = arguments[_key4];}\n    return oldHide.apply(webview, args);\n  };\n  webview.close = function () {\n    closeMask();\n    callbacks = [];for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {args[_key5] = arguments[_key5];}\n    return oldClose.apply(webview, args);\n  };\n}\n\nfunction getSubNVueById(id) {\n  var webview = plus.webview.getWebviewById(id);\n  if (webview && !webview.$processed) {\n    wrapper$1(webview);\n  }\n  return webview;\n}\n\n\n\nvar api = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getSubNVueById: getSubNVueById,\n  requireNativePlugin: requireNativePlugin });\n\n\nvar MPPage = Page;\nvar MPComponent = Component;\n\nvar customizeRE = /:/g;\n\nvar customize = cached(function (str) {\n  return camelize(str.replace(customizeRE, '-'));\n});\n\nfunction initTriggerEvent(mpInstance) {\n  {\n    if (!wx.canIUse('nextTick')) {\n      return;\n    }\n  }\n  var oldTriggerEvent = mpInstance.triggerEvent;\n  mpInstance.triggerEvent = function (event) {for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {args[_key6 - 1] = arguments[_key6];}\n    return oldTriggerEvent.apply(mpInstance, [customize(event)].concat(args));\n  };\n}\n\nfunction initHook(name, options) {\n  var oldHook = options[name];\n  if (!oldHook) {\n    options[name] = function () {\n      initTriggerEvent(this);\n    };\n  } else {\n    options[name] = function () {\n      initTriggerEvent(this);for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {args[_key7] = arguments[_key7];}\n      return oldHook.apply(this, args);\n    };\n  }\n}\n\nPage = function Page() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  initHook('onLoad', options);\n  return MPPage(options);\n};\n\nComponent = function Component() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  initHook('created', options);\n  return MPComponent(options);\n};\n\nvar PAGE_EVENT_HOOKS = [\n'onPullDownRefresh',\n'onReachBottom',\n'onShareAppMessage',\n'onPageScroll',\n'onResize',\n'onTabItemTap'];\n\n\nfunction initMocks(vm, mocks) {\n  var mpInstance = vm.$mp[vm.mpType];\n  mocks.forEach(function (mock) {\n    if (hasOwn(mpInstance, mock)) {\n      vm[mock] = mpInstance[mock];\n    }\n  });\n}\n\nfunction hasHook(hook, vueOptions) {\n  if (!vueOptions) {\n    return true;\n  }\n\n  if (_vue.default.options && Array.isArray(_vue.default.options[hook])) {\n    return true;\n  }\n\n  vueOptions = vueOptions.default || vueOptions;\n\n  if (isFn(vueOptions)) {\n    if (isFn(vueOptions.extendOptions[hook])) {\n      return true;\n    }\n    if (vueOptions.super &&\n    vueOptions.super.options &&\n    Array.isArray(vueOptions.super.options[hook])) {\n      return true;\n    }\n    return false;\n  }\n\n  if (isFn(vueOptions[hook])) {\n    return true;\n  }\n  var mixins = vueOptions.mixins;\n  if (Array.isArray(mixins)) {\n    return !!mixins.find(function (mixin) {return hasHook(hook, mixin);});\n  }\n}\n\nfunction initHooks(mpOptions, hooks, vueOptions) {\n  hooks.forEach(function (hook) {\n    if (hasHook(hook, vueOptions)) {\n      mpOptions[hook] = function (args) {\n        return this.$vm && this.$vm.__call_hook(hook, args);\n      };\n    }\n  });\n}\n\nfunction initVueComponent(Vue, vueOptions) {\n  vueOptions = vueOptions.default || vueOptions;\n  var VueComponent;\n  if (isFn(vueOptions)) {\n    VueComponent = vueOptions;\n    vueOptions = VueComponent.extendOptions;\n  } else {\n    VueComponent = Vue.extend(vueOptions);\n  }\n  return [VueComponent, vueOptions];\n}\n\nfunction initSlots(vm, vueSlots) {\n  if (Array.isArray(vueSlots) && vueSlots.length) {\n    var $slots = Object.create(null);\n    vueSlots.forEach(function (slotName) {\n      $slots[slotName] = true;\n    });\n    vm.$scopedSlots = vm.$slots = $slots;\n  }\n}\n\nfunction initVueIds(vueIds, mpInstance) {\n  vueIds = (vueIds || '').split(',');\n  var len = vueIds.length;\n\n  if (len === 1) {\n    mpInstance._$vueId = vueIds[0];\n  } else if (len === 2) {\n    mpInstance._$vueId = vueIds[0];\n    mpInstance._$vuePid = vueIds[1];\n  }\n}\n\nfunction initData(vueOptions, context) {\n  var data = vueOptions.data || {};\n  var methods = vueOptions.methods || {};\n\n  if (typeof data === 'function') {\n    try {\n      data = data.call(context); // 支持 Vue.prototype 上挂的数据\n    } catch (e) {\n      if (Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\n        console.warn('根据 Vue 的 data 函数初始化小程序 data 失败，请尽量确保 data 函数中不访问 vm 对象，否则可能影响首次数据渲染速度。', data);\n      }\n    }\n  } else {\n    try {\n      // 对 data 格式化\n      data = JSON.parse(JSON.stringify(data));\n    } catch (e) {}\n  }\n\n  if (!isPlainObject(data)) {\n    data = {};\n  }\n\n  Object.keys(methods).forEach(function (methodName) {\n    if (context.__lifecycle_hooks__.indexOf(methodName) === -1 && !hasOwn(data, methodName)) {\n      data[methodName] = methods[methodName];\n    }\n  });\n\n  return data;\n}\n\nvar PROP_TYPES = [String, Number, Boolean, Object, Array, null];\n\nfunction createObserver(name) {\n  return function observer(newVal, oldVal) {\n    if (this.$vm) {\n      this.$vm[name] = newVal; // 为了触发其他非 render watcher\n    }\n  };\n}\n\nfunction initBehaviors(vueOptions, initBehavior) {\n  var vueBehaviors = vueOptions['behaviors'];\n  var vueExtends = vueOptions['extends'];\n  var vueMixins = vueOptions['mixins'];\n\n  var vueProps = vueOptions['props'];\n\n  if (!vueProps) {\n    vueOptions['props'] = vueProps = [];\n  }\n\n  var behaviors = [];\n  if (Array.isArray(vueBehaviors)) {\n    vueBehaviors.forEach(function (behavior) {\n      behaviors.push(behavior.replace('uni://', \"wx\".concat(\"://\")));\n      if (behavior === 'uni://form-field') {\n        if (Array.isArray(vueProps)) {\n          vueProps.push('name');\n          vueProps.push('value');\n        } else {\n          vueProps['name'] = {\n            type: String,\n            default: '' };\n\n          vueProps['value'] = {\n            type: [String, Number, Boolean, Array, Object, Date],\n            default: '' };\n\n        }\n      }\n    });\n  }\n  if (isPlainObject(vueExtends) && vueExtends.props) {\n    behaviors.push(\n    initBehavior({\n      properties: initProperties(vueExtends.props, true) }));\n\n\n  }\n  if (Array.isArray(vueMixins)) {\n    vueMixins.forEach(function (vueMixin) {\n      if (isPlainObject(vueMixin) && vueMixin.props) {\n        behaviors.push(\n        initBehavior({\n          properties: initProperties(vueMixin.props, true) }));\n\n\n      }\n    });\n  }\n  return behaviors;\n}\n\nfunction parsePropType(key, type, defaultValue, file) {\n  // [String]=>String\n  if (Array.isArray(type) && type.length === 1) {\n    return type[0];\n  }\n  return type;\n}\n\nfunction initProperties(props) {var isBehavior = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;var file = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  var properties = {};\n  if (!isBehavior) {\n    properties.vueId = {\n      type: String,\n      value: '' };\n\n    properties.vueSlots = { // 小程序不能直接定义 $slots 的 props，所以通过 vueSlots 转换到 $slots\n      type: null,\n      value: [],\n      observer: function observer(newVal, oldVal) {\n        var $slots = Object.create(null);\n        newVal.forEach(function (slotName) {\n          $slots[slotName] = true;\n        });\n        this.setData({\n          $slots: $slots });\n\n      } };\n\n  }\n  if (Array.isArray(props)) {// ['title']\n    props.forEach(function (key) {\n      properties[key] = {\n        type: null,\n        observer: createObserver(key) };\n\n    });\n  } else if (isPlainObject(props)) {// {title:{type:String,default:''},content:String}\n    Object.keys(props).forEach(function (key) {\n      var opts = props[key];\n      if (isPlainObject(opts)) {// title:{type:String,default:''}\n        var value = opts['default'];\n        if (isFn(value)) {\n          value = value();\n        }\n\n        opts.type = parsePropType(key, opts.type);\n\n        properties[key] = {\n          type: PROP_TYPES.indexOf(opts.type) !== -1 ? opts.type : null,\n          value: value,\n          observer: createObserver(key) };\n\n      } else {// content:String\n        var type = parsePropType(key, opts);\n        properties[key] = {\n          type: PROP_TYPES.indexOf(type) !== -1 ? type : null,\n          observer: createObserver(key) };\n\n      }\n    });\n  }\n  return properties;\n}\n\nfunction wrapper$2(event) {\n  // TODO 又得兼容 mpvue 的 mp 对象\n  try {\n    event.mp = JSON.parse(JSON.stringify(event));\n  } catch (e) {}\n\n  event.stopPropagation = noop;\n  event.preventDefault = noop;\n\n  event.target = event.target || {};\n\n  if (!hasOwn(event, 'detail')) {\n    event.detail = {};\n  }\n\n  if (isPlainObject(event.detail)) {\n    event.target = Object.assign({}, event.target, event.detail);\n  }\n\n  return event;\n}\n\nfunction getExtraValue(vm, dataPathsArray) {\n  var context = vm;\n  dataPathsArray.forEach(function (dataPathArray) {\n    var dataPath = dataPathArray[0];\n    var value = dataPathArray[2];\n    if (dataPath || typeof value !== 'undefined') {// ['','',index,'disable']\n      var propPath = dataPathArray[1];\n      var valuePath = dataPathArray[3];\n\n      var vFor = dataPath ? vm.__get_value(dataPath, context) : context;\n\n      if (Number.isInteger(vFor)) {\n        context = value;\n      } else if (!propPath) {\n        context = vFor[value];\n      } else {\n        if (Array.isArray(vFor)) {\n          context = vFor.find(function (vForItem) {\n            return vm.__get_value(propPath, vForItem) === value;\n          });\n        } else if (isPlainObject(vFor)) {\n          context = Object.keys(vFor).find(function (vForKey) {\n            return vm.__get_value(propPath, vFor[vForKey]) === value;\n          });\n        } else {\n          console.error('v-for 暂不支持循环数据：', vFor);\n        }\n      }\n\n      if (valuePath) {\n        context = vm.__get_value(valuePath, context);\n      }\n    }\n  });\n  return context;\n}\n\nfunction processEventExtra(vm, extra, event) {\n  var extraObj = {};\n\n  if (Array.isArray(extra) && extra.length) {\n    /**\r\n                                              *[\r\n                                              *    ['data.items', 'data.id', item.data.id],\r\n                                              *    ['metas', 'id', meta.id]\r\n                                              *],\r\n                                              *[\r\n                                              *    ['data.items', 'data.id', item.data.id],\r\n                                              *    ['metas', 'id', meta.id]\r\n                                              *],\r\n                                              *'test'\r\n                                              */\n    extra.forEach(function (dataPath, index) {\n      if (typeof dataPath === 'string') {\n        if (!dataPath) {// model,prop.sync\n          extraObj['$' + index] = vm;\n        } else {\n          if (dataPath === '$event') {// $event\n            extraObj['$' + index] = event;\n          } else if (dataPath.indexOf('$event.') === 0) {// $event.target.value\n            extraObj['$' + index] = vm.__get_value(dataPath.replace('$event.', ''), event);\n          } else {\n            extraObj['$' + index] = vm.__get_value(dataPath);\n          }\n        }\n      } else {\n        extraObj['$' + index] = getExtraValue(vm, dataPath);\n      }\n    });\n  }\n\n  return extraObj;\n}\n\nfunction getObjByArray(arr) {\n  var obj = {};\n  for (var i = 1; i < arr.length; i++) {\n    var element = arr[i];\n    obj[element[0]] = element[1];\n  }\n  return obj;\n}\n\nfunction processEventArgs(vm, event) {var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];var extra = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];var isCustom = arguments.length > 4 ? arguments[4] : undefined;var methodName = arguments.length > 5 ? arguments[5] : undefined;\n  var isCustomMPEvent = false; // wxcomponent 组件，传递原始 event 对象\n  if (isCustom) {// 自定义事件\n    isCustomMPEvent = event.currentTarget &&\n    event.currentTarget.dataset &&\n    event.currentTarget.dataset.comType === 'wx';\n    if (!args.length) {// 无参数，直接传入 event 或 detail 数组\n      if (isCustomMPEvent) {\n        return [event];\n      }\n      return event.detail.__args__ || event.detail;\n    }\n  }\n\n  var extraObj = processEventExtra(vm, extra, event);\n\n  var ret = [];\n  args.forEach(function (arg) {\n    if (arg === '$event') {\n      if (methodName === '__set_model' && !isCustom) {// input v-model value\n        ret.push(event.target.value);\n      } else {\n        if (isCustom && !isCustomMPEvent) {\n          ret.push(event.detail.__args__[0]);\n        } else {// wxcomponent 组件或内置组件\n          ret.push(event);\n        }\n      }\n    } else {\n      if (Array.isArray(arg) && arg[0] === 'o') {\n        ret.push(getObjByArray(arg));\n      } else if (typeof arg === 'string' && hasOwn(extraObj, arg)) {\n        ret.push(extraObj[arg]);\n      } else {\n        ret.push(arg);\n      }\n    }\n  });\n\n  return ret;\n}\n\nvar ONCE = '~';\nvar CUSTOM = '^';\n\nfunction isMatchEventType(eventType, optType) {\n  return eventType === optType ||\n\n  optType === 'regionchange' && (\n\n  eventType === 'begin' ||\n  eventType === 'end');\n\n\n}\n\nfunction handleEvent(event) {var _this = this;\n  event = wrapper$2(event);\n\n  // [['tap',[['handle',[1,2,a]],['handle1',[1,2,a]]]]]\n  var dataset = (event.currentTarget || event.target).dataset;\n  if (!dataset) {\n    return console.warn(\"\\u4E8B\\u4EF6\\u4FE1\\u606F\\u4E0D\\u5B58\\u5728\");\n  }\n  var eventOpts = dataset.eventOpts || dataset['event-opts']; // 支付宝 web-view 组件 dataset 非驼峰\n  if (!eventOpts) {\n    return console.warn(\"\\u4E8B\\u4EF6\\u4FE1\\u606F\\u4E0D\\u5B58\\u5728\");\n  }\n\n  // [['handle',[1,2,a]],['handle1',[1,2,a]]]\n  var eventType = event.type;\n\n  var ret = [];\n\n  eventOpts.forEach(function (eventOpt) {\n    var type = eventOpt[0];\n    var eventsArray = eventOpt[1];\n\n    var isCustom = type.charAt(0) === CUSTOM;\n    type = isCustom ? type.slice(1) : type;\n    var isOnce = type.charAt(0) === ONCE;\n    type = isOnce ? type.slice(1) : type;\n\n    if (eventsArray && isMatchEventType(eventType, type)) {\n      eventsArray.forEach(function (eventArray) {\n        var methodName = eventArray[0];\n        if (methodName) {\n          var handlerCtx = _this.$vm;\n          if (\n          handlerCtx.$options.generic &&\n          handlerCtx.$parent &&\n          handlerCtx.$parent.$parent)\n          {// mp-weixin,mp-toutiao 抽象节点模拟 scoped slots\n            handlerCtx = handlerCtx.$parent.$parent;\n          }\n          if (methodName === '$emit') {\n            handlerCtx.$emit.apply(handlerCtx,\n            processEventArgs(\n            _this.$vm,\n            event,\n            eventArray[1],\n            eventArray[2],\n            isCustom,\n            methodName));\n\n            return;\n          }\n          var handler = handlerCtx[methodName];\n          if (!isFn(handler)) {\n            throw new Error(\" _vm.\".concat(methodName, \" is not a function\"));\n          }\n          if (isOnce) {\n            if (handler.once) {\n              return;\n            }\n            handler.once = true;\n          }\n          ret.push(handler.apply(handlerCtx, processEventArgs(\n          _this.$vm,\n          event,\n          eventArray[1],\n          eventArray[2],\n          isCustom,\n          methodName)));\n\n        }\n      });\n    }\n  });\n\n  if (\n  eventType === 'input' &&\n  ret.length === 1 &&\n  typeof ret[0] !== 'undefined')\n  {\n    return ret[0];\n  }\n}\n\nvar hooks = [\n'onShow',\n'onHide',\n'onError',\n'onPageNotFound'];\n\n\nfunction parseBaseApp(vm, _ref3)\n\n\n{var mocks = _ref3.mocks,initRefs = _ref3.initRefs;\n  if (vm.$options.store) {\n    _vue.default.prototype.$store = vm.$options.store;\n  }\n\n  _vue.default.prototype.mpHost = \"app-plus\";\n\n  _vue.default.mixin({\n    beforeCreate: function beforeCreate() {\n      if (!this.$options.mpType) {\n        return;\n      }\n\n      this.mpType = this.$options.mpType;\n\n      this.$mp = _defineProperty({\n        data: {} },\n      this.mpType, this.$options.mpInstance);\n\n\n      this.$scope = this.$options.mpInstance;\n\n      delete this.$options.mpType;\n      delete this.$options.mpInstance;\n\n      if (this.mpType !== 'app') {\n        initRefs(this);\n        initMocks(this, mocks);\n      }\n    } });\n\n\n  var appOptions = {\n    onLaunch: function onLaunch(args) {\n      if (this.$vm) {// 已经初始化过了，主要是为了百度，百度 onShow 在 onLaunch 之前\n        return;\n      }\n\n      this.$vm = vm;\n\n      this.$vm.$mp = {\n        app: this };\n\n\n      this.$vm.$scope = this;\n      // vm 上也挂载 globalData\n      this.$vm.globalData = this.globalData;\n\n      this.$vm._isMounted = true;\n      this.$vm.__call_hook('mounted', args);\n\n      this.$vm.__call_hook('onLaunch', args);\n    } };\n\n\n  // 兼容旧版本 globalData\n  appOptions.globalData = vm.$options.globalData || {};\n  // 将 methods 中的方法挂在 getApp() 中\n  var methods = vm.$options.methods;\n  if (methods) {\n    Object.keys(methods).forEach(function (name) {\n      appOptions[name] = methods[name];\n    });\n  }\n\n  initHooks(appOptions, hooks);\n\n  return appOptions;\n}\n\nvar mocks = ['__route__', '__wxExparserNodeId__', '__wxWebviewId__'];\n\nfunction findVmByVueId(vm, vuePid) {\n  var $children = vm.$children;\n  // 优先查找直属(反向查找:https://github.com/dcloudio/uni-app/issues/1200)\n  for (var i = $children.length - 1; i >= 0; i--) {\n    var childVm = $children[i];\n    if (childVm.$scope._$vueId === vuePid) {\n      return childVm;\n    }\n  }\n  // 反向递归查找\n  var parentVm;\n  for (var _i = $children.length - 1; _i >= 0; _i--) {\n    parentVm = findVmByVueId($children[_i], vuePid);\n    if (parentVm) {\n      return parentVm;\n    }\n  }\n}\n\nfunction initBehavior(options) {\n  return Behavior(options);\n}\n\nfunction isPage() {\n  return !!this.route;\n}\n\nfunction initRelation(detail) {\n  this.triggerEvent('__l', detail);\n}\n\nfunction initRefs(vm) {\n  var mpInstance = vm.$scope;\n  Object.defineProperty(vm, '$refs', {\n    get: function get() {\n      var $refs = {};\n      var components = mpInstance.selectAllComponents('.vue-ref');\n      components.forEach(function (component) {\n        var ref = component.dataset.ref;\n        $refs[ref] = component.$vm || component;\n      });\n      var forComponents = mpInstance.selectAllComponents('.vue-ref-in-for');\n      forComponents.forEach(function (component) {\n        var ref = component.dataset.ref;\n        if (!$refs[ref]) {\n          $refs[ref] = [];\n        }\n        $refs[ref].push(component.$vm || component);\n      });\n      return $refs;\n    } });\n\n}\n\nfunction handleLink(event) {var _ref4 =\n\n\n\n  event.detail || event.value,vuePid = _ref4.vuePid,vueOptions = _ref4.vueOptions; // detail 是微信,value 是百度(dipatch)\n\n  var parentVm;\n\n  if (vuePid) {\n    parentVm = findVmByVueId(this.$vm, vuePid);\n  }\n\n  if (!parentVm) {\n    parentVm = this.$vm;\n  }\n\n  vueOptions.parent = parentVm;\n}\n\nfunction parseApp(vm) {\n  return parseBaseApp(vm, {\n    mocks: mocks,\n    initRefs: initRefs });\n\n}\n\nvar hooks$1 = [\n'onUniNViewMessage'];\n\n\nfunction parseApp$1(vm) {\n  var appOptions = parseApp(vm);\n\n  initHooks(appOptions, hooks$1);\n\n  return appOptions;\n}\n\nfunction createApp(vm) {\n  App(parseApp$1(vm));\n  return vm;\n}\n\nfunction parseBaseComponent(vueComponentOptions)\n\n\n{var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},isPage = _ref5.isPage,initRelation = _ref5.initRelation;var _initVueComponent =\n  initVueComponent(_vue.default, vueComponentOptions),_initVueComponent2 = _slicedToArray(_initVueComponent, 2),VueComponent = _initVueComponent2[0],vueOptions = _initVueComponent2[1];\n\n  var options = _objectSpread({\n    multipleSlots: true,\n    addGlobalClass: true },\n  vueOptions.options || {});\n\n\n  var componentOptions = {\n    options: options,\n    data: initData(vueOptions, _vue.default.prototype),\n    behaviors: initBehaviors(vueOptions, initBehavior),\n    properties: initProperties(vueOptions.props, false, vueOptions.__file),\n    lifetimes: {\n      attached: function attached() {\n        var properties = this.properties;\n\n        var options = {\n          mpType: isPage.call(this) ? 'page' : 'component',\n          mpInstance: this,\n          propsData: properties };\n\n\n        initVueIds(properties.vueId, this);\n\n        // 处理父子关系\n        initRelation.call(this, {\n          vuePid: this._$vuePid,\n          vueOptions: options });\n\n\n        // 初始化 vue 实例\n        this.$vm = new VueComponent(options);\n\n        // 处理$slots,$scopedSlots（暂不支持动态变化$slots）\n        initSlots(this.$vm, properties.vueSlots);\n\n        // 触发首次 setData\n        this.$vm.$mount();\n      },\n      ready: function ready() {\n        // 当组件 props 默认值为 true，初始化时传入 false 会导致 created,ready 触发, 但 attached 不触发\n        // https://developers.weixin.qq.com/community/develop/doc/00066ae2844cc0f8eb883e2a557800\n        if (this.$vm) {\n          this.$vm._isMounted = true;\n          this.$vm.__call_hook('mounted');\n          this.$vm.__call_hook('onReady');\n        }\n      },\n      detached: function detached() {\n        this.$vm && this.$vm.$destroy();\n      } },\n\n    pageLifetimes: {\n      show: function show(args) {\n        this.$vm && this.$vm.__call_hook('onPageShow', args);\n      },\n      hide: function hide() {\n        this.$vm && this.$vm.__call_hook('onPageHide');\n      },\n      resize: function resize(size) {\n        this.$vm && this.$vm.__call_hook('onPageResize', size);\n      } },\n\n    methods: {\n      __l: handleLink,\n      __e: handleEvent } };\n\n\n\n  if (Array.isArray(vueOptions.wxsCallMethods)) {\n    vueOptions.wxsCallMethods.forEach(function (callMethod) {\n      componentOptions.methods[callMethod] = function (args) {\n        return this.$vm[callMethod](args);\n      };\n    });\n  }\n\n  if (isPage) {\n    return componentOptions;\n  }\n  return [componentOptions, VueComponent];\n}\n\nfunction parseComponent(vueComponentOptions) {\n  return parseBaseComponent(vueComponentOptions, {\n    isPage: isPage,\n    initRelation: initRelation });\n\n}\n\nfunction parseComponent$1(vueComponentOptions) {\n  var componentOptions = parseComponent(vueComponentOptions);\n\n  componentOptions.methods.$getAppWebview = function () {\n    return plus.webview.getWebviewById(\"\".concat(this.__wxWebviewId__));\n  };\n  return componentOptions;\n}\n\nvar hooks$2 = [\n'onShow',\n'onHide',\n'onUnload'];\n\n\nhooks$2.push.apply(hooks$2, PAGE_EVENT_HOOKS);\n\nfunction parseBasePage(vuePageOptions, _ref6)\n\n\n{var isPage = _ref6.isPage,initRelation = _ref6.initRelation;\n  var pageOptions = parseComponent$1(vuePageOptions);\n\n  initHooks(pageOptions.methods, hooks$2, vuePageOptions);\n\n  pageOptions.methods.onLoad = function (args) {\n    this.$vm.$mp.query = args; // 兼容 mpvue\n    this.$vm.__call_hook('onLoad', args);\n  };\n\n  return pageOptions;\n}\n\nfunction parsePage(vuePageOptions) {\n  return parseBasePage(vuePageOptions, {\n    isPage: isPage,\n    initRelation: initRelation });\n\n}\n\nvar hooks$3 = [\n'onBackPress',\n'onNavigationBarButtonTap',\n'onNavigationBarSearchInputChanged',\n'onNavigationBarSearchInputConfirmed',\n'onNavigationBarSearchInputClicked'];\n\n\nfunction parsePage$1(vuePageOptions) {\n  var pageOptions = parsePage(vuePageOptions);\n\n  initHooks(pageOptions.methods, hooks$3);\n\n  return pageOptions;\n}\n\nfunction createPage(vuePageOptions) {\n  {\n    return Component(parsePage$1(vuePageOptions));\n  }\n}\n\nfunction createComponent(vueOptions) {\n  {\n    return Component(parseComponent$1(vueOptions));\n  }\n}\n\ntodos.forEach(function (todoApi) {\n  protocols[todoApi] = false;\n});\n\ncanIUses.forEach(function (canIUseApi) {\n  var apiName = protocols[canIUseApi] && protocols[canIUseApi].name ? protocols[canIUseApi].name :\n  canIUseApi;\n  if (!wx.canIUse(apiName)) {\n    protocols[canIUseApi] = false;\n  }\n});\n\nvar uni = {};\n\nif (typeof Proxy !== 'undefined' && \"app-plus\" !== 'app-plus') {\n  uni = new Proxy({}, {\n    get: function get(target, name) {\n      if (target[name]) {\n        return target[name];\n      }\n      if (baseApi[name]) {\n        return baseApi[name];\n      }\n      if (api[name]) {\n        return promisify(name, api[name]);\n      }\n      if (eventApi[name]) {\n        return eventApi[name];\n      }\n      if (!hasOwn(wx, name) && !hasOwn(protocols, name)) {\n        return;\n      }\n      return promisify(name, wrapper(name, wx[name]));\n    },\n    set: function set(target, name, value) {\n      target[name] = value;\n      return true;\n    } });\n\n} else {\n  Object.keys(baseApi).forEach(function (name) {\n    uni[name] = baseApi[name];\n  });\n\n  Object.keys(eventApi).forEach(function (name) {\n    uni[name] = eventApi[name];\n  });\n\n  Object.keys(api).forEach(function (name) {\n    uni[name] = promisify(name, api[name]);\n  });\n\n  Object.keys(wx).forEach(function (name) {\n    if (hasOwn(wx, name) || hasOwn(protocols, name)) {\n      uni[name] = promisify(name, wrapper(name, wx[name]));\n    }\n  });\n}\n\n{\n  if (typeof global !== 'undefined') {\n    global.uni = uni;\n    global.UniEmitter = eventApi;\n  }\n}\n\nwx.createApp = createApp;\nwx.createPage = createPage;\nwx.createComponent = createComponent;\n\nvar uni$1 = uni;var _default =\n\nuni$1;exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ }),

/***/ 12:
/*!*********************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = formatLog;function typof(v) {\n  var s = Object.prototype.toString.call(v);\n  return s.substring(8, s.length - 1);\n}\n\nfunction isDebugMode() {\n  /* eslint-disable no-undef */\n  return typeof __channelId__ === 'string' && __channelId__;\n}\n\nfunction formatLog() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  var type = args.shift();\n  if (isDebugMode()) {\n    args.push(args.pop().replace('at ', 'uni-app:///'));\n    return console[type]['apply'](console, args);\n  }\n\n  var msgs = args.map(function (v) {\n    var type = Object.prototype.toString.call(v);\n\n    if (type.toLowerCase() === '[object object]') {\n      try {\n        v = '---BEGIN:JSON---' + JSON.stringify(v) + '---END:JSON---';\n      } catch (e) {\n        v = '[object object]';\n      }\n    } else {\n      if (v === null) {\n        v = '---NULL---';\n      } else if (v === undefined) {\n        v = '---UNDEFINED---';\n      } else {\n        var vType = typof(v).toUpperCase();\n\n        if (vType === 'NUMBER' || vType === 'BOOLEAN') {\n          v = '---BEGIN:' + vType + '---' + v + '---END:' + vType + '---';\n        } else {\n          v = String(v);\n        }\n      }\n    }\n\n    return v;\n  });\n  var msg = '';\n\n  if (msgs.length > 1) {\n    var lastMsg = msgs.pop();\n    msg = msgs.join('---COMMA---');\n\n    if (lastMsg.indexOf(' at ') === 0) {\n      msg += lastMsg;\n    } else {\n      msg += '---COMMA---' + lastMsg;\n    }\n  } else {\n    msg = msgs[0];\n  }\n\n  console[type](msg);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbInR5cG9mIiwidiIsInMiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJzdWJzdHJpbmciLCJsZW5ndGgiLCJpc0RlYnVnTW9kZSIsIl9fY2hhbm5lbElkX18iLCJmb3JtYXRMb2ciLCJfbGVuIiwiYXJndW1lbnRzIiwiYXJncyIsIkFycmF5IiwiX2tleSIsInR5cGUiLCJzaGlmdCIsInB1c2giLCJwb3AiLCJyZXBsYWNlIiwiY29uc29sZSIsIm1zZ3MiLCJtYXAiLCJ0b0xvd2VyQ2FzZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJlIiwidW5kZWZpbmVkIiwidlR5cGUiLCJ0b1VwcGVyQ2FzZSIsIlN0cmluZyIsIm1zZyIsImxhc3RNc2ciLCJqb2luIiwiaW5kZXhPZiJdLCJtYXBwaW5ncyI6IjBGQUFBLFNBQVNBLEtBQVQsQ0FBZ0JDLENBQWhCLEVBQW1CO0FBQ2pCLE1BQUlDLENBQUMsR0FBR0MsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JMLENBQS9CLENBQVI7QUFDQSxTQUFPQyxDQUFDLENBQUNLLFNBQUYsQ0FBWSxDQUFaLEVBQWVMLENBQUMsQ0FBQ00sTUFBRixHQUFXLENBQTFCLENBQVA7QUFDRDs7QUFFRCxTQUFTQyxXQUFULEdBQXdCO0FBQ3RCO0FBQ0EsU0FBTyxPQUFPQyxhQUFQLEtBQXlCLFFBQXpCLElBQXFDQSxhQUE1QztBQUNEOztBQUVjLFNBQVNDLFNBQVQsR0FBc0I7QUFDbkMsT0FBSyxJQUFJQyxJQUFJLEdBQUdDLFNBQVMsQ0FBQ0wsTUFBckIsRUFBNkJNLElBQUksR0FBRyxJQUFJQyxLQUFKLENBQVVILElBQVYsQ0FBcEMsRUFBcURJLElBQUksR0FBRyxDQUFqRSxFQUFvRUEsSUFBSSxHQUFHSixJQUEzRSxFQUFpRkksSUFBSSxFQUFyRixFQUF5RjtBQUN2RkYsUUFBSSxDQUFDRSxJQUFELENBQUosR0FBYUgsU0FBUyxDQUFDRyxJQUFELENBQXRCO0FBQ0Q7QUFDRCxNQUFJQyxJQUFJLEdBQUdILElBQUksQ0FBQ0ksS0FBTCxFQUFYO0FBQ0EsTUFBSVQsV0FBVyxFQUFmLEVBQW1CO0FBQ2pCSyxRQUFJLENBQUNLLElBQUwsQ0FBVUwsSUFBSSxDQUFDTSxHQUFMLEdBQVdDLE9BQVgsQ0FBbUIsS0FBbkIsRUFBMEIsYUFBMUIsQ0FBVjtBQUNBLFdBQU9DLE9BQU8sQ0FBQ0wsSUFBRCxDQUFQLENBQWMsT0FBZCxFQUF1QkssT0FBdkIsRUFBZ0NSLElBQWhDLENBQVA7QUFDRDs7QUFFRCxNQUFJUyxJQUFJLEdBQUdULElBQUksQ0FBQ1UsR0FBTCxDQUFTLFVBQVV2QixDQUFWLEVBQWE7QUFDL0IsUUFBSWdCLElBQUksR0FBR2QsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JMLENBQS9CLENBQVg7O0FBRUEsUUFBSWdCLElBQUksQ0FBQ1EsV0FBTCxPQUF1QixpQkFBM0IsRUFBOEM7QUFDNUMsVUFBSTtBQUNGeEIsU0FBQyxHQUFHLHFCQUFxQnlCLElBQUksQ0FBQ0MsU0FBTCxDQUFlMUIsQ0FBZixDQUFyQixHQUF5QyxnQkFBN0M7QUFDRCxPQUZELENBRUUsT0FBTzJCLENBQVAsRUFBVTtBQUNWM0IsU0FBQyxHQUFHLGlCQUFKO0FBQ0Q7QUFDRixLQU5ELE1BTU87QUFDTCxVQUFJQSxDQUFDLEtBQUssSUFBVixFQUFnQjtBQUNkQSxTQUFDLEdBQUcsWUFBSjtBQUNELE9BRkQsTUFFTyxJQUFJQSxDQUFDLEtBQUs0QixTQUFWLEVBQXFCO0FBQzFCNUIsU0FBQyxHQUFHLGlCQUFKO0FBQ0QsT0FGTSxNQUVBO0FBQ0wsWUFBSTZCLEtBQUssR0FBRzlCLEtBQUssQ0FBQ0MsQ0FBRCxDQUFMLENBQVM4QixXQUFULEVBQVo7O0FBRUEsWUFBSUQsS0FBSyxLQUFLLFFBQVYsSUFBc0JBLEtBQUssS0FBSyxTQUFwQyxFQUErQztBQUM3QzdCLFdBQUMsR0FBRyxjQUFjNkIsS0FBZCxHQUFzQixLQUF0QixHQUE4QjdCLENBQTlCLEdBQWtDLFNBQWxDLEdBQThDNkIsS0FBOUMsR0FBc0QsS0FBMUQ7QUFDRCxTQUZELE1BRU87QUFDTDdCLFdBQUMsR0FBRytCLE1BQU0sQ0FBQy9CLENBQUQsQ0FBVjtBQUNEO0FBQ0Y7QUFDRjs7QUFFRCxXQUFPQSxDQUFQO0FBQ0QsR0ExQlUsQ0FBWDtBQTJCQSxNQUFJZ0MsR0FBRyxHQUFHLEVBQVY7O0FBRUEsTUFBSVYsSUFBSSxDQUFDZixNQUFMLEdBQWMsQ0FBbEIsRUFBcUI7QUFDbkIsUUFBSTBCLE9BQU8sR0FBR1gsSUFBSSxDQUFDSCxHQUFMLEVBQWQ7QUFDQWEsT0FBRyxHQUFHVixJQUFJLENBQUNZLElBQUwsQ0FBVSxhQUFWLENBQU47O0FBRUEsUUFBSUQsT0FBTyxDQUFDRSxPQUFSLENBQWdCLE1BQWhCLE1BQTRCLENBQWhDLEVBQW1DO0FBQ2pDSCxTQUFHLElBQUlDLE9BQVA7QUFDRCxLQUZELE1BRU87QUFDTEQsU0FBRyxJQUFJLGdCQUFnQkMsT0FBdkI7QUFDRDtBQUNGLEdBVEQsTUFTTztBQUNMRCxPQUFHLEdBQUdWLElBQUksQ0FBQyxDQUFELENBQVY7QUFDRDs7QUFFREQsU0FBTyxDQUFDTCxJQUFELENBQVAsQ0FBY2dCLEdBQWQ7QUFDRCIsImZpbGUiOiIxMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHR5cG9mICh2KSB7XHJcbiAgdmFyIHMgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodilcclxuICByZXR1cm4gcy5zdWJzdHJpbmcoOCwgcy5sZW5ndGggLSAxKVxyXG59XHJcblxyXG5mdW5jdGlvbiBpc0RlYnVnTW9kZSAoKSB7XHJcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYgKi9cclxuICByZXR1cm4gdHlwZW9mIF9fY2hhbm5lbElkX18gPT09ICdzdHJpbmcnICYmIF9fY2hhbm5lbElkX19cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0TG9nICgpIHtcclxuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcclxuICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV1cclxuICB9XHJcbiAgdmFyIHR5cGUgPSBhcmdzLnNoaWZ0KClcclxuICBpZiAoaXNEZWJ1Z01vZGUoKSkge1xyXG4gICAgYXJncy5wdXNoKGFyZ3MucG9wKCkucmVwbGFjZSgnYXQgJywgJ3VuaS1hcHA6Ly8vJykpXHJcbiAgICByZXR1cm4gY29uc29sZVt0eXBlXVsnYXBwbHknXShjb25zb2xlLCBhcmdzKVxyXG4gIH1cclxuXHJcbiAgdmFyIG1zZ3MgPSBhcmdzLm1hcChmdW5jdGlvbiAodikge1xyXG4gICAgdmFyIHR5cGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodilcclxuXHJcbiAgICBpZiAodHlwZS50b0xvd2VyQ2FzZSgpID09PSAnW29iamVjdCBvYmplY3RdJykge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHYgPSAnLS0tQkVHSU46SlNPTi0tLScgKyBKU09OLnN0cmluZ2lmeSh2KSArICctLS1FTkQ6SlNPTi0tLSdcclxuICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIHYgPSAnW29iamVjdCBvYmplY3RdJ1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAodiA9PT0gbnVsbCkge1xyXG4gICAgICAgIHYgPSAnLS0tTlVMTC0tLSdcclxuICAgICAgfSBlbHNlIGlmICh2ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICB2ID0gJy0tLVVOREVGSU5FRC0tLSdcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB2YXIgdlR5cGUgPSB0eXBvZih2KS50b1VwcGVyQ2FzZSgpXHJcblxyXG4gICAgICAgIGlmICh2VHlwZSA9PT0gJ05VTUJFUicgfHwgdlR5cGUgPT09ICdCT09MRUFOJykge1xyXG4gICAgICAgICAgdiA9ICctLS1CRUdJTjonICsgdlR5cGUgKyAnLS0tJyArIHYgKyAnLS0tRU5EOicgKyB2VHlwZSArICctLS0nXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHYgPSBTdHJpbmcodilcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdlxyXG4gIH0pXHJcbiAgdmFyIG1zZyA9ICcnXHJcblxyXG4gIGlmIChtc2dzLmxlbmd0aCA+IDEpIHtcclxuICAgIHZhciBsYXN0TXNnID0gbXNncy5wb3AoKVxyXG4gICAgbXNnID0gbXNncy5qb2luKCctLS1DT01NQS0tLScpXHJcblxyXG4gICAgaWYgKGxhc3RNc2cuaW5kZXhPZignIGF0ICcpID09PSAwKSB7XHJcbiAgICAgIG1zZyArPSBsYXN0TXNnXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBtc2cgKz0gJy0tLUNPTU1BLS0tJyArIGxhc3RNc2dcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgbXNnID0gbXNnc1swXVxyXG4gIH1cclxuXHJcbiAgY29uc29sZVt0eXBlXShtc2cpXHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///12\n");

/***/ }),

/***/ 13:
/*!*************************************************!*\
  !*** D:/work/financeForum_app/common/helper.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;\nvar requestUrl = 'https://jinrong.beaconway.cn/api';\nvar imgUrl = 'https://jinrong.beaconway.cn/uploads/';\n// 修改图片路径时候同时修改components中的qiyue-category图片路径\n\n// const requestUrl = 'http://192.168.1.168/api';\n// const imgUrl = 'http://192.168.1.168/uploads/';\n\n// 时间戳转时间\nvar transformTime = new Date() || function () {\n  if (timestamp) {\n    var time = new Date(timestamp);\n    var y = time.getFullYear(); //getFullYear方法以四位数字返回年份\n    var M = time.getMonth() + 1; // getMonth方法从 Date 对象返回月份 (0 ~ 11)，返回结果需要手动加一\n    var d = time.getDate(); // getDate方法从 Date 对象返回一个月中的某一天 (1 ~ 31)\n    var h = time.getHours(); // getHours方法返回 Date 对象的小时 (0 ~ 23)\n    var m = time.getMinutes(); // getMinutes方法返回 Date 对象的分钟 (0 ~ 59)\n    var s = time.getSeconds(); // getSeconds方法返回 Date 对象的秒数 (0 ~ 59)\n    return y + '-' + M + '-' + d + ' ' + h + ':' + m + ':' + s;\n  } else {\n    return '';\n  }\n};\n\n// 解析链接中的参数\nvar getQueryString = function getQueryString(url, name) {\n  __f__(\"log\", \"url = \" + url, \" at common\\\\helper.js:27\");\n  __f__(\"log\", \"name = \" + name, \" at common\\\\helper.js:28\");\n  var reg = new RegExp('(^|&|/?)' + name + '=([^&|/?]*)(&|/?|$)', 'i');\n  var r = url.substr(1).match(reg);\n  if (r != null) {\n    __f__(\"log\", \"r = \" + r, \" at common\\\\helper.js:32\");\n    __f__(\"log\", \"r[2] = \" + r[2], \" at common\\\\helper.js:33\");\n    return r[2];\n  }\n  return null;\n};\n\n// 数据对象 null => ''\nvar null2str = function null2str(res) {var _this = this;\n  for (var x in res) {\n    if (res[x] === null) {// 如果是null 把直接内容转为 ''\n      res[x] = '';\n    } else {\n      if (Array.isArray(res[x])) {// 是数组遍历数组 递归继续处理\n        res[x] = res[x].map(function (z) {\n          return _this.null2str(z);\n        });\n      }\n      if (typeof res[x] === 'object') {// 是json 递归继续处理\n        res[x] = this.null2str(res[x]);\n      }\n    }\n  }\n  return res;\n};\n\n// 获取当前时间\nvar now = Date.now || function () {\n  return new Date().getTime();\n};\n\n// 获取数据类型\nvar isArray = Array.isArray || function (obj) {\n  return obj instanceof Array;\n};var _default =\n\n{\n  requestUrl: requestUrl,\n  imgUrl: imgUrl,\n  transformTime: transformTime,\n  null2str: null2str,\n  now: now,\n  isArray: isArray,\n  getQueryString: getQueryString };exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tbW9uL2hlbHBlci5qcyJdLCJuYW1lcyI6WyJyZXF1ZXN0VXJsIiwiaW1nVXJsIiwidHJhbnNmb3JtVGltZSIsIkRhdGUiLCJ0aW1lc3RhbXAiLCJ0aW1lIiwieSIsImdldEZ1bGxZZWFyIiwiTSIsImdldE1vbnRoIiwiZCIsImdldERhdGUiLCJoIiwiZ2V0SG91cnMiLCJtIiwiZ2V0TWludXRlcyIsInMiLCJnZXRTZWNvbmRzIiwiZ2V0UXVlcnlTdHJpbmciLCJ1cmwiLCJuYW1lIiwicmVnIiwiUmVnRXhwIiwiciIsInN1YnN0ciIsIm1hdGNoIiwibnVsbDJzdHIiLCJyZXMiLCJ4IiwiQXJyYXkiLCJpc0FycmF5IiwibWFwIiwieiIsIm5vdyIsImdldFRpbWUiLCJvYmoiXSwibWFwcGluZ3MiOiI7QUFDQSxJQUFNQSxVQUFVLEdBQUcsa0NBQW5CO0FBQ0EsSUFBTUMsTUFBTSxHQUFHLHVDQUFmO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLElBQU1DLGFBQWEsR0FBRyxJQUFJQyxJQUFKLE1BQWMsWUFBVztBQUM5QyxNQUFJQyxTQUFKLEVBQWU7QUFDZCxRQUFJQyxJQUFJLEdBQUcsSUFBSUYsSUFBSixDQUFTQyxTQUFULENBQVg7QUFDQSxRQUFJRSxDQUFDLEdBQUdELElBQUksQ0FBQ0UsV0FBTCxFQUFSLENBRmMsQ0FFYztBQUM1QixRQUFJQyxDQUFDLEdBQUdILElBQUksQ0FBQ0ksUUFBTCxLQUFrQixDQUExQixDQUhjLENBR2U7QUFDN0IsUUFBSUMsQ0FBQyxHQUFHTCxJQUFJLENBQUNNLE9BQUwsRUFBUixDQUpjLENBSVU7QUFDeEIsUUFBSUMsQ0FBQyxHQUFHUCxJQUFJLENBQUNRLFFBQUwsRUFBUixDQUxjLENBS1c7QUFDekIsUUFBSUMsQ0FBQyxHQUFHVCxJQUFJLENBQUNVLFVBQUwsRUFBUixDQU5jLENBTWE7QUFDM0IsUUFBSUMsQ0FBQyxHQUFHWCxJQUFJLENBQUNZLFVBQUwsRUFBUixDQVBjLENBT2E7QUFDM0IsV0FBT1gsQ0FBQyxHQUFHLEdBQUosR0FBVUUsQ0FBVixHQUFjLEdBQWQsR0FBb0JFLENBQXBCLEdBQXdCLEdBQXhCLEdBQThCRSxDQUE5QixHQUFrQyxHQUFsQyxHQUF3Q0UsQ0FBeEMsR0FBNEMsR0FBNUMsR0FBa0RFLENBQXpEO0FBQ0EsR0FURCxNQVNPO0FBQ04sV0FBTyxFQUFQO0FBQ0E7QUFDRCxDQWJEOztBQWVBO0FBQ0EsSUFBTUUsY0FBYyxHQUFHLFNBQWpCQSxjQUFpQixDQUFVQyxHQUFWLEVBQWVDLElBQWYsRUFBcUI7QUFDMUMsZUFBWSxXQUFXRCxHQUF2QjtBQUNBLGVBQVksWUFBWUMsSUFBeEI7QUFDQSxNQUFJQyxHQUFHLEdBQUcsSUFBSUMsTUFBSixDQUFXLGFBQWFGLElBQWIsR0FBb0IscUJBQS9CLEVBQXNELEdBQXRELENBQVY7QUFDQSxNQUFJRyxDQUFDLEdBQUdKLEdBQUcsQ0FBQ0ssTUFBSixDQUFXLENBQVgsRUFBY0MsS0FBZCxDQUFvQkosR0FBcEIsQ0FBUjtBQUNBLE1BQUlFLENBQUMsSUFBSSxJQUFULEVBQWU7QUFDYixpQkFBWSxTQUFTQSxDQUFyQjtBQUNBLGlCQUFZLFlBQVlBLENBQUMsQ0FBQyxDQUFELENBQXpCO0FBQ0EsV0FBT0EsQ0FBQyxDQUFDLENBQUQsQ0FBUjtBQUNEO0FBQ0QsU0FBTyxJQUFQO0FBQ0QsQ0FYRDs7QUFhQTtBQUNBLElBQU1HLFFBQVEsR0FBRyxTQUFYQSxRQUFXLENBQVNDLEdBQVQsRUFBYztBQUM5QixPQUFLLElBQUlDLENBQVQsSUFBY0QsR0FBZCxFQUFtQjtBQUNsQixRQUFJQSxHQUFHLENBQUNDLENBQUQsQ0FBSCxLQUFXLElBQWYsRUFBcUIsQ0FBRTtBQUN0QkQsU0FBRyxDQUFDQyxDQUFELENBQUgsR0FBUyxFQUFUO0FBQ0EsS0FGRCxNQUVPO0FBQ04sVUFBSUMsS0FBSyxDQUFDQyxPQUFOLENBQWNILEdBQUcsQ0FBQ0MsQ0FBRCxDQUFqQixDQUFKLEVBQTJCLENBQUU7QUFDNUJELFdBQUcsQ0FBQ0MsQ0FBRCxDQUFILEdBQVNELEdBQUcsQ0FBQ0MsQ0FBRCxDQUFILENBQU9HLEdBQVAsQ0FBVyxVQUFBQyxDQUFDLEVBQUk7QUFDeEIsaUJBQU8sS0FBSSxDQUFDTixRQUFMLENBQWNNLENBQWQsQ0FBUDtBQUNBLFNBRlEsQ0FBVDtBQUdBO0FBQ0QsVUFBSSxPQUFPTCxHQUFHLENBQUNDLENBQUQsQ0FBVixLQUFtQixRQUF2QixFQUFpQyxDQUFFO0FBQ2xDRCxXQUFHLENBQUNDLENBQUQsQ0FBSCxHQUFTLEtBQUtGLFFBQUwsQ0FBY0MsR0FBRyxDQUFDQyxDQUFELENBQWpCLENBQVQ7QUFDQTtBQUNEO0FBQ0Q7QUFDRCxTQUFPRCxHQUFQO0FBQ0EsQ0FoQkQ7O0FBa0JBO0FBQ0EsSUFBTU0sR0FBRyxHQUFHOUIsSUFBSSxDQUFDOEIsR0FBTCxJQUFZLFlBQVc7QUFDbEMsU0FBTyxJQUFJOUIsSUFBSixHQUFXK0IsT0FBWCxFQUFQO0FBQ0EsQ0FGRDs7QUFJQTtBQUNBLElBQU1KLE9BQU8sR0FBR0QsS0FBSyxDQUFDQyxPQUFOLElBQWlCLFVBQVNLLEdBQVQsRUFBYztBQUM5QyxTQUFPQSxHQUFHLFlBQVlOLEtBQXRCO0FBQ0EsQ0FGRCxDOztBQUllO0FBQ2Q3QixZQUFVLEVBQVZBLFVBRGM7QUFFZEMsUUFBTSxFQUFOQSxNQUZjO0FBR2RDLGVBQWEsRUFBYkEsYUFIYztBQUlkd0IsVUFBUSxFQUFSQSxRQUpjO0FBS2RPLEtBQUcsRUFBSEEsR0FMYztBQU1kSCxTQUFPLEVBQVBBLE9BTmM7QUFPZFosZ0JBQWMsRUFBZEEsY0FQYyxFIiwiZmlsZSI6IjEzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbmNvbnN0IHJlcXVlc3RVcmwgPSAnaHR0cHM6Ly9qaW5yb25nLmJlYWNvbndheS5jbi9hcGknO1xyXG5jb25zdCBpbWdVcmwgPSAnaHR0cHM6Ly9qaW5yb25nLmJlYWNvbndheS5jbi91cGxvYWRzLyc7XHJcbi8vIOS/ruaUueWbvueJh+i3r+W+hOaXtuWAmeWQjOaXtuS/ruaUuWNvbXBvbmVudHPkuK3nmoRxaXl1ZS1jYXRlZ29yeeWbvueJh+i3r+W+hFxyXG5cclxuLy8gY29uc3QgcmVxdWVzdFVybCA9ICdodHRwOi8vMTkyLjE2OC4xLjE2OC9hcGknO1xyXG4vLyBjb25zdCBpbWdVcmwgPSAnaHR0cDovLzE5Mi4xNjguMS4xNjgvdXBsb2Fkcy8nO1xyXG5cclxuLy8g5pe26Ze05oiz6L2s5pe26Ze0XHJcbmNvbnN0IHRyYW5zZm9ybVRpbWUgPSBuZXcgRGF0ZSgpIHx8IGZ1bmN0aW9uKCkge1xyXG5cdGlmICh0aW1lc3RhbXApIHtcclxuXHRcdHZhciB0aW1lID0gbmV3IERhdGUodGltZXN0YW1wKTtcclxuXHRcdHZhciB5ID0gdGltZS5nZXRGdWxsWWVhcigpOyAvL2dldEZ1bGxZZWFy5pa55rOV5Lul5Zub5L2N5pWw5a2X6L+U5Zue5bm05Lu9XHJcblx0XHR2YXIgTSA9IHRpbWUuZ2V0TW9udGgoKSArIDE7IC8vIGdldE1vbnRo5pa55rOV5LuOIERhdGUg5a+56LGh6L+U5Zue5pyI5Lu9ICgwIH4gMTEp77yM6L+U5Zue57uT5p6c6ZyA6KaB5omL5Yqo5Yqg5LiAXHJcblx0XHR2YXIgZCA9IHRpbWUuZ2V0RGF0ZSgpOyAvLyBnZXREYXRl5pa55rOV5LuOIERhdGUg5a+56LGh6L+U5Zue5LiA5Liq5pyI5Lit55qE5p+Q5LiA5aSpICgxIH4gMzEpXHJcblx0XHR2YXIgaCA9IHRpbWUuZ2V0SG91cnMoKTsgLy8gZ2V0SG91cnPmlrnms5Xov5Tlm54gRGF0ZSDlr7nosaHnmoTlsI/ml7YgKDAgfiAyMylcclxuXHRcdHZhciBtID0gdGltZS5nZXRNaW51dGVzKCk7IC8vIGdldE1pbnV0ZXPmlrnms5Xov5Tlm54gRGF0ZSDlr7nosaHnmoTliIbpkp8gKDAgfiA1OSlcclxuXHRcdHZhciBzID0gdGltZS5nZXRTZWNvbmRzKCk7IC8vIGdldFNlY29uZHPmlrnms5Xov5Tlm54gRGF0ZSDlr7nosaHnmoTnp5LmlbAgKDAgfiA1OSlcclxuXHRcdHJldHVybiB5ICsgJy0nICsgTSArICctJyArIGQgKyAnICcgKyBoICsgJzonICsgbSArICc6JyArIHM7XHJcblx0fSBlbHNlIHtcclxuXHRcdHJldHVybiAnJztcclxuXHR9XHJcbn1cclxuXHJcbi8vIOino+aekOmTvuaOpeS4reeahOWPguaVsFxyXG5jb25zdCBnZXRRdWVyeVN0cmluZyA9IGZ1bmN0aW9uICh1cmwsIG5hbWUpIHtcclxuICBjb25zb2xlLmxvZyhcInVybCA9IFwiICsgdXJsKVxyXG4gIGNvbnNvbGUubG9nKFwibmFtZSA9IFwiICsgbmFtZSlcclxuICB2YXIgcmVnID0gbmV3IFJlZ0V4cCgnKF58JnwvPyknICsgbmFtZSArICc9KFteJnwvP10qKSgmfC8/fCQpJywgJ2knKVxyXG4gIHZhciByID0gdXJsLnN1YnN0cigxKS5tYXRjaChyZWcpXHJcbiAgaWYgKHIgIT0gbnVsbCkge1xyXG4gICAgY29uc29sZS5sb2coXCJyID0gXCIgKyByKVxyXG4gICAgY29uc29sZS5sb2coXCJyWzJdID0gXCIgKyByWzJdKVxyXG4gICAgcmV0dXJuIHJbMl1cclxuICB9XHJcbiAgcmV0dXJuIG51bGw7XHJcbn1cclxuXHJcbi8vIOaVsOaNruWvueixoSBudWxsID0+ICcnXHJcbmNvbnN0IG51bGwyc3RyID0gZnVuY3Rpb24ocmVzKSB7XHJcblx0Zm9yIChsZXQgeCBpbiByZXMpIHtcclxuXHRcdGlmIChyZXNbeF0gPT09IG51bGwpIHsgLy8g5aaC5p6c5pivbnVsbCDmiornm7TmjqXlhoXlrrnovazkuLogJydcclxuXHRcdFx0cmVzW3hdID0gJydcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGlmIChBcnJheS5pc0FycmF5KHJlc1t4XSkpIHsgLy8g5piv5pWw57uE6YGN5Y6G5pWw57uEIOmAkuW9kue7p+e7reWkhOeQhlxyXG5cdFx0XHRcdHJlc1t4XSA9IHJlc1t4XS5tYXAoeiA9PiB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5udWxsMnN0cih6KVxyXG5cdFx0XHRcdH0pXHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKHR5cGVvZihyZXNbeF0pID09PSAnb2JqZWN0JykgeyAvLyDmmK9qc29uIOmAkuW9kue7p+e7reWkhOeQhlxyXG5cdFx0XHRcdHJlc1t4XSA9IHRoaXMubnVsbDJzdHIocmVzW3hdKVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiByZXNcclxufVxyXG5cclxuLy8g6I635Y+W5b2T5YmN5pe26Ze0XHJcbmNvbnN0IG5vdyA9IERhdGUubm93IHx8IGZ1bmN0aW9uKCkge1xyXG5cdHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxufTtcclxuXHJcbi8vIOiOt+WPluaVsOaNruexu+Wei1xyXG5jb25zdCBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbihvYmopIHtcclxuXHRyZXR1cm4gb2JqIGluc3RhbmNlb2YgQXJyYXk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcblx0cmVxdWVzdFVybCxcclxuXHRpbWdVcmwsXHJcblx0dHJhbnNmb3JtVGltZSxcclxuXHRudWxsMnN0cixcclxuXHRub3csXHJcblx0aXNBcnJheSxcclxuXHRnZXRRdWVyeVN0cmluZ1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///13\n");

/***/ }),

/***/ 16:
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js ***!
  \**********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return normalizeComponent; });\n/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nfunction normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode, /* vue-cli only */\n  components, // fixed by xxxxxx auto components\n  renderjs // fixed by xxxxxx renderjs\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // fixed by xxxxxx auto components\n  if (components) {\n    options.components = Object.assign(components, options.components || {})\n  }\n  // fixed by xxxxxx renderjs\n  if (renderjs) {\n    (renderjs.beforeCreate || (renderjs.beforeCreate = [])).unshift(function() {\n      this[renderjs.__module] = this\n    });\n    (options.mixins || (options.mixins = [])).push(renderjs)\n  }\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDJFQUEyRTtBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjE2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFscyBfX1ZVRV9TU1JfQ09OVEVYVF9fICovXG5cbi8vIElNUE9SVEFOVDogRG8gTk9UIHVzZSBFUzIwMTUgZmVhdHVyZXMgaW4gdGhpcyBmaWxlIChleGNlcHQgZm9yIG1vZHVsZXMpLlxuLy8gVGhpcyBtb2R1bGUgaXMgYSBydW50aW1lIHV0aWxpdHkgZm9yIGNsZWFuZXIgY29tcG9uZW50IG1vZHVsZSBvdXRwdXQgYW5kIHdpbGxcbi8vIGJlIGluY2x1ZGVkIGluIHRoZSBmaW5hbCB3ZWJwYWNrIHVzZXIgYnVuZGxlLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub3JtYWxpemVDb21wb25lbnQgKFxuICBzY3JpcHRFeHBvcnRzLFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZnVuY3Rpb25hbFRlbXBsYXRlLFxuICBpbmplY3RTdHlsZXMsXG4gIHNjb3BlSWQsXG4gIG1vZHVsZUlkZW50aWZpZXIsIC8qIHNlcnZlciBvbmx5ICovXG4gIHNoYWRvd01vZGUsIC8qIHZ1ZS1jbGkgb25seSAqL1xuICBjb21wb25lbnRzLCAvLyBmaXhlZCBieSB4eHh4eHggYXV0byBjb21wb25lbnRzXG4gIHJlbmRlcmpzIC8vIGZpeGVkIGJ5IHh4eHh4eCByZW5kZXJqc1xuKSB7XG4gIC8vIFZ1ZS5leHRlbmQgY29uc3RydWN0b3IgZXhwb3J0IGludGVyb3BcbiAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygc2NyaXB0RXhwb3J0cyA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gc2NyaXB0RXhwb3J0cy5vcHRpb25zXG4gICAgOiBzY3JpcHRFeHBvcnRzXG5cbiAgLy8gZml4ZWQgYnkgeHh4eHh4IGF1dG8gY29tcG9uZW50c1xuICBpZiAoY29tcG9uZW50cykge1xuICAgIG9wdGlvbnMuY29tcG9uZW50cyA9IE9iamVjdC5hc3NpZ24oY29tcG9uZW50cywgb3B0aW9ucy5jb21wb25lbnRzIHx8IHt9KVxuICB9XG4gIC8vIGZpeGVkIGJ5IHh4eHh4eCByZW5kZXJqc1xuICBpZiAocmVuZGVyanMpIHtcbiAgICAocmVuZGVyanMuYmVmb3JlQ3JlYXRlIHx8IChyZW5kZXJqcy5iZWZvcmVDcmVhdGUgPSBbXSkpLnVuc2hpZnQoZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzW3JlbmRlcmpzLl9fbW9kdWxlXSA9IHRoaXNcbiAgICB9KTtcbiAgICAob3B0aW9ucy5taXhpbnMgfHwgKG9wdGlvbnMubWl4aW5zID0gW10pKS5wdXNoKHJlbmRlcmpzKVxuICB9XG5cbiAgLy8gcmVuZGVyIGZ1bmN0aW9uc1xuICBpZiAocmVuZGVyKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSByZW5kZXJcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IHN0YXRpY1JlbmRlckZuc1xuICAgIG9wdGlvbnMuX2NvbXBpbGVkID0gdHJ1ZVxuICB9XG5cbiAgLy8gZnVuY3Rpb25hbCB0ZW1wbGF0ZVxuICBpZiAoZnVuY3Rpb25hbFRlbXBsYXRlKSB7XG4gICAgb3B0aW9ucy5mdW5jdGlvbmFsID0gdHJ1ZVxuICB9XG5cbiAgLy8gc2NvcGVkSWRcbiAgaWYgKHNjb3BlSWQpIHtcbiAgICBvcHRpb25zLl9zY29wZUlkID0gJ2RhdGEtdi0nICsgc2NvcGVJZFxuICB9XG5cbiAgdmFyIGhvb2tcbiAgaWYgKG1vZHVsZUlkZW50aWZpZXIpIHsgLy8gc2VydmVyIGJ1aWxkXG4gICAgaG9vayA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAvLyAyLjMgaW5qZWN0aW9uXG4gICAgICBjb250ZXh0ID1cbiAgICAgICAgY29udGV4dCB8fCAvLyBjYWNoZWQgY2FsbFxuICAgICAgICAodGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dCkgfHwgLy8gc3RhdGVmdWxcbiAgICAgICAgKHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LiR2bm9kZSAmJiB0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCkgLy8gZnVuY3Rpb25hbFxuICAgICAgLy8gMi4yIHdpdGggcnVuSW5OZXdDb250ZXh0OiB0cnVlXG4gICAgICBpZiAoIWNvbnRleHQgJiYgdHlwZW9mIF9fVlVFX1NTUl9DT05URVhUX18gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnRleHQgPSBfX1ZVRV9TU1JfQ09OVEVYVF9fXG4gICAgICB9XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHN0eWxlc1xuICAgICAgaWYgKGluamVjdFN0eWxlcykge1xuICAgICAgICBpbmplY3RTdHlsZXMuY2FsbCh0aGlzLCBjb250ZXh0KVxuICAgICAgfVxuICAgICAgLy8gcmVnaXN0ZXIgY29tcG9uZW50IG1vZHVsZSBpZGVudGlmaWVyIGZvciBhc3luYyBjaHVuayBpbmZlcnJlbmNlXG4gICAgICBpZiAoY29udGV4dCAmJiBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cykge1xuICAgICAgICBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cy5hZGQobW9kdWxlSWRlbnRpZmllcilcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdXNlZCBieSBzc3IgaW4gY2FzZSBjb21wb25lbnQgaXMgY2FjaGVkIGFuZCBiZWZvcmVDcmVhdGVcbiAgICAvLyBuZXZlciBnZXRzIGNhbGxlZFxuICAgIG9wdGlvbnMuX3NzclJlZ2lzdGVyID0gaG9va1xuICB9IGVsc2UgaWYgKGluamVjdFN0eWxlcykge1xuICAgIGhvb2sgPSBzaGFkb3dNb2RlXG4gICAgICA/IGZ1bmN0aW9uICgpIHsgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgdGhpcy4kcm9vdC4kb3B0aW9ucy5zaGFkb3dSb290KSB9XG4gICAgICA6IGluamVjdFN0eWxlc1xuICB9XG5cbiAgaWYgKGhvb2spIHtcbiAgICBpZiAob3B0aW9ucy5mdW5jdGlvbmFsKSB7XG4gICAgICAvLyBmb3IgdGVtcGxhdGUtb25seSBob3QtcmVsb2FkIGJlY2F1c2UgaW4gdGhhdCBjYXNlIHRoZSByZW5kZXIgZm4gZG9lc24ndFxuICAgICAgLy8gZ28gdGhyb3VnaCB0aGUgbm9ybWFsaXplclxuICAgICAgb3B0aW9ucy5faW5qZWN0U3R5bGVzID0gaG9va1xuICAgICAgLy8gcmVnaXN0ZXIgZm9yIGZ1bmN0aW9hbCBjb21wb25lbnQgaW4gdnVlIGZpbGVcbiAgICAgIHZhciBvcmlnaW5hbFJlbmRlciA9IG9wdGlvbnMucmVuZGVyXG4gICAgICBvcHRpb25zLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcldpdGhTdHlsZUluamVjdGlvbiAoaCwgY29udGV4dCkge1xuICAgICAgICBob29rLmNhbGwoY29udGV4dClcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsUmVuZGVyKGgsIGNvbnRleHQpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGluamVjdCBjb21wb25lbnQgcmVnaXN0cmF0aW9uIGFzIGJlZm9yZUNyZWF0ZSBob29rXG4gICAgICB2YXIgZXhpc3RpbmcgPSBvcHRpb25zLmJlZm9yZUNyZWF0ZVxuICAgICAgb3B0aW9ucy5iZWZvcmVDcmVhdGUgPSBleGlzdGluZ1xuICAgICAgICA/IFtdLmNvbmNhdChleGlzdGluZywgaG9vaylcbiAgICAgICAgOiBbaG9va11cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGV4cG9ydHM6IHNjcmlwdEV4cG9ydHMsXG4gICAgb3B0aW9uczogb3B0aW9uc1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///16\n");

/***/ }),

/***/ 2:
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNENBQTRDOztBQUU1QyIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ }),

/***/ 3:
/*!******************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/mp-vue/dist/mp.runtime.esm.js ***!
  \******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global) {/*!\n * Vue.js v2.6.11\n * (c) 2014-2020 Evan You\n * Released under the MIT License.\n */\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n// These helpers produce better VM code in JS engines due to their\n// explicitness and function inlining.\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n\n/**\n * Check if value is primitive.\n */\nfunction isPrimitive (value) {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    // $flow-disable-line\n    typeof value === 'symbol' ||\n    typeof value === 'boolean'\n  )\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * Get the raw type string of a value, e.g., [object Object].\n */\nvar _toString = Object.prototype.toString;\n\nfunction toRawType (value) {\n  return _toString.call(value).slice(8, -1)\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Check if val is a valid array index.\n */\nfunction isValidArrayIndex (val) {\n  var n = parseFloat(String(val));\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\n}\n\nfunction isPromise (val) {\n  return (\n    isDef(val) &&\n    typeof val.then === 'function' &&\n    typeof val.catch === 'function'\n  )\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert an input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Check if an attribute is a reserved attribute.\n */\nvar isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n\n/**\n * Remove an item from an array.\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether an object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n});\n\n/**\n * Simple bind polyfill for environments that do not support it,\n * e.g., PhantomJS 1.x. Technically, we don't need this anymore\n * since native bind is now performant enough in most browsers.\n * But removing it would mean breaking code that was able to run in\n * PhantomJS 1.x, so this must be kept for backward compatibility.\n */\n\n/* istanbul ignore next */\nfunction polyfillBind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n\n  boundFn._length = fn.length;\n  return boundFn\n}\n\nfunction nativeBind (fn, ctx) {\n  return fn.bind(ctx)\n}\n\nvar bind = Function.prototype.bind\n  ? nativeBind\n  : polyfillBind;\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/* eslint-disable no-unused-vars */\n\n/**\n * Perform no operation.\n * Stubbing args to make Flow happy without leaving useless transpiled code\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).\n */\nfunction noop (a, b, c) {}\n\n/**\n * Always return false.\n */\nvar no = function (a, b, c) { return false; };\n\n/* eslint-enable no-unused-vars */\n\n/**\n * Return the same value.\n */\nvar identity = function (_) { return _; };\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  if (a === b) { return true }\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = Array.isArray(a);\n      var isArrayB = Array.isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i])\n        })\n      } else if (a instanceof Date && b instanceof Date) {\n        return a.getTime() === b.getTime()\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\n/**\n * Return the first index at which a loosely equal value can be\n * found in the array (if value is a plain object, the array must\n * contain an object of the same shape), or -1 if it is not present.\n */\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated',\n  'errorCaptured',\n  'serverPrefetch'\n];\n\n/*  */\n\n\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  // $flow-disable-line\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: \"development\" !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: \"development\" !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Warn handler for watcher warns\n   */\n  warnHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  // $flow-disable-line\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Perform updates asynchronously. Intended to be used by Vue Test Utils\n   * This will significantly reduce performance if set to false.\n   */\n  async: true,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n});\n\n/*  */\n\n/**\n * unicode letters used for parsing html tags, component names and property paths.\n * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname\n * skipping \\u10000-\\uEFFFF due to it freezing up PhantomJS\n */\nvar unicodeRegExp = /a-zA-Z\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD/;\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = new RegExp((\"[^\" + (unicodeRegExp.source) + \".$_\\\\d]\"));\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;\nvar weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');\nvar isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\nvar isPhantomJS = UA && /phantomjs/.test(UA);\nvar isFF = UA && UA.match(/firefox\\/(\\d+)/);\n\n// Firefox has a \"watch\" function on Object.prototype...\nvar nativeWatch = ({}).watch;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n      }\n    })); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && !inWeex && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\nvar _Set;\n/* istanbul ignore if */ // $flow-disable-line\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = /*@__PURE__*/(function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar generateComponentTrace = (noop); // work around flow check\nvar formatComponentName = (noop);\n\nif (true) {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    var trace = vm ? generateComponentTrace(vm) : '';\n\n    if (config.warnHandler) {\n      config.warnHandler.call(null, msg, vm, trace);\n    } else if (hasConsole && (!config.silent)) {\n      console.error((\"[Vue warn]: \" + msg + trace));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    {\n      if(vm.$scope && vm.$scope.is){\n        return vm.$scope.is\n      }\n    }\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var options = typeof vm === 'function' && vm.cid != null\n      ? vm.options\n      : vm._isVue\n        ? vm.$options || vm.constructor.options\n        : vm;\n    var name = options.name || options._componentTag;\n    var file = options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  // fixed by xxxxxx (nvue vuex)\n  /* eslint-disable no-undef */\n  if(typeof SharedObject !== 'undefined'){\n    this.id = SharedObject.uid++;\n  } else {\n    this.id = uid++;\n  }\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.SharedObject.target) {\n    Dep.SharedObject.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  if ( true && !config.async) {\n    // subs aren't sorted in scheduler if not running async\n    // we need to sort them now to make sure they fire in correct\n    // order\n    subs.sort(function (a, b) { return a.id - b.id; });\n  }\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// The current target watcher being evaluated.\n// This is globally unique because only one watcher\n// can be evaluated at a time.\n// fixed by xxxxxx (nvue shared vuex)\n/* eslint-disable no-undef */\nDep.SharedObject = typeof SharedObject !== 'undefined' ? SharedObject : {};\nDep.SharedObject.target = null;\nDep.SharedObject.targetStack = [];\n\nfunction pushTarget (target) {\n  Dep.SharedObject.targetStack.push(target);\n  Dep.SharedObject.target = target;\n}\n\nfunction popTarget () {\n  Dep.SharedObject.targetStack.pop();\n  Dep.SharedObject.target = Dep.SharedObject.targetStack[Dep.SharedObject.targetStack.length - 1];\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions,\n  asyncFactory\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.fnContext = undefined;\n  this.fnOptions = undefined;\n  this.fnScopeId = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n  this.asyncFactory = asyncFactory;\n  this.asyncMeta = undefined;\n  this.isAsyncPlaceholder = false;\n};\n\nvar prototypeAccessors = { child: { configurable: true } };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function (text) {\n  if ( text === void 0 ) text = '';\n\n  var node = new VNode();\n  node.text = text;\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    // #7975\n    // clone children array to avoid mutating original in case of cloning\n    // a child.\n    vnode.children && vnode.children.slice(),\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions,\n    vnode.asyncFactory\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.fnContext = vnode.fnContext;\n  cloned.fnOptions = vnode.fnOptions;\n  cloned.fnScopeId = vnode.fnScopeId;\n  cloned.asyncMeta = vnode.asyncMeta;\n  cloned.isCloned = true;\n  return cloned\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);\n\nvar methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n];\n\n/**\n * Intercept mutating methods and emit events\n */\nmethodsToPatch.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * In some cases we may want to disable observation inside a component's\n * update computation.\n */\nvar shouldObserve = true;\n\nfunction toggleObserving (value) {\n  shouldObserve = value;\n}\n\n/**\n * Observer class that is attached to each observed\n * object. Once attached, the observer converts the target\n * object's property keys into getter/setters that\n * collect dependencies and dispatch updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    if (hasProto) {\n      {// fixed by xxxxxx 微信小程序使用 plugins 之后，数组方法被直接挂载到了数组对象上，需要执行 copyAugment 逻辑\n        if(value.push !== value.__proto__.push){\n          copyAugment(value, arrayMethods, arrayKeys);\n        } else {\n          protoAugment(value, arrayMethods);\n        }\n      }\n    } else {\n      copyAugment(value, arrayMethods, arrayKeys);\n    }\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through all properties and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive$$1(obj, keys[i]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment a target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment a target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive$$1 (\n  obj,\n  key,\n  val,\n  customSetter,\n  shallow\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n  if ((!getter || setter) && arguments.length === 2) {\n    val = obj[key];\n  }\n\n  var childOb = !shallow && observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.SharedObject.target) { // fixed by xxxxxx\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if ( true && customSetter) {\n        customSetter();\n      }\n      // #7981: for accessor properties without setter\n      if (getter && !setter) { return }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot set reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (key in target && !(key in Object.prototype)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive$$1(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot delete reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (true) {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n\n  var keys = hasSymbol\n    ? Reflect.ownKeys(from)\n    : Object.keys(from);\n\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    // in case the object is already observed...\n    if (key === '__ob__') { continue }\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (\n      toVal !== fromVal &&\n      isPlainObject(toVal) &&\n      isPlainObject(fromVal)\n    ) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nfunction mergeDataOrFn (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        typeof childVal === 'function' ? childVal.call(this, this) : childVal,\n        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal\n      )\n    }\n  } else {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm, vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm, vm)\n        : parentVal;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n}\n\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    if (childVal && typeof childVal !== 'function') {\n       true && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n\n  return mergeDataOrFn(parentVal, childVal, vm)\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  var res = childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal;\n  return res\n    ? dedupeHooks(res)\n    : res\n}\n\nfunction dedupeHooks (hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  var res = Object.create(parentVal || null);\n  if (childVal) {\n     true && assertObjectType(key, childVal, vm);\n    return extend(res, childVal)\n  } else {\n    return res\n  }\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (true) {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key$1 in childVal) {\n    var parent = ret[key$1];\n    var child = childVal[key$1];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key$1] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  if (childVal && \"development\" !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  if (childVal) { extend(ret, childVal); }\n  return ret\n};\nstrats.provide = mergeDataOrFn;\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    validateComponentName(key);\n  }\n}\n\nfunction validateComponentName (name) {\n  if (!new RegExp((\"^[a-zA-Z][\\\\-\\\\.0-9_\" + (unicodeRegExp.source) + \"]*$\")).test(name)) {\n    warn(\n      'Invalid component name: \"' + name + '\". Component names ' +\n      'should conform to valid custom element name in html5 specification.'\n    );\n  }\n  if (isBuiltInTag(name) || config.isReservedTag(name)) {\n    warn(\n      'Do not use built-in or reserved HTML elements as component ' +\n      'id: ' + name\n    );\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options, vm) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (true) {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"props\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(props)) + \".\",\n      vm\n    );\n  }\n  options.props = res;\n}\n\n/**\n * Normalize all injections into Object-based format\n */\nfunction normalizeInject (options, vm) {\n  var inject = options.inject;\n  if (!inject) { return }\n  var normalized = options.inject = {};\n  if (Array.isArray(inject)) {\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = { from: inject[i] };\n    }\n  } else if (isPlainObject(inject)) {\n    for (var key in inject) {\n      var val = inject[key];\n      normalized[key] = isPlainObject(val)\n        ? extend({ from: key }, val)\n        : { from: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(inject)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def$$1 = dirs[key];\n      if (typeof def$$1 === 'function') {\n        dirs[key] = { bind: def$$1, update: def$$1 };\n      }\n    }\n  }\n}\n\nfunction assertObjectType (name, value, vm) {\n  if (!isPlainObject(value)) {\n    warn(\n      \"Invalid value for option \\\"\" + name + \"\\\": expected an Object, \" +\n      \"but got \" + (toRawType(value)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (true) {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child, vm);\n  normalizeInject(child, vm);\n  normalizeDirectives(child);\n\n  // Apply extends and mixins on the child options,\n  // but only if it is a raw options object that isn't\n  // the result of another mergeOptions call.\n  // Only merged options has the _base property.\n  if (!child._base) {\n    if (child.extends) {\n      parent = mergeOptions(parent, child.extends, vm);\n    }\n    if (child.mixins) {\n      for (var i = 0, l = child.mixins.length; i < l; i++) {\n        parent = mergeOptions(parent, child.mixins[i], vm);\n      }\n    }\n  }\n\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if ( true && warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\n\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // boolean casting\n  var booleanIndex = getTypeIndex(Boolean, prop.type);\n  if (booleanIndex > -1) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (value === '' || value === hyphenate(key)) {\n      // only cast empty string / same name to boolean if\n      // boolean has higher priority\n      var stringIndex = getTypeIndex(String, prop.type);\n      if (stringIndex < 0 || booleanIndex < stringIndex) {\n        value = true;\n      }\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldObserve = shouldObserve;\n    toggleObserving(true);\n    observe(value);\n    toggleObserving(prevShouldObserve);\n  }\n  if (\n    true\n  ) {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if ( true && isObject(def)) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n\n  if (!valid) {\n    warn(\n      getInvalidTypeMessage(name, value, expectedTypes),\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    var t = typeof value;\n    valid = t === expectedType.toLowerCase();\n    // for primitive wrapper objects\n    if (!valid && t === 'object') {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isSameType (a, b) {\n  return getType(a) === getType(b)\n}\n\nfunction getTypeIndex (type, expectedTypes) {\n  if (!Array.isArray(expectedTypes)) {\n    return isSameType(expectedTypes, type) ? 0 : -1\n  }\n  for (var i = 0, len = expectedTypes.length; i < len; i++) {\n    if (isSameType(expectedTypes[i], type)) {\n      return i\n    }\n  }\n  return -1\n}\n\nfunction getInvalidTypeMessage (name, value, expectedTypes) {\n  var message = \"Invalid prop: type check failed for prop \\\"\" + name + \"\\\".\" +\n    \" Expected \" + (expectedTypes.map(capitalize).join(', '));\n  var expectedType = expectedTypes[0];\n  var receivedType = toRawType(value);\n  var expectedValue = styleValue(value, expectedType);\n  var receivedValue = styleValue(value, receivedType);\n  // check if we need to specify expected value\n  if (expectedTypes.length === 1 &&\n      isExplicable(expectedType) &&\n      !isBoolean(expectedType, receivedType)) {\n    message += \" with value \" + expectedValue;\n  }\n  message += \", got \" + receivedType + \" \";\n  // check if we need to specify received value\n  if (isExplicable(receivedType)) {\n    message += \"with value \" + receivedValue + \".\";\n  }\n  return message\n}\n\nfunction styleValue (value, type) {\n  if (type === 'String') {\n    return (\"\\\"\" + value + \"\\\"\")\n  } else if (type === 'Number') {\n    return (\"\" + (Number(value)))\n  } else {\n    return (\"\" + value)\n  }\n}\n\nfunction isExplicable (value) {\n  var explicitTypes = ['string', 'number', 'boolean'];\n  return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })\n}\n\nfunction isBoolean () {\n  var args = [], len = arguments.length;\n  while ( len-- ) args[ len ] = arguments[ len ];\n\n  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.\n  // See: https://github.com/vuejs/vuex/issues/1505\n  pushTarget();\n  try {\n    if (vm) {\n      var cur = vm;\n      while ((cur = cur.$parent)) {\n        var hooks = cur.$options.errorCaptured;\n        if (hooks) {\n          for (var i = 0; i < hooks.length; i++) {\n            try {\n              var capture = hooks[i].call(cur, err, vm, info) === false;\n              if (capture) { return }\n            } catch (e) {\n              globalHandleError(e, cur, 'errorCaptured hook');\n            }\n          }\n        }\n      }\n    }\n    globalHandleError(err, vm, info);\n  } finally {\n    popTarget();\n  }\n}\n\nfunction invokeWithErrorHandling (\n  handler,\n  context,\n  args,\n  vm,\n  info\n) {\n  var res;\n  try {\n    res = args ? handler.apply(context, args) : handler.call(context);\n    if (res && !res._isVue && isPromise(res) && !res._handled) {\n      res.catch(function (e) { return handleError(e, vm, info + \" (Promise/async)\"); });\n      // issue #9511\n      // avoid catch triggering multiple times when nested calls\n      res._handled = true;\n    }\n  } catch (e) {\n    handleError(e, vm, info);\n  }\n  return res\n}\n\nfunction globalHandleError (err, vm, info) {\n  if (config.errorHandler) {\n    try {\n      return config.errorHandler.call(null, err, vm, info)\n    } catch (e) {\n      // if the user intentionally throws the original error in the handler,\n      // do not log it twice\n      if (e !== err) {\n        logError(e, null, 'config.errorHandler');\n      }\n    }\n  }\n  logError(err, vm, info);\n}\n\nfunction logError (err, vm, info) {\n  if (true) {\n    warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n  }\n  /* istanbul ignore else */\n  if ((inBrowser || inWeex) && typeof console !== 'undefined') {\n    console.error(err);\n  } else {\n    throw err\n  }\n}\n\n/*  */\n\nvar callbacks = [];\nvar pending = false;\n\nfunction flushCallbacks () {\n  pending = false;\n  var copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (var i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\n// Here we have async deferring wrappers using microtasks.\n// In 2.5 we used (macro) tasks (in combination with microtasks).\n// However, it has subtle problems when state is changed right before repaint\n// (e.g. #6813, out-in transitions).\n// Also, using (macro) tasks in event handler would cause some weird behaviors\n// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).\n// So we now use microtasks everywhere, again.\n// A major drawback of this tradeoff is that there are some scenarios\n// where microtasks have too high a priority and fire in between supposedly\n// sequential events (e.g. #4521, #6690, which have workarounds)\n// or even between bubbling of the same event (#6566).\nvar timerFunc;\n\n// The nextTick behavior leverages the microtask queue, which can be accessed\n// via either native Promise.then or MutationObserver.\n// MutationObserver has wider support, however it is seriously bugged in\n// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n// completely stops working after triggering a few times... so, if native\n// Promise is available, we will use it:\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  var p = Promise.resolve();\n  timerFunc = function () {\n    p.then(flushCallbacks);\n    // In problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) { setTimeout(noop); }\n  };\n} else if (!isIE && typeof MutationObserver !== 'undefined' && (\n  isNative(MutationObserver) ||\n  // PhantomJS and iOS 7.x\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  // Use MutationObserver where native Promise is not available,\n  // e.g. PhantomJS, iOS7, Android 4.4\n  // (#6466 MutationObserver is unreliable in IE11)\n  var counter = 1;\n  var observer = new MutationObserver(flushCallbacks);\n  var textNode = document.createTextNode(String(counter));\n  observer.observe(textNode, {\n    characterData: true\n  });\n  timerFunc = function () {\n    counter = (counter + 1) % 2;\n    textNode.data = String(counter);\n  };\n} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  // Fallback to setImmediate.\n  // Technically it leverages the (macro) task queue,\n  // but it is still a better choice than setTimeout.\n  timerFunc = function () {\n    setImmediate(flushCallbacks);\n  };\n} else {\n  // Fallback to setTimeout.\n  timerFunc = function () {\n    setTimeout(flushCallbacks, 0);\n  };\n}\n\nfunction nextTick (cb, ctx) {\n  var _resolve;\n  callbacks.push(function () {\n    if (cb) {\n      try {\n        cb.call(ctx);\n      } catch (e) {\n        handleError(e, ctx, 'nextTick');\n      }\n    } else if (_resolve) {\n      _resolve(ctx);\n    }\n  });\n  if (!pending) {\n    pending = true;\n    timerFunc();\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve) {\n      _resolve = resolve;\n    })\n  }\n}\n\n/*  */\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (true) {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      'referenced during render. Make sure that this property is reactive, ' +\n      'either in the data option, or for class-based components, by ' +\n      'initializing the property. ' +\n      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',\n      target\n    );\n  };\n\n  var warnReservedPrefix = function (target, key) {\n    warn(\n      \"Property \\\"\" + key + \"\\\" must be accessed with \\\"$data.\" + key + \"\\\" because \" +\n      'properties starting with \"$\" or \"_\" are not proxied in the Vue instance to ' +\n      'prevent conflicts with Vue internals. ' +\n      'See: https://vuejs.org/v2/api/#data',\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' && isNative(Proxy);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) ||\n        (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));\n      if (!has && !isAllowed) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar seenObjects = new _Set();\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nfunction traverse (val) {\n  _traverse(val, seenObjects);\n  seenObjects.clear();\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\nvar mark;\nvar measure;\n\nif (true) {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      // perf.clearMeasures(name)\n    };\n  }\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns, vm) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      var cloned = fns.slice();\n      for (var i = 0; i < cloned.length; i++) {\n        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, \"v-on handler\");\n      }\n    } else {\n      // return handler return value for single handlers\n      return invokeWithErrorHandling(fns, null, arguments, vm, \"v-on handler\")\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  createOnceHandler,\n  vm\n) {\n  var name, def$$1, cur, old, event;\n  for (name in on) {\n    def$$1 = cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    if (isUndef(cur)) {\n       true && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur, vm);\n      }\n      if (isTrue(event.once)) {\n        cur = on[name] = createOnceHandler(event.name, cur, event.capture);\n      }\n      add(event.name, cur, event.capture, event.passive, event.params);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\n// fixed by xxxxxx (mp properties)\r\nfunction extractPropertiesFromVNodeData(data, Ctor, res, context) {\r\n  var propOptions = Ctor.options.mpOptions && Ctor.options.mpOptions.properties;\r\n  if (isUndef(propOptions)) {\r\n    return res\r\n  }\n  var externalClasses = Ctor.options.mpOptions.externalClasses || [];\r\n  var attrs = data.attrs;\n  var props = data.props;\r\n  if (isDef(attrs) || isDef(props)) {\r\n    for (var key in propOptions) {\r\n      var altKey = hyphenate(key);\n      var result = checkProp(res, props, key, altKey, true) ||\n          checkProp(res, attrs, key, altKey, false);\n      // externalClass\n      if (\n        result &&\n        res[key] &&\n        externalClasses.indexOf(altKey) !== -1 &&\n        context[camelize(res[key])]\n      ) {\n        // 赋值 externalClass 真正的值(模板里 externalClass 的值可能是字符串)\n        res[key] = context[camelize(res[key])];\n      }\r\n    }\r\n  }\r\n  return res\r\n}\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag,\n  context// fixed by xxxxxx\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    // fixed by xxxxxx\n    return extractPropertiesFromVNodeData(data, Ctor, {}, context)\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (true) {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  // fixed by xxxxxx\n  return extractPropertiesFromVNodeData(data, Ctor, res, context)\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, lastIndex, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    lastIndex = res.length - 1;\n    last = res[lastIndex];\n    //  nested\n    if (Array.isArray(c)) {\n      if (c.length > 0) {\n        c = normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i));\n        // merge adjacent text nodes\n        if (isTextNode(c[0]) && isTextNode(last)) {\n          res[lastIndex] = createTextVNode(last.text + (c[0]).text);\n          c.shift();\n        }\n        res.push.apply(res, c);\n      }\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        res[lastIndex] = createTextVNode(last.text + c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[lastIndex] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    toggleObserving(false);\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (true) {\n        defineReactive$$1(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {}\n    });\n    toggleObserving(true);\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    var result = Object.create(null);\n    var keys = hasSymbol\n      ? Reflect.ownKeys(inject)\n      : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      // #6574 in case the inject object is observed...\n      if (key === '__ob__') { continue }\n      var provideKey = inject[key].from;\n      var source = vm;\n      while (source) {\n        if (source._provided && hasOwn(source._provided, provideKey)) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n      if (!source) {\n        if ('default' in inject[key]) {\n          var provideDefault = inject[key].default;\n          result[key] = typeof provideDefault === 'function'\n            ? provideDefault.call(vm)\n            : provideDefault;\n        } else if (true) {\n          warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\n        }\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\n\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  if (!children || !children.length) {\n    return {}\n  }\n  var slots = {};\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    var data = child.data;\n    // remove slot attribute if the node is resolved as a Vue slot node\n    if (data && data.attrs && data.attrs.slot) {\n      delete data.attrs.slot;\n    }\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.fnContext === context) &&\n      data && data.slot != null\n    ) {\n      var name = data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children || []);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      // fixed by xxxxxx 临时 hack 掉 uni-app 中的异步 name slot page\n      if(child.asyncMeta && child.asyncMeta.data && child.asyncMeta.data.slot === 'page'){\n        (slots['page'] || (slots['page'] = [])).push(child);\n      }else{\n        (slots.default || (slots.default = [])).push(child);\n      }\n    }\n  }\n  // ignore slots that contains only whitespace\n  for (var name$1 in slots) {\n    if (slots[name$1].every(isWhitespace)) {\n      delete slots[name$1];\n    }\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return (node.isComment && !node.asyncFactory) || node.text === ' '\n}\n\n/*  */\n\nfunction normalizeScopedSlots (\n  slots,\n  normalSlots,\n  prevSlots\n) {\n  var res;\n  var hasNormalSlots = Object.keys(normalSlots).length > 0;\n  var isStable = slots ? !!slots.$stable : !hasNormalSlots;\n  var key = slots && slots.$key;\n  if (!slots) {\n    res = {};\n  } else if (slots._normalized) {\n    // fast path 1: child component re-render only, parent did not change\n    return slots._normalized\n  } else if (\n    isStable &&\n    prevSlots &&\n    prevSlots !== emptyObject &&\n    key === prevSlots.$key &&\n    !hasNormalSlots &&\n    !prevSlots.$hasNormal\n  ) {\n    // fast path 2: stable scoped slots w/ no normal slots to proxy,\n    // only need to normalize once\n    return prevSlots\n  } else {\n    res = {};\n    for (var key$1 in slots) {\n      if (slots[key$1] && key$1[0] !== '$') {\n        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);\n      }\n    }\n  }\n  // expose normal slots on scopedSlots\n  for (var key$2 in normalSlots) {\n    if (!(key$2 in res)) {\n      res[key$2] = proxyNormalSlot(normalSlots, key$2);\n    }\n  }\n  // avoriaz seems to mock a non-extensible $scopedSlots object\n  // and when that is passed down this would cause an error\n  if (slots && Object.isExtensible(slots)) {\n    (slots)._normalized = res;\n  }\n  def(res, '$stable', isStable);\n  def(res, '$key', key);\n  def(res, '$hasNormal', hasNormalSlots);\n  return res\n}\n\nfunction normalizeScopedSlot(normalSlots, key, fn) {\n  var normalized = function () {\n    var res = arguments.length ? fn.apply(null, arguments) : fn({});\n    res = res && typeof res === 'object' && !Array.isArray(res)\n      ? [res] // single vnode\n      : normalizeChildren(res);\n    return res && (\n      res.length === 0 ||\n      (res.length === 1 && res[0].isComment) // #9658\n    ) ? undefined\n      : res\n  };\n  // this is a slot using the new v-slot syntax without scope. although it is\n  // compiled as a scoped slot, render fn users would expect it to be present\n  // on this.$slots because the usage is semantically a normal slot.\n  if (fn.proxy) {\n    Object.defineProperty(normalSlots, key, {\n      get: normalized,\n      enumerable: true,\n      configurable: true\n    });\n  }\n  return normalized\n}\n\nfunction proxyNormalSlot(slots, key) {\n  return function () { return slots[key]; }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i, i, i); // fixed by xxxxxx\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i, i, i); // fixed by xxxxxx\n    }\n  } else if (isObject(val)) {\n    if (hasSymbol && val[Symbol.iterator]) {\n      ret = [];\n      var iterator = val[Symbol.iterator]();\n      var result = iterator.next();\n      while (!result.done) {\n        ret.push(render(result.value, ret.length, i++, i)); // fixed by xxxxxx\n        result = iterator.next();\n      }\n    } else {\n      keys = Object.keys(val);\n      ret = new Array(keys.length);\n      for (i = 0, l = keys.length; i < l; i++) {\n        key = keys[i];\n        ret[i] = render(val[key], key, i, i); // fixed by xxxxxx\n      }\n    }\n  }\n  if (!isDef(ret)) {\n    ret = [];\n  }\n  (ret)._isVList = true;\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  var nodes;\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      if ( true && !isObject(bindObject)) {\n        warn(\n          'slot v-bind without argument expects an Object',\n          this\n        );\n      }\n      props = extend(extend({}, bindObject), props);\n    }\n    // fixed by xxxxxx app-plus scopedSlot\n    nodes = scopedSlotFn(props, this, props._i) || fallback;\n  } else {\n    nodes = this.$slots[name] || fallback;\n  }\n\n  var target = props && props.slot;\n  if (target) {\n    return this.$createElement('template', { slot: target }, nodes)\n  } else {\n    return nodes\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\nfunction isKeyNotMatch (expect, actual) {\n  if (Array.isArray(expect)) {\n    return expect.indexOf(actual) === -1\n  } else {\n    return expect !== actual\n  }\n}\n\n/**\n * Runtime helper for checking keyCodes from config.\n * exposed as Vue.prototype._k\n * passing in eventKeyName as last argument separately for backwards compat\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInKeyCode,\n  eventKeyName,\n  builtInKeyName\n) {\n  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;\n  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {\n    return isKeyNotMatch(builtInKeyName, eventKeyName)\n  } else if (mappedKeyCode) {\n    return isKeyNotMatch(mappedKeyCode, eventKeyCode)\n  } else if (eventKeyName) {\n    return hyphenate(eventKeyName) !== key\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp,\n  isSync\n) {\n  if (value) {\n    if (!isObject(value)) {\n       true && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      var loop = function ( key ) {\n        if (\n          key === 'class' ||\n          key === 'style' ||\n          isReservedAttribute(key)\n        ) {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        var camelizedKey = camelize(key);\n        var hyphenatedKey = hyphenate(key);\n        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {\n          hash[key] = value[key];\n\n          if (isSync) {\n            var on = data.on || (data.on = {});\n            on[(\"update:\" + key)] = function ($event) {\n              value[key] = $event;\n            };\n          }\n        }\n      };\n\n      for (var key in value) loop( key );\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var cached = this._staticTrees || (this._staticTrees = []);\n  var tree = cached[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree.\n  if (tree && !isInFor) {\n    return tree\n  }\n  // otherwise, render a fresh tree.\n  tree = cached[index] = this.$options.staticRenderFns[index].call(\n    this._renderProxy,\n    null,\n    this // for render fns generated for functional component templates\n  );\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction bindObjectListeners (data, value) {\n  if (value) {\n    if (!isPlainObject(value)) {\n       true && warn(\n        'v-on without argument expects an Object value',\n        this\n      );\n    } else {\n      var on = data.on = data.on ? extend({}, data.on) : {};\n      for (var key in value) {\n        var existing = on[key];\n        var ours = value[key];\n        on[key] = existing ? [].concat(existing, ours) : ours;\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res,\n  // the following are added in 2.6\n  hasDynamicKeys,\n  contentHashKey\n) {\n  res = res || { $stable: !hasDynamicKeys };\n  for (var i = 0; i < fns.length; i++) {\n    var slot = fns[i];\n    if (Array.isArray(slot)) {\n      resolveScopedSlots(slot, res, hasDynamicKeys);\n    } else if (slot) {\n      // marker for reverse proxying v-slot without scope on this.$slots\n      if (slot.proxy) {\n        slot.fn.proxy = true;\n      }\n      res[slot.key] = slot.fn;\n    }\n  }\n  if (contentHashKey) {\n    (res).$key = contentHashKey;\n  }\n  return res\n}\n\n/*  */\n\nfunction bindDynamicKeys (baseObj, values) {\n  for (var i = 0; i < values.length; i += 2) {\n    var key = values[i];\n    if (typeof key === 'string' && key) {\n      baseObj[values[i]] = values[i + 1];\n    } else if ( true && key !== '' && key !== null) {\n      // null is a special value for explicitly removing a binding\n      warn(\n        (\"Invalid value for dynamic directive argument (expected string or null): \" + key),\n        this\n      );\n    }\n  }\n  return baseObj\n}\n\n// helper to dynamically append modifier runtime markers to event names.\n// ensure only append when value is already string, otherwise it will be cast\n// to string and cause the type check to miss.\nfunction prependModifier (value, symbol) {\n  return typeof value === 'string' ? symbol + value : value\n}\n\n/*  */\n\nfunction installRenderHelpers (target) {\n  target._o = markOnce;\n  target._n = toNumber;\n  target._s = toString;\n  target._l = renderList;\n  target._t = renderSlot;\n  target._q = looseEqual;\n  target._i = looseIndexOf;\n  target._m = renderStatic;\n  target._f = resolveFilter;\n  target._k = checkKeyCodes;\n  target._b = bindObjectProps;\n  target._v = createTextVNode;\n  target._e = createEmptyVNode;\n  target._u = resolveScopedSlots;\n  target._g = bindObjectListeners;\n  target._d = bindDynamicKeys;\n  target._p = prependModifier;\n}\n\n/*  */\n\nfunction FunctionalRenderContext (\n  data,\n  props,\n  children,\n  parent,\n  Ctor\n) {\n  var this$1 = this;\n\n  var options = Ctor.options;\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var contextVm;\n  if (hasOwn(parent, '_uid')) {\n    contextVm = Object.create(parent);\n    // $flow-disable-line\n    contextVm._original = parent;\n  } else {\n    // the context vm passed in is a functional context as well.\n    // in this case we want to make sure we are able to get a hold to the\n    // real context instance.\n    contextVm = parent;\n    // $flow-disable-line\n    parent = parent._original;\n  }\n  var isCompiled = isTrue(options._compiled);\n  var needNormalization = !isCompiled;\n\n  this.data = data;\n  this.props = props;\n  this.children = children;\n  this.parent = parent;\n  this.listeners = data.on || emptyObject;\n  this.injections = resolveInject(options.inject, parent);\n  this.slots = function () {\n    if (!this$1.$slots) {\n      normalizeScopedSlots(\n        data.scopedSlots,\n        this$1.$slots = resolveSlots(children, parent)\n      );\n    }\n    return this$1.$slots\n  };\n\n  Object.defineProperty(this, 'scopedSlots', ({\n    enumerable: true,\n    get: function get () {\n      return normalizeScopedSlots(data.scopedSlots, this.slots())\n    }\n  }));\n\n  // support for compiled functional template\n  if (isCompiled) {\n    // exposing $options for renderStatic()\n    this.$options = options;\n    // pre-resolve slots for renderSlot()\n    this.$slots = this.slots();\n    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);\n  }\n\n  if (options._scopeId) {\n    this._c = function (a, b, c, d) {\n      var vnode = createElement(contextVm, a, b, c, d, needNormalization);\n      if (vnode && !Array.isArray(vnode)) {\n        vnode.fnScopeId = options._scopeId;\n        vnode.fnContext = parent;\n      }\n      return vnode\n    };\n  } else {\n    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };\n  }\n}\n\ninstallRenderHelpers(FunctionalRenderContext.prototype);\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  contextVm,\n  children\n) {\n  var options = Ctor.options;\n  var props = {};\n  var propOptions = options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || emptyObject);\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n\n  var renderContext = new FunctionalRenderContext(\n    data,\n    props,\n    children,\n    contextVm,\n    Ctor\n  );\n\n  var vnode = options.render.call(null, renderContext._c, renderContext);\n\n  if (vnode instanceof VNode) {\n    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)\n  } else if (Array.isArray(vnode)) {\n    var vnodes = normalizeChildren(vnode) || [];\n    var res = new Array(vnodes.length);\n    for (var i = 0; i < vnodes.length; i++) {\n      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);\n    }\n    return res\n  }\n}\n\nfunction cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {\n  // #7817 clone node before setting fnContext, otherwise if the node is reused\n  // (e.g. it was from a cached normal slot) the fnContext causes named slots\n  // that should not be matched to match.\n  var clone = cloneVNode(vnode);\n  clone.fnContext = contextVm;\n  clone.fnOptions = options;\n  if (true) {\n    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;\n  }\n  if (data.slot) {\n    (clone.data || (clone.data = {})).slot = data.slot;\n  }\n  return clone\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n/*  */\n\n/*  */\n\n/*  */\n\n// inline hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (vnode, hydrating) {\n    if (\n      vnode.componentInstance &&\n      !vnode.componentInstance._isDestroyed &&\n      vnode.data.keepAlive\n    ) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    } else {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      callHook(componentInstance, 'onServiceCreated');\n      callHook(componentInstance, 'onServiceAttached');\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (true) {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  var asyncFactory;\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor;\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);\n    if (Ctor === undefined) {\n      // return a placeholder node for async component, which is rendered\n      // as a comment node but preserves all the raw information for the node.\n      // the information will be used for async server-rendering and hydration.\n      return createAsyncPlaceholder(\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n\n  data = data || {};\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag, context); // fixed by xxxxxx\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  // so it gets processed during parent component patch.\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners & slot\n\n    // work around flow\n    var slot = data.slot;\n    data = {};\n    if (slot) {\n      data.slot = slot;\n    }\n  }\n\n  // install component management hooks onto the placeholder node\n  installComponentHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n    asyncFactory\n  );\n\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent // activeInstance in lifecycle state\n) {\n  var options = {\n    _isComponent: true,\n    _parentVnode: vnode,\n    parent: parent\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnode.componentOptions.Ctor(options)\n}\n\nfunction installComponentHooks (data) {\n  var hooks = data.hook || (data.hook = {});\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var existing = hooks[key];\n    var toMerge = componentVNodeHooks[key];\n    if (existing !== toMerge && !(existing && existing._merged)) {\n      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;\n    }\n  }\n}\n\nfunction mergeHook$1 (f1, f2) {\n  var merged = function (a, b) {\n    // flow complains about extra args which is why we use any\n    f1(a, b);\n    f2(a, b);\n  };\n  merged._merged = true;\n  return merged\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input'\n  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  var existing = on[event];\n  var callback = data.model.callback;\n  if (isDef(existing)) {\n    if (\n      Array.isArray(existing)\n        ? existing.indexOf(callback) === -1\n        : existing !== callback\n    ) {\n      on[event] = [callback].concat(existing);\n    }\n  } else {\n    on[event] = callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n     true && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  // object syntax in v-bind\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is;\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // warn against non-primitive key\n  if ( true &&\n    isDef(data) && isDef(data.key) && !isPrimitive(data.key)\n  ) {\n    {\n      warn(\n        'Avoid using non-primitive value as key, ' +\n        'use string/number value instead.',\n        context\n      );\n    }\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      if ( true && isDef(data) && isDef(data.nativeOn)) {\n        warn(\n          (\"The .native modifier for v-on is only valid on components but it was used on <\" + tag + \">.\"),\n          context\n        );\n      }\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (Array.isArray(vnode)) {\n    return vnode\n  } else if (isDef(vnode)) {\n    if (isDef(ns)) { applyNS(vnode, ns); }\n    if (isDef(data)) { registerDeepBindings(data); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns, force) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    ns = undefined;\n    force = true;\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && (\n        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {\n        applyNS(child, ns, force);\n      }\n    }\n  }\n}\n\n// ref #5318\n// necessary to ensure parent re-render when deep bindings like :style and\n// :class are used on slot nodes\nfunction registerDeepBindings (data) {\n  if (isObject(data.style)) {\n    traverse(data.style);\n  }\n  if (isObject(data.class)) {\n    traverse(data.class);\n  }\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null; // v-once cached trees\n  var options = vm.$options;\n  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  if (true) {\n    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\n    }, true);\n    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\n    }, true);\n  } else {}\n}\n\nvar currentRenderingInstance = null;\n\nfunction renderMixin (Vue) {\n  // install runtime convenience helpers\n  installRenderHelpers(Vue.prototype);\n\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var _parentVnode = ref._parentVnode;\n\n    if (_parentVnode) {\n      vm.$scopedSlots = normalizeScopedSlots(\n        _parentVnode.data.scopedSlots,\n        vm.$slots,\n        vm.$scopedSlots\n      );\n    }\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      // There's no need to maintain a stack because all render fns are called\n      // separately from one another. Nested component's render fns are called\n      // when parent component is patched.\n      currentRenderingInstance = vm;\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if ( true && vm.$options.renderError) {\n        try {\n          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\n        } catch (e) {\n          handleError(e, vm, \"renderError\");\n          vnode = vm._vnode;\n        }\n      } else {\n        vnode = vm._vnode;\n      }\n    } finally {\n      currentRenderingInstance = null;\n    }\n    // if the returned array contains only a single node, allow it\n    if (Array.isArray(vnode) && vnode.length === 1) {\n      vnode = vnode[0];\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if ( true && Array.isArray(vnode)) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  if (\n    comp.__esModule ||\n    (hasSymbol && comp[Symbol.toStringTag] === 'Module')\n  ) {\n    comp = comp.default;\n  }\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction createAsyncPlaceholder (\n  factory,\n  data,\n  context,\n  children,\n  tag\n) {\n  var node = createEmptyVNode();\n  node.asyncFactory = factory;\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n  return node\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  var owner = currentRenderingInstance;\n  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {\n    // already pending\n    factory.owners.push(owner);\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (owner && !isDef(factory.owners)) {\n    var owners = factory.owners = [owner];\n    var sync = true;\n    var timerLoading = null;\n    var timerTimeout = null\n\n    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });\n\n    var forceRender = function (renderCompleted) {\n      for (var i = 0, l = owners.length; i < l; i++) {\n        (owners[i]).$forceUpdate();\n      }\n\n      if (renderCompleted) {\n        owners.length = 0;\n        if (timerLoading !== null) {\n          clearTimeout(timerLoading);\n          timerLoading = null;\n        }\n        if (timerTimeout !== null) {\n          clearTimeout(timerTimeout);\n          timerTimeout = null;\n        }\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender(true);\n      } else {\n        owners.length = 0;\n      }\n    });\n\n    var reject = once(function (reason) {\n       true && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender(true);\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (isPromise(res)) {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isPromise(res.component)) {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            timerLoading = setTimeout(function () {\n              timerLoading = null;\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender(false);\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          timerTimeout = setTimeout(function () {\n            timerTimeout = null;\n            if (isUndef(factory.resolved)) {\n              reject(\n                 true\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : undefined\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction isAsyncPlaceholder (node) {\n  return node.isComment && node.asyncFactory\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn) {\n  target.$on(event, fn);\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction createOnceHandler (event, fn) {\n  var _target = target;\n  return function onceHandler () {\n    var res = fn.apply(null, arguments);\n    if (res !== null) {\n      _target.$off(event, onceHandler);\n    }\n  }\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);\n  target = undefined;\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        vm.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {\n        vm.$off(event[i$1], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (!fn) {\n      vm._events[event] = null;\n      return vm\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (true) {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      var info = \"event handler for \\\"\" + event + \"\\\"\";\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        invokeWithErrorHandling(cbs[i], vm, args, vm, info);\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\nvar activeInstance = null;\nvar isUpdatingChildComponent = false;\n\nfunction setActiveInstance(vm) {\n  var prevActiveInstance = activeInstance;\n  activeInstance = vm;\n  return function () {\n    activeInstance = prevActiveInstance;\n  }\n}\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var restoreActiveInstance = setActiveInstance(vm);\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    restoreActiveInstance();\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // release circular reference (#6759)\n    if (vm.$vnode) {\n      vm.$vnode.parent = null;\n    }\n  };\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  if (true) {\n    isUpdatingChildComponent = true;\n  }\n\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren.\n\n  // check if there are dynamic scopedSlots (hand-written or compiled but with\n  // dynamic slot names). Static scoped slots compiled from template has the\n  // \"$stable\" marker.\n  var newScopedSlots = parentVnode.data.scopedSlots;\n  var oldScopedSlots = vm.$scopedSlots;\n  var hasDynamicScopedSlot = !!(\n    (newScopedSlots && !newScopedSlots.$stable) ||\n    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||\n    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)\n  );\n\n  // Any static slot children from the parent may have changed during parent's\n  // update. Dynamic scoped slots may also have changed. In such cases, a forced\n  // update is necessary to ensure correctness.\n  var needsForceUpdate = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    hasDynamicScopedSlot\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update $attrs and $listeners hash\n  // these are also reactive so they may trigger child update if the child\n  // used them during render\n  vm.$attrs = parentVnode.data.attrs || emptyObject;\n  vm.$listeners = listeners || emptyObject;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    toggleObserving(false);\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      var propOptions = vm.$options.props; // wtf flow?\n      props[key] = validateProp(key, propOptions, propsData, vm);\n    }\n    toggleObserving(true);\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n  \n  // fixed by xxxxxx update properties(mp runtime)\n  vm._$updateProperties && vm._$updateProperties(vm);\n  \n  // update listeners\n  listeners = listeners || emptyObject;\n  var oldListeners = vm.$options._parentListeners;\n  vm.$options._parentListeners = listeners;\n  updateComponentListeners(vm, listeners, oldListeners);\n\n  // resolve slots + force update if has children\n  if (needsForceUpdate) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n\n  if (true) {\n    isUpdatingChildComponent = false;\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  // #7573 disable dep collection when invoking lifecycle hooks\n  pushTarget();\n  var handlers = vm.$options[hook];\n  var info = hook + \" hook\";\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      invokeWithErrorHandling(handlers[i], vm, null, vm, info);\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n  popTarget();\n}\n\n/*  */\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (true) {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n// Async edge case #6566 requires saving the timestamp when event listeners are\n// attached. However, calling performance.now() has a perf overhead especially\n// if the page has thousands of event listeners. Instead, we take a timestamp\n// every time the scheduler flushes and use that for all event listeners\n// attached during that flush.\nvar currentFlushTimestamp = 0;\n\n// Async edge case fix requires storing an event listener's attach timestamp.\nvar getNow = Date.now;\n\n// Determine what event timestamp the browser is using. Annoyingly, the\n// timestamp can either be hi-res (relative to page load) or low-res\n// (relative to UNIX epoch), so in order to compare time we have to use the\n// same timestamp type when saving the flush timestamp.\n// All IE versions use low-res event timestamps, and have problematic clock\n// implementations (#9632)\nif (inBrowser && !isIE) {\n  var performance = window.performance;\n  if (\n    performance &&\n    typeof performance.now === 'function' &&\n    getNow() > document.createEvent('Event').timeStamp\n  ) {\n    // if the event timestamp, although evaluated AFTER the Date.now(), is\n    // smaller than it, it means the event is using a hi-res timestamp,\n    // and we need to use the hi-res version for event listener timestamps as\n    // well.\n    getNow = function () { return performance.now(); };\n  }\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  currentFlushTimestamp = getNow();\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    if (watcher.before) {\n      watcher.before();\n    }\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if ( true && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdatedHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdatedHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n\n      if ( true && !config.async) {\n        flushSchedulerQueue();\n        return\n      }\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\n\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options,\n  isRenderWatcher\n) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n    this.before = options.before;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression =  true\n    ? expOrFn.toString()\n    : undefined;\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = noop;\n       true && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this.deps[i];\n    if (!this.newDepIds.has(dep.id)) {\n      dep.removeSub(this);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n  var i = this.deps.length;\n  while (i--) {\n    this.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this.deps[i].removeSub(this);\n    }\n    this.active = false;\n  }\n};\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  if (!isRoot) {\n    toggleObserving(false);\n  }\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (true) {\n      var hyphenatedKey = hyphenate(key);\n      if (isReservedAttribute(hyphenatedKey) ||\n          config.isReservedAttr(hyphenatedKey)) {\n        warn(\n          (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive$$1(props, key, value, function () {\n        if (!isRoot && !isUpdatingChildComponent) {\n          {\n            if(vm.mpHost === 'mp-baidu'){//百度 observer 在 setData callback 之后触发，直接忽略该 warn\n                return\n            }\n            //fixed by xxxxxx __next_tick_pending,uni://form-field 时不告警\n            if(\n                key === 'value' && \n                Array.isArray(vm.$options.behaviors) &&\n                vm.$options.behaviors.indexOf('uni://form-field') !== -1\n              ){\n              return\n            }\n            if(vm._getFormData){\n              return\n            }\n            var $parent = vm.$parent;\n            while($parent){\n              if($parent.__next_tick_pending){\n                return  \n              }\n              $parent = $parent.$parent;\n            }\n          }\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {}\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  toggleObserving(true);\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n     true && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    if (true) {\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\n          vm\n        );\n      }\n    }\n    if (props && hasOwn(props, key)) {\n       true && warn(\n        \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  // #7573 disable dep collection when invoking data getters\n  pushTarget();\n  try {\n    return data.call(vm, vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  } finally {\n    popTarget();\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  // $flow-disable-line\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if ( true && getter == null) {\n      warn(\n        (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\n        vm\n      );\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (true) {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (\n  target,\n  key,\n  userDef\n) {\n  var shouldCache = !isServerRendering();\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : createGetterInvoker(userDef);\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : createGetterInvoker(userDef.get)\n      : noop;\n    sharedPropertyDefinition.set = userDef.set || noop;\n  }\n  if ( true &&\n      sharedPropertyDefinition.set === noop) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        (\"Computed property \\\"\" + key + \"\\\" was assigned to but it has no setter.\"),\n        this\n      );\n    };\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.SharedObject.target) {// fixed by xxxxxx\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction createGetterInvoker(fn) {\n  return function computedGetter () {\n    return fn.call(this, this)\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    if (true) {\n      if (typeof methods[key] !== 'function') {\n        warn(\n          \"Method \\\"\" + key + \"\\\" has type \\\"\" + (typeof methods[key]) + \"\\\" in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\n          \"Avoid defining component methods that start with _ or $.\"\n        );\n      }\n    }\n    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (\n  vm,\n  expOrFn,\n  handler,\n  options\n) {\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  return vm.$watch(expOrFn, handler, options)\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (true) {\n    dataDef.set = function () {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      try {\n        cb.call(vm, watcher.value);\n      } catch (error) {\n        handleError(error, vm, (\"callback for immediate watcher \\\"\" + (watcher.expression) + \"\\\"\"));\n      }\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nvar uid$3 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$3++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      startTag = \"vue-perf-start:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (true) {\n      initProxy(vm);\n    } else {}\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    vm.mpHost !== 'mp-toutiao' && initInjections(vm); // resolve injections before data/props  \n    initState(vm);\n    vm.mpHost !== 'mp-toutiao' && initProvide(vm); // resolve provide after data/props\n    vm.mpHost !== 'mp-toutiao' && callHook(vm, 'created');      \n\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure((\"vue \" + (vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  var parentVnode = options._parentVnode;\n  opts.parent = options.parent;\n  opts._parentVnode = parentVnode;\n\n  var vnodeComponentOptions = parentVnode.componentOptions;\n  opts.propsData = vnodeComponentOptions.propsData;\n  opts._parentListeners = vnodeComponentOptions.listeners;\n  opts._renderChildren = vnodeComponentOptions.children;\n  opts._componentTag = vnodeComponentOptions.tag;\n\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = latest[key];\n    }\n  }\n  return modified\n}\n\nfunction Vue (options) {\n  if ( true &&\n    !(this instanceof Vue)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nrenderMixin(Vue);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    installedPlugins.push(plugin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if ( true && name) {\n      validateComponentName(name);\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if ( true && type === 'component') {\n          validateComponentName(id);\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\n\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (keepAliveInstance, filter) {\n  var cache = keepAliveInstance.cache;\n  var keys = keepAliveInstance.keys;\n  var _vnode = keepAliveInstance._vnode;\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode);\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (\n  cache,\n  key,\n  keys,\n  current\n) {\n  var cached$$1 = cache[key];\n  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {\n    cached$$1.componentInstance.$destroy();\n  }\n  cache[key] = null;\n  remove(keys, key);\n}\n\nvar patternTypes = [String, RegExp, Array];\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n    this.keys = [];\n  },\n\n  destroyed: function destroyed () {\n    for (var key in this.cache) {\n      pruneCacheEntry(this.cache, key, this.keys);\n    }\n  },\n\n  mounted: function mounted () {\n    var this$1 = this;\n\n    this.$watch('include', function (val) {\n      pruneCache(this$1, function (name) { return matches(val, name); });\n    });\n    this.$watch('exclude', function (val) {\n      pruneCache(this$1, function (name) { return !matches(val, name); });\n    });\n  },\n\n  render: function render () {\n    var slot = this.$slots.default;\n    var vnode = getFirstComponentChild(slot);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      var ref = this;\n      var include = ref.include;\n      var exclude = ref.exclude;\n      if (\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      var ref$1 = this;\n      var cache = ref$1.cache;\n      var keys = ref$1.keys;\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance;\n        // make current key freshest\n        remove(keys, key);\n        keys.push(key);\n      } else {\n        cache[key] = vnode;\n        keys.push(key);\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode);\n        }\n      }\n\n      vnode.data.keepAlive = true;\n    }\n    return vnode || (slot && slot[0])\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (true) {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive$$1\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  // 2.6 explicit observable API\n  Vue.observable = function (obj) {\n    observe(obj);\n    return obj\n  };\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue);\n\nObject.defineProperty(Vue.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n});\n\n// expose FunctionalRenderContext for ssr runtime helper installation\nObject.defineProperty(Vue, 'FunctionalRenderContext', {\n  value: FunctionalRenderContext\n});\n\nVue.version = '2.6.11';\n\n/**\n * https://raw.githubusercontent.com/Tencent/westore/master/packages/westore/utils/diff.js\n */\nvar ARRAYTYPE = '[object Array]';\nvar OBJECTTYPE = '[object Object]';\n// const FUNCTIONTYPE = '[object Function]'\n\nfunction diff(current, pre) {\n    var result = {};\n    syncKeys(current, pre);\n    _diff(current, pre, '', result);\n    return result\n}\n\nfunction syncKeys(current, pre) {\n    if (current === pre) { return }\n    var rootCurrentType = type(current);\n    var rootPreType = type(pre);\n    if (rootCurrentType == OBJECTTYPE && rootPreType == OBJECTTYPE) {\n        if(Object.keys(current).length >= Object.keys(pre).length){\n            for (var key in pre) {\n                var currentValue = current[key];\n                if (currentValue === undefined) {\n                    current[key] = null;\n                } else {\n                    syncKeys(currentValue, pre[key]);\n                }\n            }\n        }\n    } else if (rootCurrentType == ARRAYTYPE && rootPreType == ARRAYTYPE) {\n        if (current.length >= pre.length) {\n            pre.forEach(function (item, index) {\n                syncKeys(current[index], item);\n            });\n        }\n    }\n}\n\nfunction _diff(current, pre, path, result) {\n    if (current === pre) { return }\n    var rootCurrentType = type(current);\n    var rootPreType = type(pre);\n    if (rootCurrentType == OBJECTTYPE) {\n        if (rootPreType != OBJECTTYPE || Object.keys(current).length < Object.keys(pre).length) {\n            setResult(result, path, current);\n        } else {\n            var loop = function ( key ) {\n                var currentValue = current[key];\n                var preValue = pre[key];\n                var currentType = type(currentValue);\n                var preType = type(preValue);\n                if (currentType != ARRAYTYPE && currentType != OBJECTTYPE) {\n                    if (currentValue != pre[key]) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    }\n                } else if (currentType == ARRAYTYPE) {\n                    if (preType != ARRAYTYPE) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    } else {\n                        if (currentValue.length < preValue.length) {\n                            setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                        } else {\n                            currentValue.forEach(function (item, index) {\n                                _diff(item, preValue[index], (path == '' ? '' : path + \".\") + key + '[' + index + ']', result);\n                            });\n                        }\n                    }\n                } else if (currentType == OBJECTTYPE) {\n                    if (preType != OBJECTTYPE || Object.keys(currentValue).length < Object.keys(preValue).length) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    } else {\n                        for (var subKey in currentValue) {\n                            _diff(currentValue[subKey], preValue[subKey], (path == '' ? '' : path + \".\") + key + '.' + subKey, result);\n                        }\n                    }\n                }\n            };\n\n            for (var key in current) loop( key );\n        }\n    } else if (rootCurrentType == ARRAYTYPE) {\n        if (rootPreType != ARRAYTYPE) {\n            setResult(result, path, current);\n        } else {\n            if (current.length < pre.length) {\n                setResult(result, path, current);\n            } else {\n                current.forEach(function (item, index) {\n                    _diff(item, pre[index], path + '[' + index + ']', result);\n                });\n            }\n        }\n    } else {\n        setResult(result, path, current);\n    }\n}\n\nfunction setResult(result, k, v) {\n    // if (type(v) != FUNCTIONTYPE) {\n        result[k] = v;\n    // }\n}\n\nfunction type(obj) {\n    return Object.prototype.toString.call(obj)\n}\n\n/*  */\r\n\r\nfunction flushCallbacks$1(vm) {\r\n    if (vm.__next_tick_callbacks && vm.__next_tick_callbacks.length) {\r\n        if (Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\r\n            var mpInstance = vm.$scope;\r\n            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +\r\n                ']:flushCallbacks[' + vm.__next_tick_callbacks.length + ']');\r\n        }\r\n        var copies = vm.__next_tick_callbacks.slice(0);\r\n        vm.__next_tick_callbacks.length = 0;\r\n        for (var i = 0; i < copies.length; i++) {\r\n            copies[i]();\r\n        }\r\n    }\r\n}\r\n\r\nfunction hasRenderWatcher(vm) {\r\n    return queue.find(function (watcher) { return vm._watcher === watcher; })\r\n}\r\n\r\nfunction nextTick$1(vm, cb) {\r\n    //1.nextTick 之前 已 setData 且 setData 还未回调完成\r\n    //2.nextTick 之前存在 render watcher\r\n    if (!vm.__next_tick_pending && !hasRenderWatcher(vm)) {\n        if(Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG){\n            var mpInstance = vm.$scope;\n            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +\n                ']:nextVueTick');\n        }\r\n        return nextTick(cb, vm)\r\n    }else{\n        if(Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG){\n            var mpInstance$1 = vm.$scope;\n            console.log('[' + (+new Date) + '][' + (mpInstance$1.is || mpInstance$1.route) + '][' + vm._uid +\n                ']:nextMPTick');\n        }\n    }\r\n    var _resolve;\r\n    if (!vm.__next_tick_callbacks) {\r\n        vm.__next_tick_callbacks = [];\r\n    }\r\n    vm.__next_tick_callbacks.push(function () {\r\n        if (cb) {\r\n            try {\r\n                cb.call(vm);\r\n            } catch (e) {\r\n                handleError(e, vm, 'nextTick');\r\n            }\r\n        } else if (_resolve) {\r\n            _resolve(vm);\r\n        }\r\n    });\r\n    // $flow-disable-line\r\n    if (!cb && typeof Promise !== 'undefined') {\r\n        return new Promise(function (resolve) {\r\n            _resolve = resolve;\r\n        })\r\n    }\r\n}\n\n/*  */\r\n\r\nfunction cloneWithData(vm) {\r\n  // 确保当前 vm 所有数据被同步\r\n  var ret = Object.create(null);\r\n  var dataKeys = [].concat(\r\n    Object.keys(vm._data || {}),\r\n    Object.keys(vm._computedWatchers || {}));\r\n\r\n  dataKeys.reduce(function(ret, key) {\r\n    ret[key] = vm[key];\r\n    return ret\r\n  }, ret);\r\n  //TODO 需要把无用数据处理掉，比如 list=>l0 则 list 需要移除，否则多传输一份数据\r\n  Object.assign(ret, vm.$mp.data || {});\r\n  if (\r\n    Array.isArray(vm.$options.behaviors) &&\r\n    vm.$options.behaviors.indexOf('uni://form-field') !== -1\r\n  ) { //form-field\r\n    ret['name'] = vm.name;\r\n    ret['value'] = vm.value;\r\n  }\r\n\r\n  return JSON.parse(JSON.stringify(ret))\r\n}\r\n\r\nvar patch = function(oldVnode, vnode) {\n  var this$1 = this;\n\r\n  if (vnode === null) { //destroy\r\n    return\r\n  }\r\n  if (this.mpType === 'page' || this.mpType === 'component') {\r\n    var mpInstance = this.$scope;\r\n    var data = Object.create(null);\r\n    try {\r\n      data = cloneWithData(this);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n    data.__webviewId__ = mpInstance.data.__webviewId__;\r\n    var mpData = Object.create(null);\r\n    Object.keys(data).forEach(function (key) { //仅同步 data 中有的数据\r\n      mpData[key] = mpInstance.data[key];\r\n    });\r\n    var diffData = this.$shouldDiffData === false ? data : diff(data, mpData);\r\n    if (Object.keys(diffData).length) {\r\n      if (Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\r\n        console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + this._uid +\r\n          ']差量更新',\r\n          JSON.stringify(diffData));\r\n      }\r\n      this.__next_tick_pending = true;\r\n      mpInstance.setData(diffData, function () {\r\n        this$1.__next_tick_pending = false;\r\n        flushCallbacks$1(this$1);\r\n      });\r\n    } else {\r\n      flushCallbacks$1(this);\r\n    }\r\n  }\r\n};\n\n/*  */\n\nfunction createEmptyRender() {\n\n}\n\nfunction mountComponent$1(\n  vm,\n  el,\n  hydrating\n) {\n  if (!vm.mpType) {//main.js 中的 new Vue\n    return vm\n  }\n  if (vm.mpType === 'app') {\n    vm.$options.render = createEmptyRender;\n  }\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyRender;\n    if (true) {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  \n  vm.mpHost !== 'mp-toutiao' && callHook(vm, 'beforeMount');\n\n  var updateComponent = function () {\n    vm._update(vm._render(), hydrating);\n  };\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, {\n    before: function before() {\n      if (vm._isMounted && !vm._isDestroyed) {\n        callHook(vm, 'beforeUpdate');\n      }\n    }\n  }, true /* isRenderWatcher */);\n  hydrating = false;\n  return vm\n}\n\n/*  */\n\nfunction renderClass (\n  staticClass,\n  dynamicClass\n) {\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (Array.isArray(value)) {\n    return stringifyArray(value)\n  }\n  if (isObject(value)) {\n    return stringifyObject(value)\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction stringifyArray (value) {\n  var res = '';\n  var stringified;\n  for (var i = 0, l = value.length; i < l; i++) {\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n      if (res) { res += ' '; }\n      res += stringified;\n    }\n  }\n  return res\n}\n\nfunction stringifyObject (value) {\n  var res = '';\n  for (var key in value) {\n    if (value[key]) {\n      if (res) { res += ' '; }\n      res += key;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/*  */\r\n\r\nvar MP_METHODS = ['createSelectorQuery', 'createIntersectionObserver', 'selectAllComponents', 'selectComponent'];\r\n\r\nfunction getTarget(obj, path) {\r\n  var parts = path.split('.');\r\n  var key = parts[0];\r\n  if (key.indexOf('__$n') === 0) { //number index\r\n    key = parseInt(key.replace('__$n', ''));\r\n  }\r\n  if (parts.length === 1) {\r\n    return obj[key]\r\n  }\r\n  return getTarget(obj[key], parts.slice(1).join('.'))\r\n}\r\n\r\nfunction internalMixin(Vue) {\r\n\r\n  Vue.config.errorHandler = function(err) {\n    console.error(err);\n    /* eslint-disable no-undef */\r\n    var app = getApp();\r\n    if (app && app.onError) {\r\n      app.onError(err);\r\n    }\r\n  };\r\n\r\n  var oldEmit = Vue.prototype.$emit;\r\n\r\n  Vue.prototype.$emit = function(event) {\r\n    if (this.$scope && event) {\r\n      this.$scope['triggerEvent'](event, {\r\n        __args__: toArray(arguments, 1)\r\n      });\r\n    }\r\n    return oldEmit.apply(this, arguments)\r\n  };\r\n\r\n  Vue.prototype.$nextTick = function(fn) {\r\n    return nextTick$1(this, fn)\r\n  };\r\n\r\n  MP_METHODS.forEach(function (method) {\r\n    Vue.prototype[method] = function(args) {\r\n      if (this.$scope && this.$scope[method]) {\r\n        return this.$scope[method](args)\r\n      }\r\n      // mp-alipay\r\n      if (typeof my === 'undefined') {\r\n        return\r\n      }\r\n      if (method === 'createSelectorQuery') {\r\n        /* eslint-disable no-undef */\r\n        return my.createSelectorQuery(args)\r\n      } else if (method === 'createIntersectionObserver') {\r\n        /* eslint-disable no-undef */\r\n        return my.createIntersectionObserver(args)\r\n      }\r\n      // TODO mp-alipay 暂不支持 selectAllComponents,selectComponent\r\n    };\r\n  });\r\n\r\n  Vue.prototype.__init_provide = initProvide;\r\n\r\n  Vue.prototype.__init_injections = initInjections;\r\n\r\n  Vue.prototype.__call_hook = function(hook, args) {\r\n    var vm = this;\r\n    // #7573 disable dep collection when invoking lifecycle hooks\r\n    pushTarget();\r\n    var handlers = vm.$options[hook];\r\n    var info = hook + \" hook\";\r\n    var ret;\r\n    if (handlers) {\r\n      for (var i = 0, j = handlers.length; i < j; i++) {\r\n        ret = invokeWithErrorHandling(handlers[i], vm, args ? [args] : null, vm, info);\r\n      }\r\n    }\r\n    if (vm._hasHookEvent) {\r\n      vm.$emit('hook:' + hook, args);\r\n    }\r\n    popTarget();\r\n    return ret\r\n  };\r\n\r\n  Vue.prototype.__set_model = function(target, key, value, modifiers) {\r\n    if (Array.isArray(modifiers)) {\r\n      if (modifiers.indexOf('trim') !== -1) {\r\n        value = value.trim();\r\n      }\r\n      if (modifiers.indexOf('number') !== -1) {\r\n        value = this._n(value);\r\n      }\r\n    }\r\n    if (!target) {\r\n      target = this;\r\n    }\r\n    target[key] = value;\r\n  };\r\n\r\n  Vue.prototype.__set_sync = function(target, key, value) {\r\n    if (!target) {\r\n      target = this;\r\n    }\r\n    target[key] = value;\r\n  };\r\n\r\n  Vue.prototype.__get_orig = function(item) {\r\n    if (isPlainObject(item)) {\r\n      return item['$orig'] || item\r\n    }\r\n    return item\r\n  };\r\n\r\n  Vue.prototype.__get_value = function(dataPath, target) {\r\n    return getTarget(target || this, dataPath)\r\n  };\r\n\r\n\r\n  Vue.prototype.__get_class = function(dynamicClass, staticClass) {\r\n    return renderClass(staticClass, dynamicClass)\r\n  };\r\n\r\n  Vue.prototype.__get_style = function(dynamicStyle, staticStyle) {\r\n    if (!dynamicStyle && !staticStyle) {\r\n      return ''\r\n    }\r\n    var dynamicStyleObj = normalizeStyleBinding(dynamicStyle);\r\n    var styleObj = staticStyle ? extend(staticStyle, dynamicStyleObj) : dynamicStyleObj;\r\n    return Object.keys(styleObj).map(function (name) { return ((hyphenate(name)) + \":\" + (styleObj[name])); }).join(';')\r\n  };\r\n\r\n  Vue.prototype.__map = function(val, iteratee) {\r\n    //TODO 暂不考虑 string,number\r\n    var ret, i, l, keys, key;\r\n    if (Array.isArray(val)) {\r\n      ret = new Array(val.length);\r\n      for (i = 0, l = val.length; i < l; i++) {\r\n        ret[i] = iteratee(val[i], i);\r\n      }\r\n      return ret\r\n    } else if (isObject(val)) {\r\n      keys = Object.keys(val);\r\n      ret = Object.create(null);\r\n      for (i = 0, l = keys.length; i < l; i++) {\r\n        key = keys[i];\r\n        ret[key] = iteratee(val[key], key, i);\r\n      }\r\n      return ret\r\n    }\r\n    return []\r\n  };\r\n\r\n}\n\n/*  */\r\n\r\nvar LIFECYCLE_HOOKS$1 = [\r\n    //App\r\n    'onLaunch',\r\n    'onShow',\r\n    'onHide',\r\n    'onUniNViewMessage',\n    'onError',\r\n    //Page\r\n    'onLoad',\r\n    // 'onShow',\r\n    'onReady',\r\n    // 'onHide',\r\n    'onUnload',\r\n    'onPullDownRefresh',\r\n    'onReachBottom',\r\n    'onTabItemTap',\r\n    'onShareAppMessage',\n    'onResize',\r\n    'onPageScroll',\r\n    'onNavigationBarButtonTap',\r\n    'onBackPress',\r\n    'onNavigationBarSearchInputChanged',\r\n    'onNavigationBarSearchInputConfirmed',\r\n    'onNavigationBarSearchInputClicked',\r\n    //Component\r\n    // 'onReady', // 兼容旧版本，应该移除该事件\r\n    'onPageShow',\r\n    'onPageHide',\r\n    'onPageResize'\r\n];\r\nfunction lifecycleMixin$1(Vue) {\r\n\r\n    //fixed vue-class-component\r\n    var oldExtend = Vue.extend;\r\n    Vue.extend = function(extendOptions) {\r\n        extendOptions = extendOptions || {};\r\n\r\n        var methods = extendOptions.methods;\r\n        if (methods) {\r\n            Object.keys(methods).forEach(function (methodName) {\r\n                if (LIFECYCLE_HOOKS$1.indexOf(methodName)!==-1) {\r\n                    extendOptions[methodName] = methods[methodName];\r\n                    delete methods[methodName];\r\n                }\r\n            });\r\n        }\r\n\r\n        return oldExtend.call(this, extendOptions)\r\n    };\r\n\r\n    var strategies = Vue.config.optionMergeStrategies;\r\n    var mergeHook = strategies.created;\r\n    LIFECYCLE_HOOKS$1.forEach(function (hook) {\r\n        strategies[hook] = mergeHook;\r\n    });\r\n\r\n    Vue.prototype.__lifecycle_hooks__ = LIFECYCLE_HOOKS$1;\r\n}\n\n/*  */\r\n\n// install platform patch function\r\nVue.prototype.__patch__ = patch;\r\n\r\n// public mount method\r\nVue.prototype.$mount = function(\r\n    el ,\r\n    hydrating \r\n) {\r\n    return mountComponent$1(this, el, hydrating)\r\n};\r\n\r\nlifecycleMixin$1(Vue);\r\ninternalMixin(Vue);\n\n/*  */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Vue);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ }),

/***/ 4:
/*!*******************************************!*\
  !*** D:/work/financeForum_app/pages.json ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI0LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n");

/***/ }),

/***/ 461:
/*!****************************************************!*\
  !*** D:/work/financeForum_app/components/index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.pathToBase64 = pathToBase64;exports.base64ToPath = base64ToPath;function getLocalFilePath(path) {\n  if (path.indexOf('_www') === 0 || path.indexOf('_doc') === 0 || path.indexOf('_documents') === 0 || path.indexOf('_downloads') === 0) {\n    return path;\n  }\n  if (path.indexOf('file://') === 0) {\n    return path;\n  }\n  if (path.indexOf('/storage/emulated/0/') === 0) {\n    return path;\n  }\n  if (path.indexOf('/') === 0) {\n    var localFilePath = plus.io.convertAbsoluteFileSystem(path);\n    if (localFilePath !== path) {\n      return localFilePath;\n    } else {\n      path = path.substr(1);\n    }\n  }\n  return '_www/' + path;\n}\n\nfunction pathToBase64(path) {\n  return new Promise(function (resolve, reject) {\n    if (typeof window === 'object' && 'document' in window) {\n      if (typeof FileReader === 'function') {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', path, true);\n        xhr.responseType = 'blob';\n        xhr.onload = function () {\n          if (this.status === 200) {\n            var fileReader = new FileReader();\n            fileReader.onload = function (e) {\n              resolve(e.target.result);\n            };\n            fileReader.onerror = reject;\n            fileReader.readAsDataURL(this.response);\n          }\n        };\n        xhr.onerror = reject;\n        xhr.send();\n        return;\n      }\n      var canvas = document.createElement('canvas');\n      var c2x = canvas.getContext('2d');\n      var img = new Image();\n      img.onload = function () {\n        canvas.width = img.width;\n        canvas.height = img.height;\n        c2x.drawImage(img, 0, 0);\n        resolve(canvas.toDataURL());\n        canvas.height = canvas.width = 0;\n      };\n      img.onerror = reject;\n      img.src = path;\n      return;\n    }\n    if (typeof plus === 'object') {\n      plus.io.resolveLocalFileSystemURL(getLocalFilePath(path), function (entry) {\n        entry.file(function (file) {\n          var fileReader = new plus.io.FileReader();\n          fileReader.onload = function (data) {\n            resolve(data.target.result);\n          };\n          fileReader.onerror = function (error) {\n            reject(error);\n          };\n          fileReader.readAsDataURL(file);\n        }, function (error) {\n          reject(error);\n        });\n      }, function (error) {\n        reject(error);\n      });\n      return;\n    }\n    if (typeof wx === 'object' && wx.canIUse('getFileSystemManager')) {\n      wx.getFileSystemManager().readFile({\n        filePath: path,\n        encoding: 'base64',\n        success: function success(res) {\n          resolve('data:image/png;base64,' + res.data);\n        },\n        fail: function fail(error) {\n          reject(error);\n        } });\n\n      return;\n    }\n    reject(new Error('not support'));\n  });\n}\n\nfunction base64ToPath(base64) {\n  return new Promise(function (resolve, reject) {\n    if (typeof window === 'object' && 'document' in window) {\n      base64 = base64.split(',');\n      var type = base64[0].match(/:(.*?);/)[1];\n      var str = atob(base64[1]);\n      var n = str.length;\n      var array = new Uint8Array(n);\n      while (n--) {\n        array[n] = str.charCodeAt(n);\n      }\n      return resolve((window.URL || window.webkitURL).createObjectURL(new Blob([array], { type: type })));\n    }\n    var extName = base64.match(/data\\:\\S+\\/(\\S+);/);\n    if (extName) {\n      extName = extName[1];\n    } else {\n      reject(new Error('base64 error'));\n    }\n    var fileName = Date.now() + '.' + extName;\n    if (typeof plus === 'object') {\n      var bitmap = new plus.nativeObj.Bitmap('bitmap' + Date.now());\n      bitmap.loadBase64Data(base64, function () {\n        var filePath = '_doc/uniapp_temp/' + fileName;\n        bitmap.save(filePath, {}, function () {\n          bitmap.clear();\n          resolve(filePath);\n        }, function (error) {\n          bitmap.clear();\n          reject(error);\n        });\n      }, function (error) {\n        bitmap.clear();\n        reject(error);\n      });\n      return;\n    }\n    if (typeof wx === 'object' && wx.canIUse('getFileSystemManager')) {\n      var filePath = wx.env.USER_DATA_PATH + '/' + fileName;\n      wx.getFileSystemManager().writeFile({\n        filePath: filePath,\n        data: base64.replace(/^data:\\S+\\/\\S+;base64,/, ''),\n        encoding: 'base64',\n        success: function success() {\n          resolve(filePath);\n        },\n        fail: function fail(error) {\n          reject(error);\n        } });\n\n      return;\n    }\n    reject(new Error('not support'));\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///461\n");

/***/ }),

/***/ 5:
/*!*******************************************************!*\
  !*** ./node_modules/@dcloudio/uni-stat/dist/index.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {var _package = __webpack_require__(/*! ../package.json */ 6);function _possibleConstructorReturn(self, call) {if (call && (typeof call === \"object\" || typeof call === \"function\")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}\n\nvar STAT_VERSION = _package.version;\nvar STAT_URL = 'https://tongji.dcloud.io/uni/stat';\nvar STAT_H5_URL = 'https://tongji.dcloud.io/uni/stat.gif';\nvar PAGE_PVER_TIME = 1800;\nvar APP_PVER_TIME = 300;\nvar OPERATING_TIME = 10;\n\nvar UUID_KEY = '__DC_STAT_UUID';\nvar UUID_VALUE = '__DC_UUID_VALUE';\n\nfunction getUuid() {\n  var uuid = '';\n  if (getPlatformName() === 'n') {\n    try {\n      uuid = plus.runtime.getDCloudId();\n    } catch (e) {\n      uuid = '';\n    }\n    return uuid;\n  }\n\n  try {\n    uuid = uni.getStorageSync(UUID_KEY);\n  } catch (e) {\n    uuid = UUID_VALUE;\n  }\n\n  if (!uuid) {\n    uuid = Date.now() + '' + Math.floor(Math.random() * 1e7);\n    try {\n      uni.setStorageSync(UUID_KEY, uuid);\n    } catch (e) {\n      uni.setStorageSync(UUID_KEY, UUID_VALUE);\n    }\n  }\n  return uuid;\n}\n\nvar getSgin = function getSgin(statData) {\n  var arr = Object.keys(statData);\n  var sortArr = arr.sort();\n  var sgin = {};\n  var sginStr = '';\n  for (var i in sortArr) {\n    sgin[sortArr[i]] = statData[sortArr[i]];\n    sginStr += sortArr[i] + '=' + statData[sortArr[i]] + '&';\n  }\n  // const options = sginStr.substr(0, sginStr.length - 1)\n  // sginStr = sginStr.substr(0, sginStr.length - 1) + '&key=' + STAT_KEY;\n  // const si = crypto.createHash('md5').update(sginStr).digest('hex');\n  return {\n    sign: '',\n    options: sginStr.substr(0, sginStr.length - 1) };\n\n};\n\nvar getSplicing = function getSplicing(data) {\n  var str = '';\n  for (var i in data) {\n    str += i + '=' + data[i] + '&';\n  }\n  return str.substr(0, str.length - 1);\n};\n\nvar getTime = function getTime() {\n  return parseInt(new Date().getTime() / 1000);\n};\n\nvar getPlatformName = function getPlatformName() {\n  var platformList = {\n    'app-plus': 'n',\n    'h5': 'h5',\n    'mp-weixin': 'wx',\n    'mp-alipay': 'ali',\n    'mp-baidu': 'bd',\n    'mp-toutiao': 'tt',\n    'mp-qq': 'qq' };\n\n  return platformList[\"app-plus\"];\n};\n\nvar getPackName = function getPackName() {\n  var packName = '';\n  if (getPlatformName() === 'wx' || getPlatformName() === 'qq') {\n    // 兼容微信小程序低版本基础库\n    if (uni.canIUse('getAccountInfoSync')) {\n      packName = uni.getAccountInfoSync().miniProgram.appId || '';\n    }\n  }\n  return packName;\n};\n\nvar getVersion = function getVersion() {\n  return getPlatformName() === 'n' ? plus.runtime.version : '';\n};\n\nvar getChannel = function getChannel() {\n  var platformName = getPlatformName();\n  var channel = '';\n  if (platformName === 'n') {\n    channel = plus.runtime.channel;\n  }\n  return channel;\n};\n\nvar getScene = function getScene(options) {\n  var platformName = getPlatformName();\n  var scene = '';\n  if (options) {\n    return options;\n  }\n  if (platformName === 'wx') {\n    scene = uni.getLaunchOptionsSync().scene;\n  }\n  return scene;\n};\nvar First__Visit__Time__KEY = 'First__Visit__Time';\nvar Last__Visit__Time__KEY = 'Last__Visit__Time';\n\nvar getFirstVisitTime = function getFirstVisitTime() {\n  var timeStorge = uni.getStorageSync(First__Visit__Time__KEY);\n  var time = 0;\n  if (timeStorge) {\n    time = timeStorge;\n  } else {\n    time = getTime();\n    uni.setStorageSync(First__Visit__Time__KEY, time);\n    uni.removeStorageSync(Last__Visit__Time__KEY);\n  }\n  return time;\n};\n\nvar getLastVisitTime = function getLastVisitTime() {\n  var timeStorge = uni.getStorageSync(Last__Visit__Time__KEY);\n  var time = 0;\n  if (timeStorge) {\n    time = timeStorge;\n  } else {\n    time = '';\n  }\n  uni.setStorageSync(Last__Visit__Time__KEY, getTime());\n  return time;\n};\n\n\nvar PAGE_RESIDENCE_TIME = '__page__residence__time';\nvar First_Page_residence_time = 0;\nvar Last_Page_residence_time = 0;\n\n\nvar setPageResidenceTime = function setPageResidenceTime() {\n  First_Page_residence_time = getTime();\n  if (getPlatformName() === 'n') {\n    uni.setStorageSync(PAGE_RESIDENCE_TIME, getTime());\n  }\n  return First_Page_residence_time;\n};\n\nvar getPageResidenceTime = function getPageResidenceTime() {\n  Last_Page_residence_time = getTime();\n  if (getPlatformName() === 'n') {\n    First_Page_residence_time = uni.getStorageSync(PAGE_RESIDENCE_TIME);\n  }\n  return Last_Page_residence_time - First_Page_residence_time;\n};\nvar TOTAL__VISIT__COUNT = 'Total__Visit__Count';\nvar getTotalVisitCount = function getTotalVisitCount() {\n  var timeStorge = uni.getStorageSync(TOTAL__VISIT__COUNT);\n  var count = 1;\n  if (timeStorge) {\n    count = timeStorge;\n    count++;\n  }\n  uni.setStorageSync(TOTAL__VISIT__COUNT, count);\n  return count;\n};\n\nvar GetEncodeURIComponentOptions = function GetEncodeURIComponentOptions(statData) {\n  var data = {};\n  for (var prop in statData) {\n    data[prop] = encodeURIComponent(statData[prop]);\n  }\n  return data;\n};\n\nvar Set__First__Time = 0;\nvar Set__Last__Time = 0;\n\nvar getFirstTime = function getFirstTime() {\n  var time = new Date().getTime();\n  Set__First__Time = time;\n  Set__Last__Time = 0;\n  return time;\n};\n\n\nvar getLastTime = function getLastTime() {\n  var time = new Date().getTime();\n  Set__Last__Time = time;\n  return time;\n};\n\n\nvar getResidenceTime = function getResidenceTime(type) {\n  var residenceTime = 0;\n  if (Set__First__Time !== 0) {\n    residenceTime = Set__Last__Time - Set__First__Time;\n  }\n\n  residenceTime = parseInt(residenceTime / 1000);\n  residenceTime = residenceTime < 1 ? 1 : residenceTime;\n  if (type === 'app') {\n    var overtime = residenceTime > APP_PVER_TIME ? true : false;\n    return {\n      residenceTime: residenceTime,\n      overtime: overtime };\n\n  }\n  if (type === 'page') {\n    var _overtime = residenceTime > PAGE_PVER_TIME ? true : false;\n    return {\n      residenceTime: residenceTime,\n      overtime: _overtime };\n\n  }\n\n  return {\n    residenceTime: residenceTime };\n\n\n};\n\nvar getRoute = function getRoute() {\n  var pages = getCurrentPages();\n  var page = pages[pages.length - 1];\n  var _self = page.$vm;\n\n  if (getPlatformName() === 'bd') {\n    return _self.$mp && _self.$mp.page.is;\n  } else {\n    return _self.$scope && _self.$scope.route || _self.$mp && _self.$mp.page.route;\n  }\n};\n\nvar getPageRoute = function getPageRoute(self) {\n  var pages = getCurrentPages();\n  var page = pages[pages.length - 1];\n  var _self = page.$vm;\n  var query = self._query;\n  var str = query && JSON.stringify(query) !== '{}' ? '?' + JSON.stringify(query) : '';\n  // clear\n  self._query = '';\n  if (getPlatformName() === 'bd') {\n    return _self.$mp && _self.$mp.page.is + str;\n  } else {\n    return _self.$scope && _self.$scope.route + str || _self.$mp && _self.$mp.page.route + str;\n  }\n};\n\nvar getPageTypes = function getPageTypes(self) {\n  if (self.mpType === 'page' || self.$mp && self.$mp.mpType === 'page' || self.$options.mpType === 'page') {\n    return true;\n  }\n  return false;\n};\n\nvar calibration = function calibration(eventName, options) {\n  //  login 、 share 、pay_success 、pay_fail 、register 、title\n  if (!eventName) {\n    console.error(\"uni.report \\u7F3A\\u5C11 [eventName] \\u53C2\\u6570\");\n    return true;\n  }\n  if (typeof eventName !== 'string') {\n    console.error(\"uni.report [eventName] \\u53C2\\u6570\\u7C7B\\u578B\\u9519\\u8BEF,\\u53EA\\u80FD\\u4E3A String \\u7C7B\\u578B\");\n    return true;\n  }\n  if (eventName.length > 255) {\n    console.error(\"uni.report [eventName] \\u53C2\\u6570\\u957F\\u5EA6\\u4E0D\\u80FD\\u5927\\u4E8E 255\");\n    return true;\n  }\n\n  if (typeof options !== 'string' && typeof options !== 'object') {\n    console.error(\"uni.report [options] \\u53C2\\u6570\\u7C7B\\u578B\\u9519\\u8BEF,\\u53EA\\u80FD\\u4E3A String \\u6216 Object \\u7C7B\\u578B\");\n    return true;\n  }\n\n  if (typeof options === 'string' && options.length > 255) {\n    console.error(\"uni.report [options] \\u53C2\\u6570\\u957F\\u5EA6\\u4E0D\\u80FD\\u5927\\u4E8E 255\");\n    return true;\n  }\n\n  if (eventName === 'title' && typeof options !== 'string') {\n    console.error('uni.report [eventName] 参数为 title 时，[options] 参数只能为 String 类型');\n    return true;\n  }\n};\n\nvar PagesJson = __webpack_require__(/*! uni-pages?{\"type\":\"style\"} */ 7).default;\nvar statConfig = __webpack_require__(/*! uni-stat-config */ 8).default || __webpack_require__(/*! uni-stat-config */ 8);\n\nvar resultOptions = uni.getSystemInfoSync();var\n\nUtil = /*#__PURE__*/function () {\n  function Util() {_classCallCheck(this, Util);\n    this.self = '';\n    this._retry = 0;\n    this._platform = '';\n    this._query = {};\n    this._navigationBarTitle = {\n      config: '',\n      page: '',\n      report: '',\n      lt: '' };\n\n    this._operatingTime = 0;\n    this._reportingRequestData = {\n      '1': [],\n      '11': [] };\n\n    this.__prevent_triggering = false;\n\n    this.__licationHide = false;\n    this.__licationShow = false;\n    this._lastPageRoute = '';\n    this.statData = {\n      uuid: getUuid(),\n      ut: getPlatformName(),\n      mpn: getPackName(),\n      ak: statConfig.appid,\n      usv: STAT_VERSION,\n      v: getVersion(),\n      ch: getChannel(),\n      cn: '',\n      pn: '',\n      ct: '',\n      t: getTime(),\n      tt: '',\n      p: resultOptions.platform === 'android' ? 'a' : 'i',\n      brand: resultOptions.brand || '',\n      md: resultOptions.model,\n      sv: resultOptions.system.replace(/(Android|iOS)\\s/, ''),\n      mpsdk: resultOptions.SDKVersion || '',\n      mpv: resultOptions.version || '',\n      lang: resultOptions.language,\n      pr: resultOptions.pixelRatio,\n      ww: resultOptions.windowWidth,\n      wh: resultOptions.windowHeight,\n      sw: resultOptions.screenWidth,\n      sh: resultOptions.screenHeight };\n\n\n  }_createClass(Util, [{ key: \"_applicationShow\", value: function _applicationShow()\n\n    {\n      if (this.__licationHide) {\n        getLastTime();\n        var time = getResidenceTime('app');\n        if (time.overtime) {\n          var options = {\n            path: this._lastPageRoute,\n            scene: this.statData.sc };\n\n          this._sendReportRequest(options);\n        }\n        this.__licationHide = false;\n      }\n    } }, { key: \"_applicationHide\", value: function _applicationHide(\n\n    self, type) {\n\n      this.__licationHide = true;\n      getLastTime();\n      var time = getResidenceTime();\n      getFirstTime();\n      var route = getPageRoute(this);\n      this._sendHideRequest({\n        urlref: route,\n        urlref_ts: time.residenceTime },\n      type);\n    } }, { key: \"_pageShow\", value: function _pageShow()\n\n    {\n      var route = getPageRoute(this);\n      var routepath = getRoute();\n      this._navigationBarTitle.config = PagesJson &&\n      PagesJson.pages[routepath] &&\n      PagesJson.pages[routepath].titleNView &&\n      PagesJson.pages[routepath].titleNView.titleText ||\n      PagesJson &&\n      PagesJson.pages[routepath] &&\n      PagesJson.pages[routepath].navigationBarTitleText || '';\n\n      if (this.__licationShow) {\n        getFirstTime();\n        this.__licationShow = false;\n        // console.log('这是 onLauch 之后执行的第一次 pageShow ，为下次记录时间做准备');\n        this._lastPageRoute = route;\n        return;\n      }\n\n      getLastTime();\n      this._lastPageRoute = route;\n      var time = getResidenceTime('page');\n      if (time.overtime) {\n        var options = {\n          path: this._lastPageRoute,\n          scene: this.statData.sc };\n\n        this._sendReportRequest(options);\n      }\n      getFirstTime();\n    } }, { key: \"_pageHide\", value: function _pageHide()\n\n    {\n      if (!this.__licationHide) {\n        getLastTime();\n        var time = getResidenceTime('page');\n        this._sendPageRequest({\n          url: this._lastPageRoute,\n          urlref: this._lastPageRoute,\n          urlref_ts: time.residenceTime });\n\n        this._navigationBarTitle = {\n          config: '',\n          page: '',\n          report: '',\n          lt: '' };\n\n        return;\n      }\n    } }, { key: \"_login\", value: function _login()\n\n    {\n      this._sendEventRequest({\n        key: 'login' },\n      0);\n    } }, { key: \"_share\", value: function _share()\n\n    {\n      this._sendEventRequest({\n        key: 'share' },\n      0);\n    } }, { key: \"_payment\", value: function _payment(\n    key) {\n      this._sendEventRequest({\n        key: key },\n      0);\n    } }, { key: \"_sendReportRequest\", value: function _sendReportRequest(\n    options) {\n\n      this._navigationBarTitle.lt = '1';\n      var query = options.query && JSON.stringify(options.query) !== '{}' ? '?' + JSON.stringify(options.query) : '';\n      this.statData.lt = '1';\n      this.statData.url = options.path + query || '';\n      this.statData.t = getTime();\n      this.statData.sc = getScene(options.scene);\n      this.statData.fvts = getFirstVisitTime();\n      this.statData.lvts = getLastVisitTime();\n      this.statData.tvc = getTotalVisitCount();\n      if (getPlatformName() === 'n') {\n        this.getProperty();\n      } else {\n        this.getNetworkInfo();\n      }\n    } }, { key: \"_sendPageRequest\", value: function _sendPageRequest(\n\n    opt) {var\n\n      url =\n\n\n      opt.url,urlref = opt.urlref,urlref_ts = opt.urlref_ts;\n      this._navigationBarTitle.lt = '11';\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '11',\n        ut: this.statData.ut,\n        url: url,\n        tt: this.statData.tt,\n        urlref: urlref,\n        urlref_ts: urlref_ts,\n        ch: this.statData.ch,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }, { key: \"_sendHideRequest\", value: function _sendHideRequest(\n\n    opt, type) {var\n\n      urlref =\n\n      opt.urlref,urlref_ts = opt.urlref_ts;\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '3',\n        ut: this.statData.ut,\n        urlref: urlref,\n        urlref_ts: urlref_ts,\n        ch: this.statData.ch,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options, type);\n    } }, { key: \"_sendEventRequest\", value: function _sendEventRequest()\n\n\n\n    {var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},_ref$key = _ref.key,key = _ref$key === void 0 ? '' : _ref$key,_ref$value = _ref.value,value = _ref$value === void 0 ? \"\" : _ref$value;\n      var route = this._lastPageRoute;\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '21',\n        ut: this.statData.ut,\n        url: route,\n        ch: this.statData.ch,\n        e_n: key,\n        e_v: typeof value === 'object' ? JSON.stringify(value) : value.toString(),\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }, { key: \"getNetworkInfo\", value: function getNetworkInfo()\n\n    {var _this = this;\n      uni.getNetworkType({\n        success: function success(result) {\n          _this.statData.net = result.networkType;\n          _this.getLocation();\n        } });\n\n    } }, { key: \"getProperty\", value: function getProperty()\n\n    {var _this2 = this;\n      plus.runtime.getProperty(plus.runtime.appid, function (wgtinfo) {\n        _this2.statData.v = wgtinfo.version || '';\n        _this2.getNetworkInfo();\n      });\n    } }, { key: \"getLocation\", value: function getLocation()\n\n    {var _this3 = this;\n      if (statConfig.getLocation) {\n        uni.getLocation({\n          type: 'wgs84',\n          geocode: true,\n          success: function success(result) {\n            if (result.address) {\n              _this3.statData.cn = result.address.country;\n              _this3.statData.pn = result.address.province;\n              _this3.statData.ct = result.address.city;\n            }\n\n            _this3.statData.lat = result.latitude;\n            _this3.statData.lng = result.longitude;\n            _this3.request(_this3.statData);\n          } });\n\n      } else {\n        this.statData.lat = 0;\n        this.statData.lng = 0;\n        this.request(this.statData);\n      }\n    } }, { key: \"request\", value: function request(\n\n    data, type) {var _this4 = this;\n      var time = getTime();\n      var title = this._navigationBarTitle;\n      data.ttn = title.page;\n      data.ttpj = title.config;\n      data.ttc = title.report;\n\n      var requestData = this._reportingRequestData;\n      if (getPlatformName() === 'n') {\n        requestData = uni.getStorageSync('__UNI__STAT__DATA') || {};\n      }\n      if (!requestData[data.lt]) {\n        requestData[data.lt] = [];\n      }\n      requestData[data.lt].push(data);\n\n      if (getPlatformName() === 'n') {\n        uni.setStorageSync('__UNI__STAT__DATA', requestData);\n      }\n      if (getPageResidenceTime() < OPERATING_TIME && !type) {\n        return;\n      }\n      var uniStatData = this._reportingRequestData;\n      if (getPlatformName() === 'n') {\n        uniStatData = uni.getStorageSync('__UNI__STAT__DATA');\n      }\n      // 时间超过，重新获取时间戳\n      setPageResidenceTime();\n      var firstArr = [];\n      var contentArr = [];\n      var lastArr = [];var _loop = function _loop(\n\n      i) {\n        var rd = uniStatData[i];\n        rd.forEach(function (elm) {\n          var newData = getSplicing(elm);\n          if (i === 0) {\n            firstArr.push(newData);\n          } else if (i === 3) {\n            lastArr.push(newData);\n          } else {\n            contentArr.push(newData);\n          }\n        });};for (var i in uniStatData) {_loop(i);\n      }\n\n      firstArr.push.apply(firstArr, contentArr.concat(lastArr));\n      var optionsData = {\n        usv: STAT_VERSION, //统计 SDK 版本号\n        t: time, //发送请求时的时间戮\n        requests: JSON.stringify(firstArr) };\n\n\n      this._reportingRequestData = {};\n      if (getPlatformName() === 'n') {\n        uni.removeStorageSync('__UNI__STAT__DATA');\n      }\n\n      if (data.ut === 'h5') {\n        this.imageRequest(optionsData);\n        return;\n      }\n\n      if (getPlatformName() === 'n' && this.statData.p === 'a') {\n        setTimeout(function () {\n          _this4._sendRequest(optionsData);\n        }, 200);\n        return;\n      }\n      this._sendRequest(optionsData);\n    } }, { key: \"_sendRequest\", value: function _sendRequest(\n    optionsData) {var _this5 = this;\n      uni.request({\n        url: STAT_URL,\n        method: 'POST',\n        // header: {\n        //   'content-type': 'application/json' // 默认值\n        // },\n        data: optionsData,\n        success: function success() {\n          // if (process.env.NODE_ENV === 'development') {\n          //   console.log('stat request success');\n          // }\n        },\n        fail: function fail(e) {\n          if (++_this5._retry < 3) {\n            setTimeout(function () {\n              _this5._sendRequest(optionsData);\n            }, 1000);\n          }\n        } });\n\n    }\n    /**\r\n       * h5 请求\r\n       */ }, { key: \"imageRequest\", value: function imageRequest(\n    data) {\n      var image = new Image();\n      var options = getSgin(GetEncodeURIComponentOptions(data)).options;\n      image.src = STAT_H5_URL + '?' + options;\n    } }, { key: \"sendEvent\", value: function sendEvent(\n\n    key, value) {\n      // 校验 type 参数\n      if (calibration(key, value)) return;\n\n      if (key === 'title') {\n        this._navigationBarTitle.report = value;\n        return;\n      }\n      this._sendEventRequest({\n        key: key,\n        value: typeof value === 'object' ? JSON.stringify(value) : value },\n      1);\n    } }]);return Util;}();var\n\n\n\nStat = /*#__PURE__*/function (_Util) {_inherits(Stat, _Util);_createClass(Stat, null, [{ key: \"getInstance\", value: function getInstance()\n    {\n      if (!this.instance) {\n        this.instance = new Stat();\n      }\n      return this.instance;\n    } }]);\n  function Stat() {var _this6;_classCallCheck(this, Stat);\n    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(Stat).call(this));\n    _this6.instance = null;\n    // 注册拦截器\n    if (typeof uni.addInterceptor === 'function' && \"development\" !== 'development') {\n      _this6.addInterceptorInit();\n      _this6.interceptLogin();\n      _this6.interceptShare(true);\n      _this6.interceptRequestPayment();\n    }return _this6;\n  }_createClass(Stat, [{ key: \"addInterceptorInit\", value: function addInterceptorInit()\n\n    {\n      var self = this;\n      uni.addInterceptor('setNavigationBarTitle', {\n        invoke: function invoke(args) {\n          self._navigationBarTitle.page = args.title;\n        } });\n\n    } }, { key: \"interceptLogin\", value: function interceptLogin()\n\n    {\n      var self = this;\n      uni.addInterceptor('login', {\n        complete: function complete() {\n          self._login();\n        } });\n\n    } }, { key: \"interceptShare\", value: function interceptShare(\n\n    type) {\n      var self = this;\n      if (!type) {\n        self._share();\n        return;\n      }\n      uni.addInterceptor('share', {\n        success: function success() {\n          self._share();\n        },\n        fail: function fail() {\n          self._share();\n        } });\n\n    } }, { key: \"interceptRequestPayment\", value: function interceptRequestPayment()\n\n    {\n      var self = this;\n      uni.addInterceptor('requestPayment', {\n        success: function success() {\n          self._payment('pay_success');\n        },\n        fail: function fail() {\n          self._payment('pay_fail');\n        } });\n\n    } }, { key: \"report\", value: function report(\n\n    options, self) {\n      this.self = self;\n      // if (process.env.NODE_ENV === 'development') {\n      //   console.log('report init');\n      // }\n      setPageResidenceTime();\n      this.__licationShow = true;\n      this._sendReportRequest(options, true);\n    } }, { key: \"load\", value: function load(\n\n    options, self) {\n      if (!self.$scope && !self.$mp) {\n        var page = getCurrentPages();\n        self.$scope = page[page.length - 1];\n      }\n      this.self = self;\n      this._query = options;\n    } }, { key: \"show\", value: function show(\n\n    self) {\n      this.self = self;\n      if (getPageTypes(self)) {\n        this._pageShow(self);\n      } else {\n        this._applicationShow(self);\n      }\n    } }, { key: \"ready\", value: function ready(\n\n    self) {\n      // this.self = self;\n      // if (getPageTypes(self)) {\n      //   this._pageShow(self);\n      // }\n    } }, { key: \"hide\", value: function hide(\n    self) {\n      this.self = self;\n      if (getPageTypes(self)) {\n        this._pageHide(self);\n      } else {\n        this._applicationHide(self, true);\n      }\n    } }, { key: \"error\", value: function error(\n    em) {\n      if (this._platform === 'devtools') {\n        if (true) {\n          console.info('当前运行环境为开发者工具，不上报数据。');\n        }\n        // return;\n      }\n      var emVal = '';\n      if (!em.message) {\n        emVal = JSON.stringify(em);\n      } else {\n        emVal = em.stack;\n      }\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '31',\n        ut: this.statData.ut,\n        ch: this.statData.ch,\n        mpsdk: this.statData.mpsdk,\n        mpv: this.statData.mpv,\n        v: this.statData.v,\n        em: emVal,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }]);return Stat;}(Util);\n\n\nvar stat = Stat.getInstance();\nvar isHide = false;\nvar lifecycle = {\n  onLaunch: function onLaunch(options) {\n    stat.report(options, this);\n  },\n  onReady: function onReady() {\n    stat.ready(this);\n  },\n  onLoad: function onLoad(options) {\n    stat.load(options, this);\n    // 重写分享，获取分享上报事件\n    if (this.$scope && this.$scope.onShareAppMessage) {\n      var oldShareAppMessage = this.$scope.onShareAppMessage;\n      this.$scope.onShareAppMessage = function (options) {\n        stat.interceptShare(false);\n        return oldShareAppMessage.call(this, options);\n      };\n    }\n  },\n  onShow: function onShow() {\n    isHide = false;\n    stat.show(this);\n  },\n  onHide: function onHide() {\n    isHide = true;\n    stat.hide(this);\n  },\n  onUnload: function onUnload() {\n    if (isHide) {\n      isHide = false;\n      return;\n    }\n    stat.hide(this);\n  },\n  onError: function onError(e) {\n    stat.error(e);\n  } };\n\n\nfunction main() {\n  if (true) {\n    uni.report = function (type, options) {};\n  } else { var Vue; }\n}\n\nmain();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n");

/***/ }),

/***/ 523:
/*!**************************************************************!*\
  !*** D:/work/financeForum_app/components/libs/CssHandler.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;} /*\r\n解析和匹配 Css 的选择器\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             github：https://github.com/jin-yufeng/Parser\r\ndocs：https://jin-yufeng.github.io/Parser\r\nauthor：JinYufeng\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           */\nvar config = __webpack_require__(/*! ./config.js */ 524);var\nCssHandler = /*#__PURE__*/function () {\n  function CssHandler() {var tagStyle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};_classCallCheck(this, CssHandler);\n    this.styles = Object.assign({}, tagStyle);\n  }_createClass(CssHandler, [{ key: \"getStyle\", value: function getStyle(\n    data) {\n      var style = '';\n      data = data.replace(/<[sS][tT][yY][lL][eE][\\s\\S]*?>([\\s\\S]*?)<\\/[sS][tT][yY][lL][eE][\\s\\S]*?>/g, function ($, $1) {return style +=\n        $1, '';});\n      this.styles = new CssParser(style, this.styles).parse();\n      return data;\n    } }, { key: \"match\", value: function match(\n    name, attrs) {\n      var tmp,matched = (tmp = this.styles[name]) ? tmp + ';' : '';\n      if (attrs.class) {\n        var classes = attrs.class.split(' ');\n        for (var i = 0; i < classes.length; i++) {\n          if (tmp = this.styles['.' + classes[i]])\n          matched += tmp + ';';}\n      }\n      if (tmp = this.styles['#' + attrs.id])\n      matched += tmp + ';';\n      return matched;\n    } }]);return CssHandler;}();\n\nmodule.exports = CssHandler;var\nCssParser = /*#__PURE__*/function () {\n  function CssParser(data, tagStyle) {_classCallCheck(this, CssParser);\n    this.data = data;\n    this.res = tagStyle;\n    for (var item in config.userAgentStyles) {\n      if (tagStyle[item]) tagStyle[item] = config.userAgentStyles[item] + ';' + tagStyle[item];else\n      tagStyle[item] = config.userAgentStyles[item];\n    }\n    this._comma = false;\n    this._floor = 0;\n    this._i = 0;\n    this._list = [];\n    this._start = 0;\n    this._state = this.Space;\n  }_createClass(CssParser, [{ key: \"parse\", value: function parse()\n    {\n      for (; this._i < this.data.length; this._i++) {\n        this._state(this.data[this._i]);}\n      return this.res;\n    } }, { key: \"Space\",\n    // 状态机\n    value: function Space(c) {\n      if (c == '.' || c == '#' || c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z') {\n        this._start = this._i;\n        this._state = this.StyleName;\n      } else if (c == '/' && this.data[this._i + 1] == '*')\n      this.Comment();else\n      if (!config.blankChar[c] && c != ';')\n      this._state = this.Ignore;\n    } }, { key: \"Comment\", value: function Comment()\n    {\n      this._i = this.data.indexOf(\"*/\", this._i) + 1;\n      if (!this._i) this._i = this.data.length;\n      this._state = this.Space;\n    } }, { key: \"Ignore\", value: function Ignore(\n    c) {\n      if (c == '{') this._floor++;else\n      if (c == '}' && ! --this._floor) {\n        this._list = [];\n        this._state = this.Space;\n      }\n    } }, { key: \"StyleName\", value: function StyleName(\n    c) {\n      if (config.blankChar[c]) {\n        if (this._start != this._i)\n        this._list.push(this.data.substring(this._start, this._i));\n        this._state = this.NameSpace;\n      } else if (c == '{') {\n        this._list.push(this.data.substring(this._start, this._i));\n        this._start = this._i + 1;\n        this.Content();\n      } else if (c == ',') {\n        this._list.push(this.data.substring(this._start, this._i));\n        this._start = this._i + 1;\n        this._comma = true;\n      } else if ((c < 'a' || c > 'z') && (c < 'A' || c > 'Z') && (c < '0' || c > '9') && c != '.' && c != '#' && c != '-' &&\n      c != '_')\n      this._state = this.Ignore;\n    } }, { key: \"NameSpace\", value: function NameSpace(\n    c) {\n      if (c == '{') {\n        this._start = this._i + 1;\n        this.Content();\n      } else if (c == ',') {\n        this._comma = true;\n        this._start = this._i + 1;\n        this._state = this.StyleName;\n      } else if (!config.blankChar[c]) {\n        if (this._comma) {\n          this._state = this.StyleName;\n          this._start = this._i--;\n          this._comma = false;\n        } else this._state = this.Ignore;\n      }\n    } }, { key: \"Content\", value: function Content()\n    {\n      this._i = this.data.indexOf('}', this._i);\n      if (this._i == -1) this._i = this.data.length;\n      var content = this.data.substring(this._start, this._i);\n      for (var i = this._list.length; i--;) {\n        this.res[this._list[i]] = (this.res[this._list[i]] || '') + content;}\n      this._list = [];\n      this._state = this.Space;\n    } }]);return CssParser;}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy9saWJzL0Nzc0hhbmRsZXIuanMiXSwibmFtZXMiOlsiY29uZmlnIiwicmVxdWlyZSIsIkNzc0hhbmRsZXIiLCJ0YWdTdHlsZSIsInN0eWxlcyIsIk9iamVjdCIsImFzc2lnbiIsImRhdGEiLCJzdHlsZSIsInJlcGxhY2UiLCIkIiwiJDEiLCJDc3NQYXJzZXIiLCJwYXJzZSIsIm5hbWUiLCJhdHRycyIsInRtcCIsIm1hdGNoZWQiLCJjbGFzcyIsImNsYXNzZXMiLCJzcGxpdCIsImkiLCJsZW5ndGgiLCJpZCIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXMiLCJpdGVtIiwidXNlckFnZW50U3R5bGVzIiwiX2NvbW1hIiwiX2Zsb29yIiwiX2kiLCJfbGlzdCIsIl9zdGFydCIsIl9zdGF0ZSIsIlNwYWNlIiwiYyIsIlN0eWxlTmFtZSIsIkNvbW1lbnQiLCJibGFua0NoYXIiLCJJZ25vcmUiLCJpbmRleE9mIiwicHVzaCIsInN1YnN0cmluZyIsIk5hbWVTcGFjZSIsIkNvbnRlbnQiLCJjb250ZW50Il0sIm1hcHBpbmdzIjoiOHBCQUFBOzs7Ozs7QUFNQSxJQUFNQSxNQUFNLEdBQUdDLG1CQUFPLENBQUMsc0JBQUQsQ0FBdEIsQztBQUNNQyxVO0FBQ0wsd0JBQTJCLEtBQWZDLFFBQWUsdUVBQUosRUFBSTtBQUMxQixTQUFLQyxNQUFMLEdBQWNDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JILFFBQWxCLENBQWQ7QUFDQSxHO0FBQ1FJLFEsRUFBTTtBQUNkLFVBQUlDLEtBQUssR0FBRyxFQUFaO0FBQ0FELFVBQUksR0FBR0EsSUFBSSxDQUFDRSxPQUFMLENBQWEsMkVBQWIsRUFBMEYsVUFBQ0MsQ0FBRCxFQUFJQyxFQUFKLFVBQVlILEtBQUs7QUFDakhHLFVBRDRHLEVBQ3hHLEVBRDRGLEVBQTFGLENBQVA7QUFFQSxXQUFLUCxNQUFMLEdBQWMsSUFBSVEsU0FBSixDQUFjSixLQUFkLEVBQXFCLEtBQUtKLE1BQTFCLEVB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S0FBS00sTUFBbkI7QUFDUDtBQUNELEs7QUFDUztBQUNULFdBQUtULEVBQUwsR0FBVSxLQUFLeEIsSUFBTCxDQUFVa0MsT0FBVixDQUFrQixHQUFsQixFQUF1QixLQUFLVixFQUE1QixDQUFWO0FBQ0EsVUFBSSxLQUFLQSxFQUFMLElBQVcsQ0FBQyxDQUFoQixFQUFtQixLQUFLQSxFQUFMLEdBQVUsS0FBS3hCLElBQUwsQ0FBVWUsTUFBcEI7QUFDbkIsVUFBSXdCLE9BQU8sR0FBRyxLQUFLdkMsSUFBTCxDQUFVb0MsU0FBVixDQUFvQixLQUFLVixNQUF6QixFQUFpQyxLQUFLRixFQUF0QyxDQUFkO0FBQ0EsV0FBSyxJQUFJVixDQUFDLEdBQUcsS0FBS1csS0FBTCxDQUFXVixNQUF4QixFQUFnQ0QsQ0FBQyxFQUFqQztBQUNDLGFBQUtLLEdBQUwsQ0FBUyxLQUFLTSxLQUFMLENBQVdYLENBQVgsQ0FBVCxJQUEwQixDQUFDLEtBQUtLLEdBQUwsQ0FBUyxLQUFLTSxLQUFMLENBQVdYLENBQVgsQ0FBVCxLQUEyQixFQUE1QixJQUFrQ3lCLE9BQTVELENBREQ7QUFFQSxXQUFLZCxLQUFMLEdBQWEsRUFBYjtBQUNBLFdBQUtFLE1BQUwsR0FBYyxLQUFLQyxLQUFuQjtBQUNBLEsiLCJmaWxlIjoiNTIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICDop6PmnpDlkozljLnphY0gQ3NzIOeahOmAieaLqeWZqFxyXG4gIGdpdGh1Yu+8mmh0dHBzOi8vZ2l0aHViLmNvbS9qaW4teXVmZW5nL1BhcnNlclxyXG4gIGRvY3PvvJpodHRwczovL2ppbi15dWZlbmcuZ2l0aHViLmlvL1BhcnNlclxyXG4gIGF1dGhvcu+8mkppbll1ZmVuZ1xyXG4qL1xyXG5jb25zdCBjb25maWcgPSByZXF1aXJlKFwiLi9jb25maWcuanNcIik7XHJcbmNsYXNzIENzc0hhbmRsZXIge1xyXG5cdGNvbnN0cnVjdG9yKHRhZ1N0eWxlID0ge30pIHtcclxuXHRcdHRoaXMuc3R5bGVzID0gT2JqZWN0LmFzc2lnbih7fSwgdGFnU3R5bGUpO1xyXG5cdH07XHJcblx0Z2V0U3R5bGUoZGF0YSkge1xyXG5cdFx0dmFyIHN0eWxlID0gJyc7XHJcblx0XHRkYXRhID0gZGF0YS5yZXBsYWNlKC88W3NTXVt0VF1beVldW2xMXVtlRV1bXFxzXFxTXSo/PihbXFxzXFxTXSo/KTxcXC9bc1NdW3RUXVt5WV1bbExdW2VFXVtcXHNcXFNdKj8+L2csICgkLCAkMSkgPT4gKHN0eWxlICs9XHJcblx0XHRcdCQxLCAnJykpO1xyXG5cdFx0dGhpcy5zdHlsZXMgPSBuZXcgQ3NzUGFyc2VyKHN0eWxlLCB0aGlzLnN0eWxlcykucGFyc2UoKTtcclxuXHRcdHJldHVybiBkYXRhO1xyXG5cdH07XHJcblx0bWF0Y2gobmFtZSwgYXR0cnMpIHtcclxuXHRcdHZhciB0bXAsIG1hdGNoZWQgPSAodG1wID0gdGhpcy5zdHlsZXNbbmFtZV0pID8gdG1wICsgJzsnIDogJyc7XHJcblx0XHRpZiAoYXR0cnMuY2xhc3MpIHtcclxuXHRcdFx0dmFyIGNsYXNzZXMgPSBhdHRycy5jbGFzcy5zcGxpdCgnICcpO1xyXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGNsYXNzZXMubGVuZ3RoOyBpKyspXHJcblx0XHRcdFx0aWYgKHRtcCA9IHRoaXMuc3R5bGVzWycuJyArIGNsYXNzZXNbaV1dKVxyXG5cdFx0XHRcdFx0bWF0Y2hlZCArPSB0bXAgKyAnOyc7XHJcblx0XHR9XHJcblx0XHRpZiAodG1wID0gdGhpcy5zdHlsZXNbJyMnICsgYXR0cnMuaWRdKVxyXG5cdFx0XHRtYXRjaGVkICs9IHRtcCArICc7JztcclxuXHRcdHJldHVybiBtYXRjaGVkO1xyXG5cdH07XHJcbn1cclxubW9kdWxlLmV4cG9ydHMgPSBDc3NIYW5kbGVyO1xyXG5jbGFzcyBDc3NQYXJzZXIge1xyXG5cdGNvbnN0cnVjdG9yKGRhdGEsIHRhZ1N0eWxlKSB7XHJcblx0XHR0aGlzLmRhdGEgPSBkYXRhO1xyXG5cdFx0dGhpcy5yZXMgPSB0YWdTdHlsZTtcclxuXHRcdGZvciAodmFyIGl0ZW0gaW4gY29uZmlnLnVzZXJBZ2VudFN0eWxlcykge1xyXG5cdFx0XHRpZiAodGFnU3R5bGVbaXRlbV0pIHRhZ1N0eWxlW2l0ZW1dID0gY29uZmlnLnVzZXJBZ2VudFN0eWxlc1tpdGVtXSArICc7JyArIHRhZ1N0eWxlW2l0ZW1dO1xyXG5cdFx0XHRlbHNlIHRhZ1N0eWxlW2l0ZW1dID0gY29uZmlnLnVzZXJBZ2VudFN0eWxlc1tpdGVtXTtcclxuXHRcdH1cclxuXHRcdHRoaXMuX2NvbW1hID0gZmFsc2U7XHJcblx0XHR0aGlzLl9mbG9vciA9IDA7XHJcblx0XHR0aGlzLl9pID0gMDtcclxuXHRcdHRoaXMuX2xpc3QgPSBbXTtcclxuXHRcdHRoaXMuX3N0YXJ0ID0gMDtcclxuXHRcdHRoaXMuX3N0YXRlID0gdGhpcy5TcGFjZTtcclxuXHR9O1xyXG5cdHBhcnNlKCkge1xyXG5cdFx0Zm9yICg7IHRoaXMuX2kgPCB0aGlzLmRhdGEubGVuZ3RoOyB0aGlzLl9pKyspXHJcblx0XHRcdHRoaXMuX3N0YXRlKHRoaXMuZGF0YVt0aGlzLl9pXSk7XHJcblx0XHRyZXR1cm4gdGhpcy5yZXM7XHJcblx0fTtcclxuXHQvLyDnirbmgIHmnLpcclxuXHRTcGFjZShjKSB7XHJcblx0XHRpZiAoYyA9PSAnLicgfHwgYyA9PSAnIycgfHwgKGMgPj0gJ2EnICYmIGMgPD0gJ3onKSB8fCAoYyA+PSAnQScgJiYgYyA8PSAnWicpKSB7XHJcblx0XHRcdHRoaXMuX3N0YXJ0ID0gdGhpcy5faTtcclxuXHRcdFx0dGhpcy5fc3RhdGUgPSB0aGlzLlN0eWxlTmFtZTtcclxuXHRcdH0gZWxzZSBpZiAoYyA9PSAnLycgJiYgdGhpcy5kYXRhW3RoaXMuX2kgKyAxXSA9PSAnKicpXHJcblx0XHRcdHRoaXMuQ29tbWVudCgpO1xyXG5cdFx0ZWxzZSBpZiAoIWNvbmZpZy5ibGFua0NoYXJbY10gJiYgYyAhPSAnOycpXHJcblx0XHRcdHRoaXMuX3N0YXRlID0gdGhpcy5JZ25vcmU7XHJcblx0fTtcclxuXHRDb21tZW50KCkge1xyXG5cdFx0dGhpcy5faSA9IHRoaXMuZGF0YS5pbmRleE9mKFwiKi9cIiwgdGhpcy5faSkgKyAxO1xyXG5cdFx0aWYgKCF0aGlzLl9pKSB0aGlzLl9pID0gdGhpcy5kYXRhLmxlbmd0aDtcclxuXHRcdHRoaXMuX3N0YXRlID0gdGhpcy5TcGFjZTtcclxuXHR9O1xyXG5cdElnbm9yZShjKSB7XHJcblx0XHRpZiAoYyA9PSAneycpIHRoaXMuX2Zsb29yKys7XHJcblx0XHRlbHNlIGlmIChjID09ICd9JyAmJiAhLS10aGlzLl9mbG9vcikge1xyXG5cdFx0XHR0aGlzLl9saXN0ID0gW107XHJcblx0XHRcdHRoaXMuX3N0YXRlID0gdGhpcy5TcGFjZTtcclxuXHRcdH1cclxuXHR9O1xyXG5cdFN0eWxlTmFtZShjKSB7XHJcblx0XHRpZiAoY29uZmlnLmJsYW5rQ2hhcltjXSkge1xyXG5cdFx0XHRpZiAodGhpcy5fc3RhcnQgIT0gdGhpcy5faSlcclxuXHRcdFx0XHR0aGlzLl9saXN0LnB1c2godGhpcy5kYXRhLnN1YnN0cmluZyh0aGlzLl9zdGFydCwgdGhpcy5faSkpO1xyXG5cdFx0XHR0aGlzLl9zdGF0ZSA9IHRoaXMuTmFtZVNwYWNlO1xyXG5cdFx0fSBlbHNlIGlmIChjID09ICd7Jykge1xyXG5cdFx0XHR0aGlzLl9saXN0LnB1c2godGhpcy5kYXRhLnN1YnN0cmluZyh0aGlzLl9zdGFydCwgdGhpcy5faSkpO1xyXG5cdFx0XHR0aGlzLl9zdGFydCA9IHRoaXMuX2kgKyAxO1xyXG5cdFx0XHR0aGlzLkNvbnRlbnQoKTtcclxuXHRcdH0gZWxzZSBpZiAoYyA9PSAnLCcpIHtcclxuXHRcdFx0dGhpcy5fbGlzdC5wdXNoKHRoaXMuZGF0YS5zdWJzdHJpbmcodGhpcy5fc3RhcnQsIHRoaXMuX2kpKTtcclxuXHRcdFx0dGhpcy5fc3RhcnQgPSB0aGlzLl9pICsgMTtcclxuXHRcdFx0dGhpcy5fY29tbWEgPSB0cnVlO1xyXG5cdFx0fSBlbHNlIGlmICgoYyA8ICdhJyB8fCBjID4gJ3onKSAmJiAoYyA8ICdBJyB8fCBjID4gJ1onKSAmJiAoYyA8ICcwJyB8fCBjID4gJzknKSAmJiBjICE9ICcuJyAmJiBjICE9ICcjJyAmJiBjICE9ICctJyAmJlxyXG5cdFx0XHRjICE9ICdfJylcclxuXHRcdFx0dGhpcy5fc3RhdGUgPSB0aGlzLklnbm9yZTtcclxuXHR9O1xyXG5cdE5hbWVTcGFjZShjKSB7XHJcblx0XHRpZiAoYyA9PSAneycpIHtcclxuXHRcdFx0dGhpcy5fc3RhcnQgPSB0aGlzLl9pICsgMTtcclxuXHRcdFx0dGhpcy5Db250ZW50KCk7XHJcblx0XHR9IGVsc2UgaWYgKGMgPT0gJywnKSB7XHJcblx0XHRcdHRoaXMuX2NvbW1hID0gdHJ1ZTtcclxuXHRcdFx0dGhpcy5fc3RhcnQgPSB0aGlzLl9pICsgMTtcclxuXHRcdFx0dGhpcy5fc3RhdGUgPSB0aGlzLlN0eWxlTmFtZTtcclxuXHRcdH0gZWxzZSBpZiAoIWNvbmZpZy5ibGFua0NoYXJbY10pIHtcclxuXHRcdFx0aWYgKHRoaXMuX2NvbW1hKSB7XHJcblx0XHRcdFx0dGhpcy5fc3RhdGUgPSB0aGlzLlN0eWxlTmFtZTtcclxuXHRcdFx0XHR0aGlzLl9zdGFydCA9IHRoaXMuX2ktLTtcclxuXHRcdFx0XHR0aGlzLl9jb21tYSA9IGZhbHNlO1xyXG5cdFx0XHR9IGVsc2UgdGhpcy5fc3RhdGUgPSB0aGlzLklnbm9yZTtcclxuXHRcdH1cclxuXHR9O1xyXG5cdENvbnRlbnQoKSB7XHJcblx0XHR0aGlzLl9pID0gdGhpcy5kYXRhLmluZGV4T2YoJ30nLCB0aGlzLl9pKTtcclxuXHRcdGlmICh0aGlzLl9pID09IC0xKSB0aGlzLl9pID0gdGhpcy5kYXRhLmxlbmd0aDtcclxuXHRcdHZhciBjb250ZW50ID0gdGhpcy5kYXRhLnN1YnN0cmluZyh0aGlzLl9zdGFydCwgdGhpcy5faSk7XHJcblx0XHRmb3IgKHZhciBpID0gdGhpcy5fbGlzdC5sZW5ndGg7IGktLTspXHJcblx0XHRcdHRoaXMucmVzW3RoaXMuX2xpc3RbaV1dID0gKHRoaXMucmVzW3RoaXMuX2xpc3RbaV1dIHx8ICcnKSArIGNvbnRlbnQ7XHJcblx0XHR0aGlzLl9saXN0ID0gW107XHJcblx0XHR0aGlzLl9zdGF0ZSA9IHRoaXMuU3BhY2U7XHJcblx0fVxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///523\n");

/***/ }),

/***/ 524:
/*!**********************************************************!*\
  !*** D:/work/financeForum_app/components/libs/config.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) { /* 配置文件 */\nfunction makeMap(str) {var obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var map = obj,\n  list = str.split(',');\n  for (var i = list.length; i--;) {\n    map[list[i]] = true;}\n  return map;\n}\n// 信任的属性列表，不在列表中的属性将被移除 \nvar trustAttrs = makeMap(\n\"align,allowfullscreen,alt,app-id,appid,apid,author,autoplay,border,cellpadding,cellspacing,class,color,colspan,controls,data-src,dir,face,frameborder,height,href,id,ignore,loop,media,muted,name,path,poster,rowspan,size,span,src,start,style,type,unit-id,unitId,width,xmlns\");\n\n// 信任的标签，将保持标签名不变 \nvar trustTags = makeMap(\n\"a,abbr,ad,audio,b,blockquote,br,code,col,colgroup,dd,del,dl,dt,div,em,fieldset,h1,h2,h3,h4,h5,h6,hr,i,img,ins,label,legend,li,ol,p,q,source,span,strong,sub,sup,table,tbody,td,tfoot,th,thead,tr,title,u,ul,video\" +\n\n\n\",embed,iframe\");\n\n\n// 块级标签，将被转为 div\nvar blockTags = makeMap(\"address,article,aside,body,center,cite,footer,header,html,nav,pre,section\");\n// 被移除的标签（其中 svg 系列标签会被转为图片） \nvar ignoreTags = makeMap(\n\"area,base,basefont,canvas,circle,command,ellipse,frame,head,input,isindex,keygen,line,link,map,meta,param,path,polygon,rect,script,source,svg,textarea,track,use,wbr\");\n\n\n\n\n\n// 只能用 rich-text 显示的标签（其中图片不能预览、不能显示视频、音频等） \nvar richOnlyTags = makeMap(\"a,colgroup,fieldset,legend,picture,table,tbody,td,tfoot,th,thead,tr\");\n// 自闭合标签\nvar selfClosingTags = makeMap(\n\"area,base,basefont,br,col,circle,ellipse,embed,frame,hr,img,input,isindex,keygen,line,link,meta,param,path,polygon,rect,source,track,use,wbr\");\n\n// 空白字符\nvar blankChar = makeMap(\" ,\\xA0,\\t,\\r,\\n,\\f\");\n// 默认的标签样式\nvar userAgentStyles = {\n  a: \"color:#366092;word-break:break-all;padding:1.5px 0 1.5px 0\",\n  address: \"font-style:italic\",\n  big: \"display:inline;font-size:1.2em\",\n  blockquote: \"background-color:#f6f6f6;border-left:3px solid #dbdbdb;color:#6c6c6c;padding:5px 0 5px 10px\",\n  center: \"text-align:center\",\n  cite: \"font-style:italic\",\n  dd: \"margin-left:40px\",\n  img: \"max-width:100%\",\n  mark: \"background-color:yellow\",\n  picture: \"max-width:100%\",\n  pre: \"font-family:monospace;white-space:pre;overflow:scroll\",\n  s: \"text-decoration:line-through\",\n  small: \"display:inline;font-size:0.8em\",\n  u: \"text-decoration:underline\" };\n\nvar screenWidth = wx.getSystemInfoSync().screenWidth;\n\n\n\n\n\n\n\n\n\nblockTags.caption = true;\n\nfunction bubbling(Parser) {\n  for (var i = Parser._STACK.length; i--;) {\n    if (!richOnlyTags[Parser._STACK[i].name])\n    Parser._STACK[i].c = 1;else\n    return false;\n  }\n  return true;\n}\nmodule.exports = {\n  // 高亮处理函数\n  highlight: null,\n  // 处理标签的属性，需要通过组件递归方式显示的标签需要调用 bubbling(Parser)\n  LabelHandler: function LabelHandler(node, Parser) {\n    var attrs = node.attrs,\n    style = Parser.CssHandler.match(node.name, attrs, node) + (attrs.style || '');\n    switch (node.name) {\n      case \"div\":\n      case 'p':\n        if (attrs.align) {\n          style = \"text-align:\".concat(attrs.align, \";\").concat(style);\n          attrs.align = void 0;\n        }\n        break;\n      case \"img\":\n        if (attrs[\"data-src\"]) {\n          attrs.src = attrs.src || attrs[\"data-src\"];\n          attrs[\"data-src\"] = void 0;\n        }\n        if (attrs.width && parseInt(attrs.width) > screenWidth)\n        style += \";height:auto !important\";\n        if (attrs.src && !attrs.ignore) {\n          if (bubbling(Parser)) attrs.i = (Parser._imgNum++).toString();else\n          attrs.ignore = 'T';\n        }\n        break;\n      case 'a':\n      case \"ad\":\n\n      case \"iframe\":\n      case \"embed\":\n\n        bubbling(Parser);\n        break;\n      case \"font\":\n        if (attrs.color) {\n          style = \"color:\".concat(attrs.color, \";\").concat(style);\n          attrs.color = void 0;\n        }\n        if (attrs.face) {\n          style = \"font-family:\".concat(attrs.face, \";\").concat(style);\n          attrs.face = void 0;\n        }\n        if (attrs.size) {\n          var size = parseInt(attrs.size);\n          if (size < 1) size = 1;else\n          if (size > 7) size = 7;\n          var map = [\"xx-small\", \"x-small\", \"small\", \"medium\", \"large\", \"x-large\", \"xx-large\"];\n          style = \"font-size:\".concat(map[size - 1], \";\").concat(style);\n          attrs.size = void 0;\n        }\n        break;\n      case \"video\":\n      case \"audio\":\n        if (attrs.id) Parser[\"_\".concat(node.name, \"Num\")]++;else\n        attrs.id = node.name + ++Parser[\"_\".concat(node.name, \"Num\")];\n        if (node.name == \"video\") {\n          if (attrs.width) {\n            style = \"width:\".concat(parseFloat(attrs.width) + attrs.width.includes('%') ? '%' : \"px\", \";\").concat(style);\n            attrs.width = void 0;\n          }\n          if (attrs.height) {\n            style = \"height:\".concat(parseFloat(attrs.height) + attrs.height.includes('%') ? '%' : \"px\", \";\").concat(style);\n            attrs.height = void 0;\n          }\n          if (Parser._videoNum > 3) node.lazyLoad = true;\n        }\n        attrs.source = [];\n        if (attrs.src) attrs.source.push(attrs.src);\n        if (!attrs.controls && !attrs.autoplay)\n        __f__(\"warn\", \"\\u5B58\\u5728\\u6CA1\\u6709 controls \\u5C5E\\u6027\\u7684 \".concat(node.name, \" \\u6807\\u7B7E\\uFF0C\\u53EF\\u80FD\\u5BFC\\u81F4\\u65E0\\u6CD5\\u64AD\\u653E\"), node, \" at components\\\\libs\\\\config.js:147\");\n        bubbling(Parser);\n        break;\n      case \"source\":\n        var i,parent = Parser._STACK[Parser._STACK.length - 1];\n        if (!parent || !attrs.src) break;\n        if (parent.name == \"video\" || parent.name == \"audio\")\n        parent.attrs.source.push(attrs.src);else\n        {\n          var i,media = attrs.media;\n          if (parent.name == \"picture\" && !parent.attrs.src && (!media || media.includes(\"px\") && (\n          (i = media.indexOf(\"min-width\")) != -1 && (i = media.indexOf(':', i + 8)) != -1 &&\n          screenWidth > parseInt(media.substring(i + 1)) ||\n          (i = media.indexOf(\"max-width\")) != -1 && (i = media.indexOf(':', i + 8)) != -1 &&\n          screenWidth < parseInt(media.substring(i + 1)))))\n          parent.attrs.src = attrs.src;\n        }}\n\n    // 压缩 style\n    var styles = style.split(';'),\n    compressed = {};\n    style = '';\n    for (var i = 0, len = styles.length; i < len; i++) {\n      var info = styles[i].split(':');\n      if (info.length < 2) continue;\n      var key = info[0].trim().toLowerCase(),\n      value = info.slice(1).join(':').trim();\n      // 填充链接\n      if (value.includes(\"url\")) {\n        var j = value.indexOf('(');\n        if (j++ != -1) {\n          while (value[j] == '\"' || value[j] == \"'\" || blankChar[value[j]]) {j++;}\n          if (value[j] == '/') {\n            if (value[j + 1] == '/') value = value.substring(0, j) + Parser._protocol + ':' + value.substring(j);else\n            if (Parser._domain) value = value.substring(0, j) + Parser._domain + value.substring(j);\n          }\n        }\n      }\n      // 转换 rpx\n      else if (value.includes(\"rpx\"))\n        value = value.replace(/[0-9.]*rpx/g, function ($) {return parseFloat($) * screenWidth / 750 + \"px\";});\n      if (value.includes(\"-webkit\") || value.includes(\"-moz\") || value.includes(\"-ms\") || value.includes(\"-o\") || value.includes(\n      \"safe\"))\n      style += \";\".concat(key, \":\").concat(value);else\n      if (!compressed[key] || value.includes(\"import\") || !compressed[key].includes(\"import\"))\n      compressed[key] = value;\n    }\n    if (node.name == \"img\" && compressed.width && compressed.width.includes(\"%\") && parseInt(compressed.width) >\n    screenWidth)\n    compressed.height = \"auto !important\";\n    for (var key in compressed) {\n      style += \";\".concat(key, \":\").concat(compressed[key]);}\n    style = style.substr(1);\n    if (style) attrs.style = style;\n    if (Parser._useAnchor && attrs.id) bubbling(Parser);\n  },\n  trustAttrs: trustAttrs,\n  trustTags: trustTags,\n  blockTags: blockTags,\n  ignoreTags: ignoreTags,\n  selfClosingTags: selfClosingTags,\n  blankChar: blankChar,\n  userAgentStyles: userAgentStyles,\n  screenWidth: screenWidth };\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///524\n");

/***/ }),

/***/ 525:
/*!****************************************************************!*\
  !*** D:/work/financeForum_app/components/libs/MpHtmlParser.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;} /*\r\n将 html 解析为适用于小程序 rich-text 的 DOM 结构\r\ngithub：https://github.com/jin-yufeng/Parser\r\ndocs：https://jin-yufeng.github.io/Parser\r\nauthor：JinYufeng\r\nnvar config = __webpack_require__(/*! ./config.js */ 524);\nvar blankChar = config.blankChar;\nvar CssHandler = __webpack_require__(/*! ./CssHandler.js */ 523);\nvar emoji; // emoji 补丁包 https://jin-yufeng.github.io/Parser/#/instructions?id=emoji\nvar MpHtmlParser = /*#__PURE__*/function () {\n  function MpHtmlParser(data) {var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};_classCallCheck(this, MpHtmlParser);\n    this.CssHandler = new CssHandler(options.tagStyle);\n    this.data = data;\n    this.DOM = [];\n    this._attrName = '';\n    this._attrValue = '';\n    this._attrs = {};\n    this._domain = options.domain;\n    this._protocol = this._domain && this._domain.includes(\"://\") ? this._domain.split(\"://\")[0] : \"http\";\n    this._i = 0;\n    this._start = 0;\n    this._state = this.Text;\n    this._STACK = [];\n    this._tagName = '';\n    this._audioNum = 0;\n    this._imgNum = 0;\n    this._videoNum = 0;\n    this._useAnchor = options.useAnchor;\n    this._pre = false;\n  }_createClass(MpHtmlParser, [{ key: \"parse\", value: function parse()\n    {\n      if (emoji) this.data = emoji.parseEmoji(this.data);\n      // 高亮处理\n      if (config.highlight)\n      this.data = this.data.replace(/<[pP][rR][eE]([\\s\\S]*?)>([\\s\\S]+?)<\\/[pP][rR][eE][\\s\\S]*?>/g, function ($, $1, $2) {return \"<pre\".concat(\n        $1, \">\").concat(config.highlight($2, $1), \"</pre>\");});\n      this.data = this.CssHandler.getStyle(this.data);\n      for (var len = this.data.length; this._i < len; this._i++) {\n        this._state(this.data[this._i]);}\n      if (this._state == this.Text) this.setText();\n      while (this._STACK.length) {this.popNode(this._STACK.pop());}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      if (this.DOM.length) this.DOM[0].PoweredBy = \"Parser\";\n      return this.DOM;\n    } }, { key: \"setAttr\",\n    // 设置属性\n    value: function setAttr() {\n      if (config.trustAttrs[this._attrName]) {\n        if (this._attrName == \"src\" && this._attrValue[0] == '/') {\n          if (this._attrValue[1] == '/') this._attrValue = this._protocol + ':' + this._attrValue;else\n          if (this._domain) this._attrValue = this._domain + this._attrValue;\n        }\n        this._attrs[this._attrName] = this._attrValue ? this._attrValue : this._attrName == \"src\" || this._attrName ==\n        \"alt\" ? '' : 'T';\n      }\n      this._attrValue = '';\n      while (blankChar[this.data[this._i]]) {this._i++;}\n      if (this.checkClose()) this.setNode();else\n      this._state = this.AttrName;\n    } }, { key: \"setText\",\n    // 设置文本节点\n    value: function setText() {\n      var text = this.getSelection();\n      if (!text) return;\n      if (!this._pre) {\n        // 移除空白符\n        for (var tmp = [], i = text.length, has = false, c; c = text[--i];) {\n          if (!blankChar[c] && (has = true) || !blankChar[tmp[0]] && (c = ' ')) tmp.unshift(c);}\n        if (!has) return;\n        text = tmp.join('');\n      }\n      // 处理实体\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      var i = text.indexOf('&'),\n      j,u,decode;\n      while (i != -1) {\n        j = text.indexOf(';', i + 2);\n        if (j == -1) break;\n        if (text[i + 1] == '#') {\n          u = parseInt((text[i + 2] == 'x' ? '0' : '') + text.substring(i + 2, j));\n          if (!isNaN(u)) text = text.substring(0, i) + String.fromCharCode(u) + text.substring(j + 1);\n        } else {\n          u = text.substring(i + 1, j);\n\n          if (u == \"nbsp\") text = text.substring(0, i) + \"\\xA0\" + text.substring(j + 1); // 解决连续 &nbsp; 失效的问题\n          else if (u != \"lt\" && u != \"gt\" && u != \"amp\" && u != \"ensp\" && u != \"emsp\") decode = true;\n\n\n\n\n        }\n        i = text.indexOf('&', i + 1);\n      }\n      var slibings = this._STACK.length ? this._STACK[this._STACK.length - 1].children : this.DOM;\n      if (slibings.length && slibings[slibings.length - 1].type == \"text\") {\n        slibings[slibings.length - 1].text += text;\n        if (decode) slibings[slibings.length - 1].decode = true;\n      } else\n      slibings.push({\n        type: \"text\",\n        text: text,\n        decode: decode });\n\n    } }, { key: \"setNode\",\n    // 设置元素节点\n    value: function setNode() {\n      var slibings = this._STACK.length ? this._STACK[this._STACK.length - 1].children : this.DOM;\n      var node = {\n        name: this._tagName.toLowerCase(),\n        attrs: this._attrs };\n\n      config.LabelHandler(node, this);\n      this._attrs = {};\n      if (this.data[this._i] == '>') {\n        if (!config.selfClosingTags[this._tagName]) {\n          if (config.ignoreTags[node.name]) {\n            var j = this._i;\n            // 处理要被移除的标签\n            while (this._i < this.data.length) {\n              (this._i = this.data.indexOf(\"</\", this._i + 1)) == -1 ? this._i = this.data.length : null;\n              this._i += 2;\n              this._start = this._i;\n              while (!blankChar[this.data[this._i]] && this.data[this._i] != '>' && this.data[this._i] != '/') {this._i++;}\n              if (this.data.substring(this._start, this._i).toLowerCase() == node.name) {\n                this._i = this.data.indexOf('>', this._i);\n                if (this._i == -1) this._i = this.data.length;else\n                this._start = this._i + 1;\n                this._state = this.Text;\n                // 处理 svg \n                if (node.name == \"svg\") {\n                  var src = this.data.substring(j, this._i + 1);\n                  if (!node.attrs.xmlns) src = \" xmlns=\\\"http://www.w3.org/2000/svg\\\"\" + src;\n                  this._i = j;\n                  while (this.data[j] != '<') {j--;}\n                  src = this.data.substring(j, this._i) + src;\n                  this._i = this._start - 1;\n                  node.name = \"img\";\n                  node.attrs = {\n                    src: \"data:image/svg+xml;utf8,\" + src.replace(/#/g, \"%23\"),\n                    ignore: 'T' };\n\n                  slibings.push(node);\n                }\n                break;\n              }\n            }\n            return;\n          } else this._STACK.push(node);\n          node.children = [];\n        }\n      } else this._i++;\n      this._start = this._i + 1;\n      this._state = this.Text;\n      if (!config.ignoreTags[node.name]) {\n        // 检查空白符是否有效\n        if (node.name == \"pre\" || node.attrs.style && node.attrs.style.includes(\"white-space\") && node.attrs.style.includes(\n        \"pre\")) {\n          this._pre = true;\n          node.pre = true;\n        }\n        slibings.push(node);\n      }\n    } }, { key: \"popNode\",\n    // 标签出栈处理\n    value: function popNode(node) {\n      // 替换一些标签名\n      if (node.name == \"picture\") {\n        node.name = \"img\";\n        if (!node.attrs.src && node.children.length && node.children[0].name == \"img\")\n        node.attrs.src = node.children[0].attrs.src;\n        if (node.attrs.src && !node.attrs.ignore)\n        node.attrs.i = (this._imgNum++).toString();\n        return node.children = void 0;\n      }\n      if (config.blockTags[node.name]) node.name = \"div\";else\n      if (!config.trustTags[node.name]) node.name = \"span\";\n      // 空白符处理\n      if (node.pre) {\n        this._pre = false;\n        node.pre = undefined;\n        for (var i = this._STACK.length; i--;) {\n          if (this._STACK[i].pre)\n          this._pre = true;}\n      }\n      // 处理列表\n      if (node.c) {\n        if (node.name == \"ul\") {\n          var floor = 1;\n          for (var i = this._STACK.length; i--;) {\n            if (this._STACK[i].name == \"ul\") floor++;}\n          if (floor != 1)\n          for (i = node.children.length; i--;) {\n            node.children[i].floor = floor;}\n        } else if (node.name == \"ol\") {var\n          convert = function convert(num, type) {\n            if (type == 'a') return String.fromCharCode(97 + (num - 1) % 26);\n            if (type == 'A') return String.fromCharCode(65 + (num - 1) % 26);\n            if (type == 'i' || type == 'I') {\n              num = (num - 1) % 99 + 1;\n              var one = ['I', \"II\", \"III\", \"IV\", 'V', \"VI\", \"VII\", \"VIII\", \"IX\"],\n              ten = ['X', \"XX\", \"XXX\", \"XL\", 'L', \"LX\", \"LXX\", \"LXXX\", \"XC\"],\n              res = (ten[Math.floor(num / 10) - 1] || '') + (one[num % 10 - 1] || '');\n              if (type == 'i') return res.toLowerCase();\n              return res;\n            }\n            return num;\n          };\n          for (var i = 0, num = 1, child; child = node.children[i++];) {\n            if (child.name == \"li\") {\n              child.type = \"ol\";\n              child.num = convert(num++, node.attrs.type) + '.';\n            }}\n        }\n      }\n      // 处理表格的边框\n      if (node.name == \"table\") {var\n\n\n\n\n\n        setBorder = function setBorder(elem) {\n          if (elem.name == \"th\" || elem.name == \"td\") {\n            if (node.attrs.border)\n            elem.attrs.style = \"border:\".concat(node.attrs.border, \"px solid gray;\").concat(elem.attrs.style || '');\n            if (node.attrs.hasOwnProperty(\"cellpadding\"))\n            elem.attrs.style = \"padding:\".concat(node.attrs.cellpadding, \"px;\").concat(elem.attrs.style || '');\n            return;\n          }\n          if (elem.type == \"text\") return;\n          for (var i = 0; i < (elem.children || []).length; i++) {\n            setBorder(elem.children[i]);}\n        };if (node.attrs.border) node.attrs.style = \"border:\".concat(node.attrs.border, \"px solid gray;\").concat(node.attrs.style || '');if (node.attrs.hasOwnProperty(\"cellspacing\")) node.attrs.style = \"border-spacing:\".concat(node.attrs.cellspacing, \"px;\").concat(node.attrs.style || '');\n        if (node.attrs.border || node.attrs.hasOwnProperty(\"cellpadding\"))\n        for (var i = 0; i < node.children.length; i++) {\n          setBorder(node.children[i]);}\n      }\n      // 后代选择器处理\n      this.CssHandler.pop && this.CssHandler.pop(node);\n    } }, { key: \"checkClose\",\n    // 工具函数\n    value: function checkClose() {\n      if (this.data[this._i] == '>' || this.data[this._i] == '/' && this.data[this._i + 1] == '>')\n      return true;\n      return false;\n    } }, { key: \"getSelection\", value: function getSelection(\n    trim) {\n      var str = this._start == this._i ? '' : this.data.substring(this._start, this._i);\n      while (trim && (blankChar[this.data[++this._i]] || (this._i--, false))) {;}\n      this._start = this._i + 1;\n      return str;\n    } }, { key: \"Text\",\n    // 状态机\n    value: function Text(c) {\n      if (c == '<') {\n        var next = this.data[this._i + 1];\n        if (next >= 'a' && next <= 'z' || next >= 'A' && next <= 'Z') {\n          this.setText();\n          this._state = this.TagName;\n        } else if (next == '/') {\n          this.setText();\n          this._i++;\n          next = this.data[this._i + 1];\n          if (next >= 'a' && next <= 'z' || next >= 'A' && next <= 'Z') {\n            this._start = this._i + 1;\n            this._state = this.EndTag;\n          } else\n          this._state = this.Comment;\n        } else if (next == '!') {\n          this.setText();\n          this._state = this.Comment;\n        }\n      }\n    } }, { key: \"Comment\", value: function Comment()\n    {\n      if (this.data.substring(this._i + 1, this._i + 3) == \"--\" || this.data.substring(this._i + 1, this._i + 7) ==\n      \"[CDATA[\") {\n        this._i = this.data.indexOf(\"-->\", this._i + 1);\n        if (this._i == -1) return this._i = this.data.length;else\n        this._i = this._i + 2;\n      } else\n      (this._i = this.data.indexOf('>', this._i + 1)) == -1 ? this._i = this.data.length : null;\n      this._start = this._i + 1;\n      this._state = this.Text;\n    } }, { key: \"TagName\", value: function TagName(\n    c) {\n      if (blankChar[c]) {\n        this._tagName = this.getSelection(true);\n        if (this.checkClose()) this.setNode();else\n        this._state = this.AttrName;\n      } else if (this.checkClose()) {\n        this._tagName = this.getSelection();\n        this.setNode();\n      }\n    } }, { key: \"AttrName\", value: function AttrName(\n    c) {\n      if (blankChar[c]) {\n        this._attrName = this.getSelection(true).toLowerCase();\n        if (this.data[this._i] == '=') {\n          while (blankChar[this.data[++this._i]]) {;}\n          this._start = this._i--;\n          this._state = this.AttrValue;\n        } else this.setAttr();\n      } else if (c == '=') {\n        this._attrName = this.getSelection().toLowerCase();\n        while (blankChar[this.data[++this._i]]) {;}\n        this._start = this._i--;\n        this._state = this.AttrValue;\n      } else if (this.checkClose()) {\n        this._attrName = this.getSelection().toLowerCase();\n        this.setAttr();\n      }\n    } }, { key: \"AttrValue\", value: function AttrValue(\n    c) {\n      if (c == '\"' || c == \"'\") {\n        this._start++;\n        if ((this._i = this.data.indexOf(c, this._i + 1)) == -1) return this._i = this.data.length;\n      } else\n      for (; !blankChar[this.data[this._i]] && this.data[this._i] != '>'; this._i++) {;}\n      this._attrValue = this.getSelection();\n      while (this._attrValue.includes(\"&quot;\")) {this._attrValue = this._attrValue.replace(\"&quot;\", '\"');}\n      this.setAttr();\n    } }, { key: \"EndTag\", value: function EndTag(\n    c) {\n      if (blankChar[c] || c == '>' || c == '/') {\n        var name = this.getSelection().toLowerCase();\n        var flag = false;\n        for (var i = this._STACK.length; i--;) {\n          if (this._STACK[i].name == name) {\n            flag = true;\n            break;\n          }}\n        if (flag) {\n          var node;\n          while (flag) {\n            node = this._STACK.pop();\n            if (node.name == name) flag = false;\n            this.popNode(node);\n          }\n        } else if (name == 'p' || name == \"br\") {\n          var slibings = this._STACK.length ? this._STACK[this._STACK.length - 1].children : this.DOM;\n          slibings.push({\n            name: name,\n            attrs: {} });\n\n        }\n        this._i = this.data.indexOf('>', this._i);\n        if (this._i == -1) this._i = this.data.length;else\n        this._state = this.Text;\n      }\n    } }]);return MpHtmlParser;}();\n;\nmodule.exports = MpHtmlParser;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy9saWJzL01wSHRtbFBhcnNlci5qcyJdLCJuYW1lcyI6WyJjb25maWciLCJyZXF1aXJlIiwiYmxhbmtDaGFyIiwiQ3NzSGFuZGxlciIsImVtb2ppIiwiTXBIdG1sUGFyc2VyIiwiZGF0YSIsIm9wdGlvbnMiLCJ0YWdTdHlsZSIsIkRPTSIsIl9hdHRyTmFtZSIsIl9hdHRyVmFsdWUiLCJfYXR0cnMiLCJfZG9tYWluIiwiZG9tYWluIiwiX3Byb3RvY29sIiwiaW5jbHVkZXMiLCJzcGxpdCIsIl9pIiwiX3N0YXJ0IiwiX3N0YXRlIiwiVGV4dCIsIl9TVEFDSyIsIl90YWdOYW1lIiwiX2F1ZGlvTnVtIiwiX2ltZ051bSIsIl92aWRlb051bSIsIl91c2VBbmNob3IiLCJ1c2VBbmNob3IiLCJfcHJlIiwicGFyc2VFbW9qaSIsImhpZ2hsaWdodCIsInJlcGxhY2UiLCIkIiwiJDEiLCIkMiIsImdldFN0eWxlIiwibGVuIiwibGVuZ3RoIiwic2V0VGV4dCIsInBvcE5vZGUiLCJwb3AiLCJQb3dlcmVkQnkiLCJ0cnVzdEF0dHJzIiwiY2hlY2tDbG9zZSIsInNldE5vZGUiLCJBdHRyTmFtZSIsInRleHQiLCJnZXRTZWxlY3Rpb24iLCJ0bXAiLCJpIiwiaGFzIiwiYyIsInVuc2hpZnQiLCJqb2luIiwiaW5kZXhPZiIsImoiLCJ1IiwiZGVjb2RlIiwicGFyc2VJbnQiLCJzdWJzdHJpbmciLCJpc05hTiIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInNsaWJpbmdzIiwiY2hpbGRyZW4iLCJ0eXBlIiwicHVzaCIsIm5vZGUiLCJuYW1lIiwidG9Mb3dlckNhc2UiLCJhdHRycyIsIkxhYmVsSGFuZGxlciIsInNlbGZDbG9zaW5nVGFncyIsImlnbm9yZVRhZ3MiLCJzcmMiLCJ4bWxucyIsImlnbm9yZSIsInN0eWxlIiwicHJlIiwidG9TdHJpbmciLCJibG9ja1RhZ3MiLCJ0cnVzdFRhZ3MiLCJ1bmRlZmluZWQiLCJmbG9vciIsImNvbnZlcnQiLCJudW0iLCJvbmUiLCJ0ZW4iLCJyZXMiLCJNYXRoIiwiY2hpbGQiLCJzZXRCb3JkZXIiLCJlbGVtIiwiYm9yZGVyIiwiaGFzT3duUHJvcGVydHkiLCJjZWxscGFkZGluZyIsImNlbGxzcGFjaW5nIiwidHJpbSIsInN0ciIsIm5leHQiLCJUYWdOYW1lIiwiRW5kVGFnIiwiQ29tbWVudCIsIkF0dHJWYWx1ZSIsInNldEF0dHIiLCJmbGFnIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IjhwQkFBQTs7Ozs7O0FBTUEsSUFBTUEsTUFBTSxHQUFHQyxtQkFBTyxDQUFDLHNCQUFELENBQXRCO0FBQ0EsSUFBTUMsU0FBUyxHQUFHRixNQUFNLENBQUNFLFNBQXpCO0FBQ0EsSUFBTUMsVUFBVSxHQUFHRixtQkFBTyxDQUFDLDBCQUFELENBQTFCO0FBQ0EsSUFBSUcsS0FBSixDLENBQVc7SUFDTEMsWTtBQUNMLHdCQUFZQyxJQUFaLEVBQWdDLEtBQWRDLE9BQWMsdUVBQUosRUFBSTtBQUMvQixTQUFLSixVQUFMLEdBQWtCLElBQUlBLFVBQUosQ0FBZUksT0FBTyxDQUFDQyxRQUF2QixDQUFsQjtBQUNBLFNBQUtGLElBQUwsR0FBWUEsSUFBWjtBQUNBLFNBQUtHLEdBQUwsR0FBVyxFQUFYO0FBQ0EsU0FBS0MsU0FBTCxHQUFpQixFQUFqQjtBQUNBLFNBQUtDLFVBQUwsR0FBa0IsRUFBbEI7QUFDQSxTQUFLQyxNQUFMLEdBQWMsRUFBZDtBQUNBLFNBQUtDLE9BQUwsR0FBZU4sT0FBTyxDQUFDTyxNQUF2QjtBQUNBLFNBQUtDLFNBQUwsR0FBaUIsS0FBS0YsT0FBTCxJQUFnQixLQUFLQSxPQUFMLENBQWFHLFFBQWIsQ0FBc0IsS0FBdEIsQ0FBaEIsR0FBK0MsS0FBS0gsT0FBTCxDQUFhSSxLQUFiLENBQW1CLEtBQW5CLEVBQTBCLENBQTFCLENBQS9DLEdBQThFLE1BQS9GO0FBQ0EsU0FBS0MsRUFBTCxHQUFVLENBQVY7QUFDQSxTQUFLQyxNQUFMLEdBQWMsQ0FBZDtBQUNBLFNBQUtDLE1BQUwsR0FBYyxL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Q0FBVWlELE9BQVYsQ0FBa0IsR0FBbEIsRUFBdUIsS0FBS3JDLEVBQTVCLENBQVY7QUFDQSxZQUFJLEtBQUtBLEVBQUwsSUFBVyxDQUFDLENBQWhCLEVBQW1CLEtBQUtBLEVBQUwsR0FBVSxLQUFLWixJQUFMLENBQVVnQyxNQUFwQixDQUFuQjtBQUNLLGFBQUtsQixNQUFMLEdBQWMsS0FBS0MsSUFBbkI7QUFDTDtBQUNELEs7QUFDRDtBQUNEc0YsTUFBTSxDQUFDQyxPQUFQLEdBQWlCdkcsWUFBakIiLCJmaWxlIjoiNTI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICDlsIYgaHRtbCDop6PmnpDkuLrpgILnlKjkuo7lsI/nqIvluo8gcmljaC10ZXh0IOeahCBET00g57uT5p6EXHJcbiAgZ2l0aHVi77yaaHR0cHM6Ly9naXRodWIuY29tL2ppbi15dWZlbmcvUGFyc2VyXHJcbiAgZG9jc++8mmh0dHBzOi8vamluLXl1ZmVuZy5naXRodWIuaW8vUGFyc2VyXHJcbiAgYXV0aG9y77yaSmluWXVmZW5nXHJcbiovXHJcbmNvbnN0IGNvbmZpZyA9IHJlcXVpcmUoXCIuL2NvbmZpZy5qc1wiKTtcclxuY29uc3QgYmxhbmtDaGFyID0gY29uZmlnLmJsYW5rQ2hhcjtcclxuY29uc3QgQ3NzSGFuZGxlciA9IHJlcXVpcmUoXCIuL0Nzc0hhbmRsZXIuanNcIik7XHJcbnZhciBlbW9qaTsgLy8gZW1vamkg6KGl5LiB5YyFIGh0dHBzOi8vamluLXl1ZmVuZy5naXRodWIuaW8vUGFyc2VyLyMvaW5zdHJ1Y3Rpb25zP2lkPWVtb2ppXHJcbmNsYXNzIE1wSHRtbFBhcnNlciB7XHJcblx0Y29uc3RydWN0b3IoZGF0YSwgb3B0aW9ucyA9IHt9KSB7XHJcblx0XHR0aGlzLkNzc0hhbmRsZXIgPSBuZXcgQ3NzSGFuZGxlcihvcHRpb25zLnRhZ1N0eWxlKTtcclxuXHRcdHRoaXMuZGF0YSA9IGRhdGE7XHJcblx0XHR0aGlzLkRPTSA9IFtdO1xyXG5cdFx0dGhpcy5fYXR0ck5hbWUgPSAnJztcclxuXHRcdHRoaXMuX2F0dHJWYWx1ZSA9ICcnO1xyXG5cdFx0dGhpcy5fYXR0cnMgPSB7fTtcclxuXHRcdHRoaXMuX2RvbWFpbiA9IG9wdGlvbnMuZG9tYWluO1xyXG5cdFx0dGhpcy5fcHJvdG9jb2wgPSB0aGlzLl9kb21haW4gJiYgdGhpcy5fZG9tYWluLmluY2x1ZGVzKFwiOi8vXCIpID8gdGhpcy5fZG9tYWluLnNwbGl0KFwiOi8vXCIpWzBdIDogXCJodHRwXCI7XHJcblx0XHR0aGlzLl9pID0gMDtcclxuXHRcdHRoaXMuX3N0YXJ0ID0gMDtcclxuXHRcdHRoaXMuX3N0YXRlID0gdGhpcy5UZXh0O1xyXG5cdFx0dGhpcy5fU1RBQ0sgPSBbXTtcclxuXHRcdHRoaXMuX3RhZ05hbWUgPSAnJztcclxuXHRcdHRoaXMuX2F1ZGlvTnVtID0gMDtcclxuXHRcdHRoaXMuX2ltZ051bSA9IDA7XHJcblx0XHR0aGlzLl92aWRlb051bSA9IDA7XHJcblx0XHR0aGlzLl91c2VBbmNob3IgPSBvcHRpb25zLnVzZUFuY2hvcjtcclxuXHRcdHRoaXMuX3ByZSA9IGZhbHNlO1xyXG5cdH07XHJcblx0cGFyc2UoKSB7XHJcblx0XHRpZiAoZW1vamkpIHRoaXMuZGF0YSA9IGVtb2ppLnBhcnNlRW1vamkodGhpcy5kYXRhKTtcclxuXHRcdC8vIOmrmOS6ruWkhOeQhlxyXG5cdFx0aWYgKGNvbmZpZy5oaWdobGlnaHQpXHJcblx0XHRcdHRoaXMuZGF0YSA9IHRoaXMuZGF0YS5yZXBsYWNlKC88W3BQXVtyUl1bZUVdKFtcXHNcXFNdKj8pPihbXFxzXFxTXSs/KTxcXC9bcFBdW3JSXVtlRV1bXFxzXFxTXSo/Pi9nLCAoJCwgJDEsICQyKSA9PlxyXG5cdFx0XHRcdGA8cHJlJHskMX0+JHtjb25maWcuaGlnaGxpZ2h0KCQyLCAkMSl9PC9wcmU+YCk7XHJcblx0XHR0aGlzLmRhdGEgPSB0aGlzLkNzc0hhbmRsZXIuZ2V0U3R5bGUodGhpcy5kYXRhKTtcclxuXHRcdGZvciAodmFyIGxlbiA9IHRoaXMuZGF0YS5sZW5ndGg7IHRoaXMuX2kgPCBsZW47IHRoaXMuX2krKylcclxuXHRcdFx0dGhpcy5fc3RhdGUodGhpcy5kYXRhW3RoaXMuX2ldKTtcclxuXHRcdGlmICh0aGlzLl9zdGF0ZSA9PSB0aGlzLlRleHQpIHRoaXMuc2V0VGV4dCgpO1xyXG5cdFx0d2hpbGUgKHRoaXMuX1NUQUNLLmxlbmd0aCkgdGhpcy5wb3BOb2RlKHRoaXMuX1NUQUNLLnBvcCgpKTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHRcdGlmICh0aGlzLkRPTS5sZW5ndGgpIHRoaXMuRE9NWzBdLlBvd2VyZWRCeSA9IFwiUGFyc2VyXCI7XHJcblx0XHRyZXR1cm4gdGhpcy5ET007XHJcblx0fTtcclxuXHQvLyDorr7nva7lsZ7mgKdcclxuXHRzZXRBdHRyKCkge1xyXG5cdFx0aWYgKGNvbmZpZy50cnVzdEF0dHJzW3RoaXMuX2F0dHJOYW1lXSkge1xyXG5cdFx0XHRpZiAodGhpcy5fYXR0ck5hbWUgPT0gXCJzcmNcIiAmJiB0aGlzLl9hdHRyVmFsdWVbMF0gPT0gJy8nKSB7XHJcblx0XHRcdFx0aWYgKHRoaXMuX2F0dHJWYWx1ZVsxXSA9PSAnLycpIHRoaXMuX2F0dHJWYWx1ZSA9IHRoaXMuX3Byb3RvY29sICsgJzonICsgdGhpcy5fYXR0clZhbHVlO1xyXG5cdFx0XHRcdGVsc2UgaWYgKHRoaXMuX2RvbWFpbikgdGhpcy5fYXR0clZhbHVlID0gdGhpcy5fZG9tYWluICsgdGhpcy5fYXR0clZhbHVlO1xyXG5cdFx0XHR9XHJcblx0XHRcdHRoaXMuX2F0dHJzW3RoaXMuX2F0dHJOYW1lXSA9ICh0aGlzLl9hdHRyVmFsdWUgPyB0aGlzLl9hdHRyVmFsdWUgOiAodGhpcy5fYXR0ck5hbWUgPT0gXCJzcmNcIiB8fCB0aGlzLl9hdHRyTmFtZSA9PVxyXG5cdFx0XHRcdFwiYWx0XCIgPyAnJyA6ICdUJykpO1xyXG5cdFx0fVxyXG5cdFx0dGhpcy5fYXR0clZhbHVlID0gJyc7XHJcblx0XHR3aGlsZSAoYmxhbmtDaGFyW3RoaXMuZGF0YVt0aGlzLl9pXV0pIHRoaXMuX2krKztcclxuXHRcdGlmICh0aGlzLmNoZWNrQ2xvc2UoKSkgdGhpcy5zZXROb2RlKCk7XHJcblx0XHRlbHNlIHRoaXMuX3N0YXRlID0gdGhpcy5BdHRyTmFtZTtcclxuXHR9O1xyXG5cdC8vIOiuvue9ruaWh+acrOiKgueCuVxyXG5cdHNldFRleHQoKSB7XHJcblx0XHR2YXIgdGV4dCA9IHRoaXMuZ2V0U2VsZWN0aW9uKCk7XHJcblx0XHRpZiAoIXRleHQpIHJldHVybjtcclxuXHRcdGlmICghdGhpcy5fcHJlKSB7XHJcblx0XHRcdC8vIOenu+mZpOepuueZveesplxyXG5cdFx0XHRmb3IgKHZhciB0bXAgPSBbXSwgaSA9IHRleHQubGVuZ3RoLCBoYXMgPSBmYWxzZSwgYzsgYyA9IHRleHRbLS1pXTspXHJcblx0XHRcdFx0aWYgKCghYmxhbmtDaGFyW2NdICYmIChoYXMgPSB0cnVlKSkgfHwgKCFibGFua0NoYXJbdG1wWzBdXSAmJiAoYyA9ICcgJykpKSB0bXAudW5zaGlmdChjKTtcclxuXHRcdFx0aWYgKCFoYXMpIHJldHVybjtcclxuXHRcdFx0dGV4dCA9IHRtcC5qb2luKCcnKTtcclxuXHRcdH1cclxuXHRcdC8vIOWkhOeQhuWunuS9k1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblx0XHR2YXIgaSA9IHRleHQuaW5kZXhPZignJicpLFxyXG5cdFx0XHRqLCB1LCBkZWNvZGU7XHJcblx0XHR3aGlsZSAoaSAhPSAtMSkge1xyXG5cdFx0XHRqID0gdGV4dC5pbmRleE9mKCc7JywgaSArIDIpO1xyXG5cdFx0XHRpZiAoaiA9PSAtMSkgYnJlYWs7XHJcblx0XHRcdGlmICh0ZXh0W2kgKyAxXSA9PSAnIycpIHtcclxuXHRcdFx0XHR1ID0gcGFyc2VJbnQoKHRleHRbaSArIDJdID09ICd4JyA/ICcwJyA6ICcnKSArIHRleHQuc3Vic3RyaW5nKGkgKyAyLCBqKSk7XHJcblx0XHRcdFx0aWYgKCFpc05hTih1KSkgdGV4dCA9IHRleHQuc3Vic3RyaW5nKDAsIGkpICsgU3RyaW5nLmZyb21DaGFyQ29kZSh1KSArIHRleHQuc3Vic3RyaW5nKGogKyAxKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR1ID0gdGV4dC5zdWJzdHJpbmcoaSArIDEsIGopO1xyXG5cclxuXHRcdFx0XHRpZiAodSA9PSBcIm5ic3BcIikgdGV4dCA9IHRleHQuc3Vic3RyaW5nKDAsIGkpICsgJ1xcdTAwQTAnICsgdGV4dC5zdWJzdHJpbmcoaiArIDEpOyAvLyDop6PlhrPov57nu60gJm5ic3A7IOWkseaViOeahOmXrumimFxyXG5cdFx0XHRcdGVsc2UgaWYgKHUgIT0gXCJsdFwiICYmIHUgIT0gXCJndFwiICYmIHUgIT0gXCJhbXBcIiAmJiB1ICE9IFwiZW5zcFwiICYmIHUgIT0gXCJlbXNwXCIpIGRlY29kZSA9IHRydWU7XHJcblxyXG5cclxuXHJcblxyXG5cdFx0XHR9XHJcblx0XHRcdGkgPSB0ZXh0LmluZGV4T2YoJyYnLCBpICsgMSk7XHJcblx0XHR9XHJcblx0XHR2YXIgc2xpYmluZ3MgPSB0aGlzLl9TVEFDSy5sZW5ndGggPyB0aGlzLl9TVEFDS1t0aGlzLl9TVEFDSy5sZW5ndGggLSAxXS5jaGlsZHJlbiA6IHRoaXMuRE9NO1xyXG5cdFx0aWYgKHNsaWJpbmdzLmxlbmd0aCAmJiBzbGliaW5nc1tzbGliaW5ncy5sZW5ndGggLSAxXS50eXBlID09IFwidGV4dFwiKSB7XHJcblx0XHRcdHNsaWJpbmdzW3NsaWJpbmdzLmxlbmd0aCAtIDFdLnRleHQgKz0gdGV4dDtcclxuXHRcdFx0aWYgKGRlY29kZSkgc2xpYmluZ3Nbc2xpYmluZ3MubGVuZ3RoIC0gMV0uZGVjb2RlID0gdHJ1ZTtcclxuXHRcdH0gZWxzZVxyXG5cdFx0XHRzbGliaW5ncy5wdXNoKHtcclxuXHRcdFx0XHR0eXBlOiBcInRleHRcIixcclxuXHRcdFx0XHR0ZXh0LFxyXG5cdFx0XHRcdGRlY29kZVxyXG5cdFx0XHR9KVxyXG5cdH07XHJcblx0Ly8g6K6+572u5YWD57Sg6IqC54K5XHJcblx0c2V0Tm9kZSgpIHtcclxuXHRcdHZhciBzbGliaW5ncyA9IHRoaXMuX1NUQUNLLmxlbmd0aCA/IHRoaXMuX1NUQUNLW3RoaXMuX1NUQUNLLmxlbmd0aCAtIDFdLmNoaWxkcmVuIDogdGhpcy5ET007XHJcblx0XHR2YXIgbm9kZSA9IHtcclxuXHRcdFx0bmFtZTogdGhpcy5fdGFnTmFtZS50b0xvd2VyQ2FzZSgpLFxyXG5cdFx0XHRhdHRyczogdGhpcy5fYXR0cnNcclxuXHRcdH1cclxuXHRcdGNvbmZpZy5MYWJlbEhhbmRsZXIobm9kZSwgdGhpcyk7XHJcblx0XHR0aGlzLl9hdHRycyA9IHt9O1xyXG5cdFx0aWYgKHRoaXMuZGF0YVt0aGlzLl9pXSA9PSAnPicpIHtcclxuXHRcdFx0aWYgKCFjb25maWcuc2VsZkNsb3NpbmdUYWdzW3RoaXMuX3RhZ05hbWVdKSB7XHJcblx0XHRcdFx0aWYgKGNvbmZpZy5pZ25vcmVUYWdzW25vZGUubmFtZV0pIHtcclxuXHRcdFx0XHRcdHZhciBqID0gdGhpcy5faTtcclxuXHRcdFx0XHRcdC8vIOWkhOeQhuimgeiiq+enu+mZpOeahOagh+etvlxyXG5cdFx0XHRcdFx0d2hpbGUgKHRoaXMuX2kgPCB0aGlzLmRhdGEubGVuZ3RoKSB7XHJcblx0XHRcdFx0XHRcdCh0aGlzLl9pID0gdGhpcy5kYXRhLmluZGV4T2YoXCI8L1wiLCB0aGlzLl9pICsgMSkpID09IC0xID8gdGhpcy5faSA9IHRoaXMuZGF0YS5sZW5ndGggOiBudWxsO1xyXG5cdFx0XHRcdFx0XHR0aGlzLl9pICs9IDI7XHJcblx0XHRcdFx0XHRcdHRoaXMuX3N0YXJ0ID0gdGhpcy5faTtcclxuXHRcdFx0XHRcdFx0d2hpbGUgKCFibGFua0NoYXJbdGhpcy5kYXRhW3RoaXMuX2ldXSAmJiB0aGlzLmRhdGFbdGhpcy5faV0gIT0gJz4nICYmIHRoaXMuZGF0YVt0aGlzLl9pXSAhPSAnLycpIHRoaXMuX2krKztcclxuXHRcdFx0XHRcdFx0aWYgKHRoaXMuZGF0YS5zdWJzdHJpbmcodGhpcy5fc3RhcnQsIHRoaXMuX2kpLnRvTG93ZXJDYXNlKCkgPT0gbm9kZS5uYW1lKSB7XHJcblx0XHRcdFx0XHRcdFx0dGhpcy5faSA9IHRoaXMuZGF0YS5pbmRleE9mKCc+JywgdGhpcy5faSk7XHJcblx0XHRcdFx0XHRcdFx0aWYgKHRoaXMuX2kgPT0gLTEpIHRoaXMuX2kgPSB0aGlzLmRhdGEubGVuZ3RoO1xyXG5cdFx0XHRcdFx0XHRcdGVsc2UgdGhpcy5fc3RhcnQgPSB0aGlzLl9pICsgMTtcclxuXHRcdFx0XHRcdFx0XHR0aGlzLl9zdGF0ZSA9IHRoaXMuVGV4dDtcclxuXHRcdFx0XHRcdFx0XHQvLyDlpITnkIYgc3ZnIFxyXG5cdFx0XHRcdFx0XHRcdGlmIChub2RlLm5hbWUgPT0gXCJzdmdcIikge1xyXG5cdFx0XHRcdFx0XHRcdFx0dmFyIHNyYyA9IHRoaXMuZGF0YS5zdWJzdHJpbmcoaiwgdGhpcy5faSArIDEpO1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCFub2RlLmF0dHJzLnhtbG5zKSBzcmMgPSBcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiXCIgKyBzcmM7XHJcblx0XHRcdFx0XHRcdFx0XHR0aGlzLl9pID0gajtcclxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICh0aGlzLmRhdGFbal0gIT0gJzwnKSBqLS07XHJcblx0XHRcdFx0XHRcdFx0XHRzcmMgPSB0aGlzLmRhdGEuc3Vic3RyaW5nKGosIHRoaXMuX2kpICsgc3JjO1xyXG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5faSA9IHRoaXMuX3N0YXJ0IC0gMTtcclxuXHRcdFx0XHRcdFx0XHRcdG5vZGUubmFtZSA9IFwiaW1nXCI7XHJcblx0XHRcdFx0XHRcdFx0XHRub2RlLmF0dHJzID0ge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRzcmM6IFwiZGF0YTppbWFnZS9zdmcreG1sO3V0ZjgsXCIgKyBzcmMucmVwbGFjZSgvIy9nLCBcIiUyM1wiKSxcclxuXHRcdFx0XHRcdFx0XHRcdFx0aWdub3JlOiAnVCdcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdHNsaWJpbmdzLnB1c2gobm9kZSk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0fSBlbHNlIHRoaXMuX1NUQUNLLnB1c2gobm9kZSk7XHJcblx0XHRcdFx0bm9kZS5jaGlsZHJlbiA9IFtdO1xyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2UgdGhpcy5faSsrO1xyXG5cdFx0dGhpcy5fc3RhcnQgPSB0aGlzLl9pICsgMTtcclxuXHRcdHRoaXMuX3N0YXRlID0gdGhpcy5UZXh0O1xyXG5cdFx0aWYgKCFjb25maWcuaWdub3JlVGFnc1tub2RlLm5hbWVdKSB7XHJcblx0XHRcdC8vIOajgOafpeepuueZveespuaYr+WQpuacieaViFxyXG5cdFx0XHRpZiAobm9kZS5uYW1lID09IFwicHJlXCIgfHwgKG5vZGUuYXR0cnMuc3R5bGUgJiYgbm9kZS5hdHRycy5zdHlsZS5pbmNsdWRlcyhcIndoaXRlLXNwYWNlXCIpICYmIG5vZGUuYXR0cnMuc3R5bGUuaW5jbHVkZXMoXHJcblx0XHRcdFx0XHRcInByZVwiKSkpIHtcclxuXHRcdFx0XHR0aGlzLl9wcmUgPSB0cnVlO1xyXG5cdFx0XHRcdG5vZGUucHJlID0gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRzbGliaW5ncy5wdXNoKG5vZGUpO1xyXG5cdFx0fVxyXG5cdH07XHJcblx0Ly8g5qCH562+5Ye65qCI5aSE55CGXHJcblx0cG9wTm9kZShub2RlKSB7XHJcblx0XHQvLyDmm7/mjaLkuIDkupvmoIfnrb7lkI1cclxuXHRcdGlmIChub2RlLm5hbWUgPT0gXCJwaWN0dXJlXCIpIHtcclxuXHRcdFx0bm9kZS5uYW1lID0gXCJpbWdcIjtcclxuXHRcdFx0aWYgKCFub2RlLmF0dHJzLnNyYyAmJiBub2RlLmNoaWxkcmVuLmxlbmd0aCAmJiBub2RlLmNoaWxkcmVuWzBdLm5hbWUgPT0gXCJpbWdcIilcclxuXHRcdFx0XHRub2RlLmF0dHJzLnNyYyA9IG5vZGUuY2hpbGRyZW5bMF0uYXR0cnMuc3JjO1xyXG5cdFx0XHRpZiAobm9kZS5hdHRycy5zcmMgJiYgIW5vZGUuYXR0cnMuaWdub3JlKVxyXG5cdFx0XHRcdG5vZGUuYXR0cnMuaSA9ICh0aGlzLl9pbWdOdW0rKykudG9TdHJpbmcoKTtcclxuXHRcdFx0cmV0dXJuIG5vZGUuY2hpbGRyZW4gPSB2b2lkIDA7XHJcblx0XHR9XHJcblx0XHRpZiAoY29uZmlnLmJsb2NrVGFnc1tub2RlLm5hbWVdKSBub2RlLm5hbWUgPSBcImRpdlwiO1xyXG5cdFx0ZWxzZSBpZiAoIWNvbmZpZy50cnVzdFRhZ3Nbbm9kZS5uYW1lXSkgbm9kZS5uYW1lID0gXCJzcGFuXCI7XHJcblx0XHQvLyDnqbrnmb3nrKblpITnkIZcclxuXHRcdGlmIChub2RlLnByZSkge1xyXG5cdFx0XHR0aGlzLl9wcmUgPSBmYWxzZTtcclxuXHRcdFx0bm9kZS5wcmUgPSB1bmRlZmluZWQ7XHJcblx0XHRcdGZvciAodmFyIGkgPSB0aGlzLl9TVEFDSy5sZW5ndGg7IGktLTspXHJcblx0XHRcdFx0aWYgKHRoaXMuX1NUQUNLW2ldLnByZSlcclxuXHRcdFx0XHRcdHRoaXMuX3ByZSA9IHRydWU7XHJcblx0XHR9XHJcblx0XHQvLyDlpITnkIbliJfooahcclxuXHRcdGlmIChub2RlLmMpIHtcclxuXHRcdFx0aWYgKG5vZGUubmFtZSA9PSBcInVsXCIpIHtcclxuXHRcdFx0XHR2YXIgZmxvb3IgPSAxO1xyXG5cdFx0XHRcdGZvciAodmFyIGkgPSB0aGlzLl9TVEFDSy5sZW5ndGg7IGktLTspXHJcblx0XHRcdFx0XHRpZiAodGhpcy5fU1RBQ0tbaV0ubmFtZSA9PSBcInVsXCIpIGZsb29yKys7XHJcblx0XHRcdFx0aWYgKGZsb29yICE9IDEpXHJcblx0XHRcdFx0XHRmb3IgKGkgPSBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaS0tOylcclxuXHRcdFx0XHRcdFx0bm9kZS5jaGlsZHJlbltpXS5mbG9vciA9IGZsb29yO1xyXG5cdFx0XHR9IGVsc2UgaWYgKG5vZGUubmFtZSA9PSBcIm9sXCIpIHtcclxuXHRcdFx0XHRmdW5jdGlvbiBjb252ZXJ0KG51bSwgdHlwZSkge1xyXG5cdFx0XHRcdFx0aWYgKHR5cGUgPT0gJ2EnKSByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSg5NyArIChudW0gLSAxKSAlIDI2KTtcclxuXHRcdFx0XHRcdGlmICh0eXBlID09ICdBJykgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoNjUgKyAobnVtIC0gMSkgJSAyNik7XHJcblx0XHRcdFx0XHRpZiAodHlwZSA9PSAnaScgfHwgdHlwZSA9PSAnSScpIHtcclxuXHRcdFx0XHRcdFx0bnVtID0gKG51bSAtIDEpICUgOTkgKyAxO1xyXG5cdFx0XHRcdFx0XHR2YXIgb25lID0gWydJJywgXCJJSVwiLCBcIklJSVwiLCBcIklWXCIsICdWJywgXCJWSVwiLCBcIlZJSVwiLCBcIlZJSUlcIiwgXCJJWFwiXSxcclxuXHRcdFx0XHRcdFx0XHR0ZW4gPSBbJ1gnLCBcIlhYXCIsIFwiWFhYXCIsIFwiWExcIiwgJ0wnLCBcIkxYXCIsIFwiTFhYXCIsIFwiTFhYWFwiLCBcIlhDXCJdLFxyXG5cdFx0XHRcdFx0XHRcdHJlcyA9ICh0ZW5bTWF0aC5mbG9vcihudW0gLyAxMCkgLSAxXSB8fCAnJykgKyAob25lW251bSAlIDEwIC0gMV0gfHwgJycpO1xyXG5cdFx0XHRcdFx0XHRpZiAodHlwZSA9PSAnaScpIHJldHVybiByZXMudG9Mb3dlckNhc2UoKTtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHJlcztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHJldHVybiBudW07XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGZvciAodmFyIGkgPSAwLCBudW0gPSAxLCBjaGlsZDsgY2hpbGQgPSBub2RlLmNoaWxkcmVuW2krK107KVxyXG5cdFx0XHRcdFx0aWYgKGNoaWxkLm5hbWUgPT0gXCJsaVwiKSB7XHJcblx0XHRcdFx0XHRcdGNoaWxkLnR5cGUgPSBcIm9sXCI7XHJcblx0XHRcdFx0XHRcdGNoaWxkLm51bSA9IGNvbnZlcnQobnVtKyssIG5vZGUuYXR0cnMudHlwZSkgKyAnLic7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdC8vIOWkhOeQhuihqOagvOeahOi+ueahhlxyXG5cdFx0aWYgKG5vZGUubmFtZSA9PSBcInRhYmxlXCIpIHtcclxuXHRcdFx0aWYgKG5vZGUuYXR0cnMuYm9yZGVyKVxyXG5cdFx0XHRcdG5vZGUuYXR0cnMuc3R5bGUgPSBgYm9yZGVyOiR7bm9kZS5hdHRycy5ib3JkZXJ9cHggc29saWQgZ3JheTske25vZGUuYXR0cnMuc3R5bGUgfHwgJyd9YDtcclxuXHRcdFx0aWYgKG5vZGUuYXR0cnMuaGFzT3duUHJvcGVydHkoXCJjZWxsc3BhY2luZ1wiKSlcclxuXHRcdFx0XHRub2RlLmF0dHJzLnN0eWxlID0gYGJvcmRlci1zcGFjaW5nOiR7bm9kZS5hdHRycy5jZWxsc3BhY2luZ31weDske25vZGUuYXR0cnMuc3R5bGUgfHwgJyd9YDtcclxuXHJcblx0XHRcdGZ1bmN0aW9uIHNldEJvcmRlcihlbGVtKSB7XHJcblx0XHRcdFx0aWYgKGVsZW0ubmFtZSA9PSBcInRoXCIgfHwgZWxlbS5uYW1lID09IFwidGRcIikge1xyXG5cdFx0XHRcdFx0aWYgKG5vZGUuYXR0cnMuYm9yZGVyKVxyXG5cdFx0XHRcdFx0XHRlbGVtLmF0dHJzLnN0eWxlID0gYGJvcmRlcjoke25vZGUuYXR0cnMuYm9yZGVyfXB4IHNvbGlkIGdyYXk7JHtlbGVtLmF0dHJzLnN0eWxlIHx8ICcnfWA7XHJcblx0XHRcdFx0XHRpZiAobm9kZS5hdHRycy5oYXNPd25Qcm9wZXJ0eShcImNlbGxwYWRkaW5nXCIpKVxyXG5cdFx0XHRcdFx0XHRlbGVtLmF0dHJzLnN0eWxlID0gYHBhZGRpbmc6JHtub2RlLmF0dHJzLmNlbGxwYWRkaW5nfXB4OyR7ZWxlbS5hdHRycy5zdHlsZSB8fCAnJ31gO1xyXG5cdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZiAoZWxlbS50eXBlID09IFwidGV4dFwiKSByZXR1cm47XHJcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAoZWxlbS5jaGlsZHJlbiB8fCBbXSkubGVuZ3RoOyBpKyspXHJcblx0XHRcdFx0XHRzZXRCb3JkZXIoZWxlbS5jaGlsZHJlbltpXSk7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKG5vZGUuYXR0cnMuYm9yZGVyIHx8IG5vZGUuYXR0cnMuaGFzT3duUHJvcGVydHkoXCJjZWxscGFkZGluZ1wiKSlcclxuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpKyspXHJcblx0XHRcdFx0XHRzZXRCb3JkZXIobm9kZS5jaGlsZHJlbltpXSk7XHJcblx0XHR9XHJcblx0XHQvLyDlkI7ku6PpgInmi6nlmajlpITnkIZcclxuXHRcdHRoaXMuQ3NzSGFuZGxlci5wb3AgJiYgdGhpcy5Dc3NIYW5kbGVyLnBvcChub2RlKTtcclxuXHR9O1xyXG5cdC8vIOW3peWFt+WHveaVsFxyXG5cdGNoZWNrQ2xvc2UoKSB7XHJcblx0XHRpZiAodGhpcy5kYXRhW3RoaXMuX2ldID09ICc+JyB8fCAodGhpcy5kYXRhW3RoaXMuX2ldID09ICcvJyAmJiB0aGlzLmRhdGFbdGhpcy5faSArIDFdID09ICc+JykpXHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cdH07XHJcblx0Z2V0U2VsZWN0aW9uKHRyaW0pIHtcclxuXHRcdHZhciBzdHIgPSAodGhpcy5fc3RhcnQgPT0gdGhpcy5faSA/ICcnIDogdGhpcy5kYXRhLnN1YnN0cmluZyh0aGlzLl9zdGFydCwgdGhpcy5faSkpO1xyXG5cdFx0d2hpbGUgKHRyaW0gJiYgKGJsYW5rQ2hhclt0aGlzLmRhdGFbKyt0aGlzLl9pXV0gfHwgKHRoaXMuX2ktLSwgZmFsc2UpKSk7XHJcblx0XHR0aGlzLl9zdGFydCA9IHRoaXMuX2kgKyAxO1xyXG5cdFx0cmV0dXJuIHN0cjtcclxuXHR9O1xyXG5cdC8vIOeKtuaAgeaculxyXG5cdFRleHQoYykge1xyXG5cdFx0aWYgKGMgPT0gJzwnKSB7XHJcblx0XHRcdHZhciBuZXh0ID0gdGhpcy5kYXRhW3RoaXMuX2kgKyAxXTtcclxuXHRcdFx0aWYgKChuZXh0ID49ICdhJyAmJiBuZXh0IDw9ICd6JykgfHwgKG5leHQgPj0gJ0EnICYmIG5leHQgPD0gJ1onKSkge1xyXG5cdFx0XHRcdHRoaXMuc2V0VGV4dCgpO1xyXG5cdFx0XHRcdHRoaXMuX3N0YXRlID0gdGhpcy5UYWdOYW1lO1xyXG5cdFx0XHR9IGVsc2UgaWYgKG5leHQgPT0gJy8nKSB7XHJcblx0XHRcdFx0dGhpcy5zZXRUZXh0KCk7XHJcblx0XHRcdFx0dGhpcy5faSsrO1xyXG5cdFx0XHRcdG5leHQgPSB0aGlzLmRhdGFbdGhpcy5faSArIDFdO1xyXG5cdFx0XHRcdGlmICgobmV4dCA+PSAnYScgJiYgbmV4dCA8PSAneicpIHx8IChuZXh0ID49ICdBJyAmJiBuZXh0IDw9ICdaJykpIHtcclxuXHRcdFx0XHRcdHRoaXMuX3N0YXJ0ID0gdGhpcy5faSArIDE7XHJcblx0XHRcdFx0XHR0aGlzLl9zdGF0ZSA9IHRoaXMuRW5kVGFnO1xyXG5cdFx0XHRcdH0gZWxzZVxyXG5cdFx0XHRcdFx0dGhpcy5fc3RhdGUgPSB0aGlzLkNvbW1lbnQ7XHJcblx0XHRcdH0gZWxzZSBpZiAobmV4dCA9PSAnIScpIHtcclxuXHRcdFx0XHR0aGlzLnNldFRleHQoKTtcclxuXHRcdFx0XHR0aGlzLl9zdGF0ZSA9IHRoaXMuQ29tbWVudDtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcblx0Q29tbWVudCgpIHtcclxuXHRcdGlmICh0aGlzLmRhdGEuc3Vic3RyaW5nKHRoaXMuX2kgKyAxLCB0aGlzLl9pICsgMykgPT0gXCItLVwiIHx8IHRoaXMuZGF0YS5zdWJzdHJpbmcodGhpcy5faSArIDEsIHRoaXMuX2kgKyA3KSA9PVxyXG5cdFx0XHRcIltDREFUQVtcIikge1xyXG5cdFx0XHR0aGlzLl9pID0gdGhpcy5kYXRhLmluZGV4T2YoXCItLT5cIiwgdGhpcy5faSArIDEpO1xyXG5cdFx0XHRpZiAodGhpcy5faSA9PSAtMSkgcmV0dXJuIHRoaXMuX2kgPSB0aGlzLmRhdGEubGVuZ3RoO1xyXG5cdFx0XHRlbHNlIHRoaXMuX2kgPSB0aGlzLl9pICsgMjtcclxuXHRcdH0gZWxzZVxyXG5cdFx0XHQodGhpcy5faSA9IHRoaXMuZGF0YS5pbmRleE9mKCc+JywgdGhpcy5faSArIDEpKSA9PSAtMSA/IHRoaXMuX2kgPSB0aGlzLmRhdGEubGVuZ3RoIDogbnVsbDtcclxuXHRcdHRoaXMuX3N0YXJ0ID0gdGhpcy5faSArIDE7XHJcblx0XHR0aGlzLl9zdGF0ZSA9IHRoaXMuVGV4dDtcclxuXHR9O1xyXG5cdFRhZ05hbWUoYykge1xyXG5cdFx0aWYgKGJsYW5rQ2hhcltjXSkge1xyXG5cdFx0XHR0aGlzLl90YWdOYW1lID0gdGhpcy5nZXRTZWxlY3Rpb24odHJ1ZSk7XHJcblx0XHRcdGlmICh0aGlzLmNoZWNrQ2xvc2UoKSkgdGhpcy5zZXROb2RlKCk7XHJcblx0XHRcdGVsc2UgdGhpcy5fc3RhdGUgPSB0aGlzLkF0dHJOYW1lO1xyXG5cdFx0fSBlbHNlIGlmICh0aGlzLmNoZWNrQ2xvc2UoKSkge1xyXG5cdFx0XHR0aGlzLl90YWdOYW1lID0gdGhpcy5nZXRTZWxlY3Rpb24oKTtcclxuXHRcdFx0dGhpcy5zZXROb2RlKCk7XHJcblx0XHR9XHJcblx0fTtcclxuXHRBdHRyTmFtZShjKSB7XHJcblx0XHRpZiAoYmxhbmtDaGFyW2NdKSB7XHJcblx0XHRcdHRoaXMuX2F0dHJOYW1lID0gdGhpcy5nZXRTZWxlY3Rpb24odHJ1ZSkudG9Mb3dlckNhc2UoKTtcclxuXHRcdFx0aWYgKHRoaXMuZGF0YVt0aGlzLl9pXSA9PSAnPScpIHtcclxuXHRcdFx0XHR3aGlsZSAoYmxhbmtDaGFyW3RoaXMuZGF0YVsrK3RoaXMuX2ldXSk7XHJcblx0XHRcdFx0dGhpcy5fc3RhcnQgPSB0aGlzLl9pLS07XHJcblx0XHRcdFx0dGhpcy5fc3RhdGUgPSB0aGlzLkF0dHJWYWx1ZTtcclxuXHRcdFx0fSBlbHNlIHRoaXMuc2V0QXR0cigpO1xyXG5cdFx0fSBlbHNlIGlmIChjID09ICc9Jykge1xyXG5cdFx0XHR0aGlzLl9hdHRyTmFtZSA9IHRoaXMuZ2V0U2VsZWN0aW9uKCkudG9Mb3dlckNhc2UoKTtcclxuXHRcdFx0d2hpbGUgKGJsYW5rQ2hhclt0aGlzLmRhdGFbKyt0aGlzLl9pXV0pO1xyXG5cdFx0XHR0aGlzLl9zdGFydCA9IHRoaXMuX2ktLTtcclxuXHRcdFx0dGhpcy5fc3RhdGUgPSB0aGlzLkF0dHJWYWx1ZTtcclxuXHRcdH0gZWxzZSBpZiAodGhpcy5jaGVja0Nsb3NlKCkpIHtcclxuXHRcdFx0dGhpcy5fYXR0ck5hbWUgPSB0aGlzLmdldFNlbGVjdGlvbigpLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRcdHRoaXMuc2V0QXR0cigpO1xyXG5cdFx0fVxyXG5cdH07XHJcblx0QXR0clZhbHVlKGMpIHtcclxuXHRcdGlmIChjID09ICdcIicgfHwgYyA9PSBcIidcIikge1xyXG5cdFx0XHR0aGlzLl9zdGFydCsrO1xyXG5cdFx0XHRpZiAoKHRoaXMuX2kgPSB0aGlzLmRhdGEuaW5kZXhPZihjLCB0aGlzLl9pICsgMSkpID09IC0xKSByZXR1cm4gdGhpcy5faSA9IHRoaXMuZGF0YS5sZW5ndGg7XHJcblx0XHR9IGVsc2VcclxuXHRcdFx0Zm9yICg7ICFibGFua0NoYXJbdGhpcy5kYXRhW3RoaXMuX2ldXSAmJiB0aGlzLmRhdGFbdGhpcy5faV0gIT0gJz4nOyB0aGlzLl9pKyspO1xyXG5cdFx0dGhpcy5fYXR0clZhbHVlID0gdGhpcy5nZXRTZWxlY3Rpb24oKTtcclxuXHRcdHdoaWxlICh0aGlzLl9hdHRyVmFsdWUuaW5jbHVkZXMoXCImcXVvdDtcIikpIHRoaXMuX2F0dHJWYWx1ZSA9IHRoaXMuX2F0dHJWYWx1ZS5yZXBsYWNlKFwiJnF1b3Q7XCIsICdcIicpO1xyXG5cdFx0dGhpcy5zZXRBdHRyKCk7XHJcblx0fTtcclxuXHRFbmRUYWcoYykge1xyXG5cdFx0aWYgKGJsYW5rQ2hhcltjXSB8fCBjID09ICc+JyB8fCBjID09ICcvJykge1xyXG5cdFx0XHR2YXIgbmFtZSA9IHRoaXMuZ2V0U2VsZWN0aW9uKCkudG9Mb3dlckNhc2UoKTtcclxuXHRcdFx0dmFyIGZsYWcgPSBmYWxzZTtcclxuXHRcdFx0Zm9yICh2YXIgaSA9IHRoaXMuX1NUQUNLLmxlbmd0aDsgaS0tOylcclxuXHRcdFx0XHRpZiAodGhpcy5fU1RBQ0tbaV0ubmFtZSA9PSBuYW1lKSB7XHJcblx0XHRcdFx0XHRmbGFnID0gdHJ1ZTtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0aWYgKGZsYWcpIHtcclxuXHRcdFx0XHR2YXIgbm9kZTtcclxuXHRcdFx0XHR3aGlsZSAoZmxhZykge1xyXG5cdFx0XHRcdFx0bm9kZSA9IHRoaXMuX1NUQUNLLnBvcCgpO1xyXG5cdFx0XHRcdFx0aWYgKG5vZGUubmFtZSA9PSBuYW1lKSBmbGFnID0gZmFsc2U7XHJcblx0XHRcdFx0XHR0aGlzLnBvcE5vZGUobm9kZSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2UgaWYgKG5hbWUgPT0gJ3AnIHx8IG5hbWUgPT0gXCJiclwiKSB7XHJcblx0XHRcdFx0dmFyIHNsaWJpbmdzID0gdGhpcy5fU1RBQ0subGVuZ3RoID8gdGhpcy5fU1RBQ0tbdGhpcy5fU1RBQ0subGVuZ3RoIC0gMV0uY2hpbGRyZW4gOiB0aGlzLkRPTTtcclxuXHRcdFx0XHRzbGliaW5ncy5wdXNoKHtcclxuXHRcdFx0XHRcdG5hbWUsXHJcblx0XHRcdFx0XHRhdHRyczoge31cclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cdFx0XHR0aGlzLl9pID0gdGhpcy5kYXRhLmluZGV4T2YoJz4nLCB0aGlzLl9pKTtcclxuXHRcdFx0aWYgKHRoaXMuX2kgPT0gLTEpIHRoaXMuX2kgPSB0aGlzLmRhdGEubGVuZ3RoO1xyXG5cdFx0XHRlbHNlIHRoaXMuX3N0YXRlID0gdGhpcy5UZXh0O1xyXG5cdFx0fVxyXG5cdH07XHJcbn07XHJcbm1vZHVsZS5leHBvcnRzID0gTXBIdG1sUGFyc2VyO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///525\n");

/***/ }),

/***/ 540:
/*!***************************************************!*\
  !*** D:/work/financeForum_app/components/data.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = [\n{\n  \"name\": \"北京市\",\n  \"city\": [\n  {\n    \"name\": \"北京市\",\n    \"area\": [\n    \"东城区\",\n    \"西城区\",\n    \"崇文区\",\n    \"宣武区\",\n    \"朝阳区\",\n    \"丰台区\",\n    \"石景山区\",\n    \"海淀区\",\n    \"门头沟区\",\n    \"房山区\",\n    \"通州区\",\n    \"顺义区\",\n    \"昌平区\",\n    \"大兴区\",\n    \"平谷区\",\n    \"怀柔区\",\n    \"密云县\",\n    \"延庆县\"] }] },\n\n\n\n\n{\n  \"name\": \"天津市\",\n  \"city\": [\n  {\n    \"name\": \"天津市\",\n    \"area\": [\n    \"和平区\",\n    \"河东区\",\n    \"河西区\",\n    \"南开区\",\n    \"河北区\",\n    \"红桥区\",\n    \"塘沽区\",\n    \"汉沽区\",\n    \"大港区\",\n    \"东丽区\",\n    \"西青区\",\n    \"津南区\",\n    \"北辰区\",\n    \"武清区\",\n    \"宝坻区\",\n    \"宁河县\",\n    \"静海县\",\n    \"蓟  县\"] }] },\n\n\n\n\n{\n  \"name\": \"河北省\",\n  \"city\": [\n  {\n    \"name\": \"石家庄市\",\n    \"area\": [\n    \"长安区\",\n    \"桥东区\",\n    \"桥西区\",\n    \"新华区\",\n    \"郊  区\",\n    \"井陉矿区\",\n    \"井陉县\",\n    \"正定县\",\n    \"栾城县\",\n    \"行唐县\",\n    \"灵寿县\",\n    \"高邑县\",\n    \"深泽县\",\n    \"赞皇县\",\n    \"无极县\",\n    \"平山县\",\n    \"元氏县\",\n    \"赵  县\",\n    \"辛集市\",\n    \"藁\",\n    \"晋州市\",\n    \"新乐市\",\n    \"鹿泉市\"] },\n\n\n  {\n    \"name\": \"唐山市\",\n    \"area\": [\n    \"路南区\",\n    \"路北区\",\n    \"古冶区\",\n    \"开平区\",\n    \"新  区\",\n    \"丰润县\",\n    \"滦  县\",\n    \"滦南县\",\n    \"乐亭县\",\n    \"迁西县\",\n    \"玉田县\",\n    \"唐海县\",\n    \"遵化市\",\n    \"丰南市\",\n    \"迁安市\"] },\n\n\n  {\n    \"name\": \"秦皇岛市\",\n    \"area\": [\n    \"海港区\",\n    \"山海关区\",\n    \"北戴河区\",\n    \"青龙满族自治县\",\n    \"昌黎县\",\n    \"抚宁县\",\n    \"卢龙县\"] },\n\n\n  {\n    \"name\": \"邯郸市\",\n    \"area\": [\n    \"邯山区\",\n    \"丛台区\",\n    \"复兴区\",\n    \"峰峰矿区\",\n    \"邯郸县\",\n    \"临漳县\",\n    \"成安县\",\n    \"大名县\",\n    \"涉  县\",\n    \"磁  县\",\n    \"肥乡县\",\n    \"永年县\",\n    \"邱  县\",\n    \"鸡泽县\",\n    \"广平县\",\n    \"馆陶县\",\n    \"魏  县\",\n    \"曲周县\",\n    \"武安市\"] },\n\n\n  {\n    \"name\": \"邢台市\",\n    \"area\": [\n    \"桥东区\",\n    \"桥西区\",\n    \"邢台县\",\n    \"临城县\",\n    \"内丘县\",\n    \"柏乡县\",\n    \"隆尧县\",\n    \"任  县\",\n    \"南和县\",\n    \"宁晋县\",\n    \"巨鹿县\",\n    \"新河县\",\n    \"广宗县\",\n    \"平乡县\",\n    \"威  县\",\n    \"清河县\",\n    \"临西县\",\n    \"南宫市\",\n    \"沙河市\"] },\n\n\n  {\n    \"name\": \"保定市\",\n    \"area\": [\n    \"新市区\",\n    \"北市区\",\n    \"南市区\",\n    \"满城县\",\n    \"清苑县\",\n    \"涞水县\",\n    \"阜平县\",\n    \"徐水县\",\n    \"定兴县\",\n    \"唐  县\",\n    \"高阳县\",\n    \"容城县\",\n    \"涞源县\",\n    \"望都县\",\n    \"安新县\",\n    \"易  县\",\n    \"曲阳县\",\n    \"蠡  县\",\n    \"顺平县\",\n    \"博野\",\n    \"雄县\",\n    \"涿州市\",\n    \"定州市\",\n    \"安国市\",\n    \"高碑店市\"] },\n\n\n  {\n    \"name\": \"张家口\",\n    \"area\": [\n    \"桥东区\",\n    \"桥西区\",\n    \"宣化区\",\n    \"下花园区\",\n    \"宣化县\",\n    \"张北县\",\n    \"康保县\",\n    \"沽源县\",\n    \"尚义县\",\n    \"蔚  县\",\n    \"阳原县\",\n    \"怀安县\",\n    \"万全县\",\n    \"怀来县\",\n    \"涿鹿县\",\n    \"赤城县\",\n    \"崇礼县\"] },\n\n\n  {\n    \"name\": \"承德市\",\n    \"area\": [\n    \"双桥区\",\n    \"双滦区\",\n    \"鹰手营子矿区\",\n    \"承德县\",\n    \"兴隆县\",\n    \"平泉县\",\n    \"滦平县\",\n    \"隆化县\",\n    \"丰宁满族自治县\",\n    \"宽城满族自治县\",\n    \"围场满族蒙古族自治县\"] },\n\n\n  {\n    \"name\": \"沧州市\",\n    \"area\": [\n    \"新华区\",\n    \"运河区\",\n    \"沧  县\",\n    \"青  县\",\n    \"东光县\",\n    \"海兴县\",\n    \"盐山县\",\n    \"肃宁县\",\n    \"南皮县\",\n    \"吴桥县\",\n    \"献  县\",\n    \"孟村回族自治县\",\n    \"泊头市\",\n    \"任丘市\",\n    \"黄骅市\",\n    \"河间市\"] },\n\n\n  {\n    \"name\": \"廊坊市\",\n    \"area\": [\n    \"安次区\",\n    \"固安县\",\n    \"永清县\",\n    \"香河县\",\n    \"大城县\",\n    \"文安县\",\n    \"大厂回族自治县\",\n    \"霸州市\",\n    \"三河市\"] },\n\n\n  {\n    \"name\": \"衡水市\",\n    \"area\": [\n    \"桃城区\",\n    \"枣强县\",\n    \"武邑县\",\n    \"武强县\",\n    \"饶阳县\",\n    \"安平县\",\n    \"故城县\",\n    \"景  县\",\n    \"阜城县\",\n    \"冀州市\",\n    \"深州市\"] }] },\n\n\n\n\n{\n  \"name\": \"山西省\",\n  \"city\": [\n  {\n    \"name\": \"太原市\",\n    \"area\": [\n    \"小店区\",\n    \"迎泽区\",\n    \"杏花岭区\",\n    \"尖草坪区\",\n    \"万柏林区\",\n    \"晋源区\",\n    \"清徐县\",\n    \"阳曲县\",\n    \"娄烦县\",\n    \"古交市\"] },\n\n\n  {\n    \"name\": \"大同市\",\n    \"area\": [\n    \"城  区\",\n    \"矿  区\",\n    \"南郊区\",\n    \"新荣区\",\n    \"阳高县\",\n    \"天镇县\",\n    \"广灵县\",\n    \"灵丘县\",\n    \"浑源县\",\n    \"左云县\",\n    \"大同县\"] },\n\n\n  {\n    \"name\": \"阳泉市\",\n    \"area\": [\n    \"城  区\",\n    \"矿  区\",\n    \"郊  区\",\n    \"平定县\",\n    \"盂  县\"] },\n\n\n  {\n    \"name\": \"长治市\",\n    \"area\": [\n    \"城  区\",\n    \"郊  区\",\n    \"长治县\",\n    \"襄垣县\",\n    \"屯留县\",\n    \"平顺县\",\n    \"黎城县\",\n    \"壶关县\",\n    \"长子县\",\n    \"武乡县\",\n    \"沁  县\",\n    \"沁源县\",\n    \"潞城市\"] },\n\n\n  {\n    \"name\": \"晋城市\",\n    \"area\": [\n    \"城  区\",\n    \"沁水县\",\n    \"阳城县\",\n    \"陵川县\",\n    \"泽州县\",\n    \"高平市\"] },\n\n\n  {\n    \"name\": \"朔州市\",\n    \"area\": [\n    \"朔城区\",\n    \"平鲁区\",\n    \"山阴县\",\n    \"应  县\",\n    \"右玉县\",\n    \"怀仁县\"] },\n\n\n  {\n    \"name\": \"忻州市\",\n    \"area\": [\n    \"忻府区\",\n    \"原平市\",\n    \"定襄县\",\n    \"五台县\",\n    \"代  县\",\n    \"繁峙县\",\n    \"宁武县\",\n    \"静乐县\",\n    \"神池县\",\n    \"五寨县\",\n    \"岢岚县\",\n    \"河曲县\",\n    \"保德县\",\n    \"偏关县\"] },\n\n\n  {\n    \"name\": \"吕梁市\",\n    \"area\": [\n    \"离石区\",\n    \"孝义市\",\n    \"汾阳市\",\n    \"文水县\",\n    \"交城县\",\n    \"兴  县\",\n    \"临  县\",\n    \"柳林县\",\n    \"石楼县\",\n    \"岚  县\",\n    \"方山县\",\n    \"中阳县\",\n    \"交口县\"] },\n\n\n  {\n    \"name\": \"晋中市\",\n    \"area\": [\n    \"榆次市\",\n    \"介休市\",\n    \"榆社县\",\n    \"左权县\",\n    \"和顺县\",\n    \"昔阳县\",\n    \"寿阳县\",\n    \"太谷县\",\n    \"祁  县\",\n    \"平遥县\",\n    \"灵石县\"] },\n\n\n  {\n    \"name\": \"临汾市\",\n    \"area\": [\n    \"临汾市\",\n    \"侯马市\",\n    \"霍州市\",\n    \"曲沃县\",\n    \"翼城县\",\n    \"襄汾县\",\n    \"洪洞县\",\n    \"古  县\",\n    \"安泽县\",\n    \"浮山县\",\n    \"吉  县\",\n    \"乡宁县\",\n    \"蒲  县\",\n    \"大宁县\",\n    \"永和县\",\n    \"隰  县\",\n    \"汾西县\"] },\n\n\n  {\n    \"name\": \"运城市\",\n    \"area\": [\n    \"运城市\",\n    \"永济市\",\n    \"河津市\",\n    \"芮城县\",\n    \"临猗县\",\n    \"万荣县\",\n    \"新绛县\",\n    \"稷山县\",\n    \"闻喜县\",\n    \"夏  县\",\n    \"绛  县\",\n    \"平陆县\",\n    \"垣曲县\"] }] },\n\n\n\n\n{\n  \"name\": \"内蒙古\",\n  \"city\": [\n  {\n    \"name\": \"呼和浩特市\",\n    \"area\": [\n    \"新城区\",\n    \"回民区\",\n    \"玉泉区\",\n    \"郊  区\",\n    \"土默特左旗\",\n    \"托克托县\",\n    \"和林格尔县\",\n    \"清水河县\",\n    \"武川县\"] },\n\n\n  {\n    \"name\": \"包头市\",\n    \"area\": [\n    \"东河区\",\n    \"昆都伦区\",\n    \"青山区\",\n    \"石拐矿区\",\n    \"白云矿区\",\n    \"郊  区\",\n    \"土默特右旗\",\n    \"固阳县\",\n    \"达尔罕茂明安联合旗\"] },\n\n\n  {\n    \"name\": \"乌海市\",\n    \"area\": [\n    \"海勃湾区\",\n    \"海南区\",\n    \"乌达区\"] },\n\n\n  {\n    \"name\": \"赤峰市\",\n    \"area\": [\n    \"红山区\",\n    \"元宝山区\",\n    \"松山区\",\n    \"阿鲁科尔沁旗\",\n    \"巴林左旗\",\n    \"巴林右旗\",\n    \"林西县\",\n    \"克什克腾旗\",\n    \"翁牛特旗\",\n    \"喀喇沁旗\",\n    \"宁城县\",\n    \"敖汉旗\"] },\n\n\n  {\n    \"name\": \"呼伦贝尔市\",\n    \"area\": [\n    \"海拉尔市\",\n    \"满洲里市\",\n    \"扎兰屯市\",\n    \"牙克石市\",\n    \"根河市\",\n    \"额尔古纳市\",\n    \"阿荣旗\",\n    \"莫力达瓦达斡尔族自治旗\",\n    \"鄂伦春自治旗\",\n    \"鄂温克族自治旗\",\n    \"新巴尔虎右旗\",\n    \"新巴尔虎左旗\",\n    \"陈巴尔虎旗\"] },\n\n\n  {\n    \"name\": \"兴安盟\",\n    \"area\": [\n    \"乌兰浩特市\",\n    \"阿尔山市\",\n    \"科尔沁右翼前旗\",\n    \"科尔沁右翼中旗\",\n    \"扎赉特旗\",\n    \"突泉县\"] },\n\n\n  {\n    \"name\": \"通辽市\",\n    \"area\": [\n    \"科尔沁区\",\n    \"霍林郭勒市\",\n    \"科尔沁左翼中旗\",\n    \"科尔沁左翼后旗\",\n    \"开鲁县\",\n    \"库伦旗\",\n    \"奈曼旗\",\n    \"扎鲁特旗\"] },\n\n\n  {\n    \"name\": \"锡林郭勒盟\",\n    \"area\": [\n    \"二连浩特市\",\n    \"锡林浩特市\",\n    \"阿巴嘎旗\",\n    \"苏尼特左旗\",\n    \"苏尼特右旗\",\n    \"东乌珠穆沁旗\",\n    \"西乌珠穆沁旗\",\n    \"太仆寺旗\",\n    \"镶黄旗\",\n    \"正镶白旗\",\n    \"正蓝旗\",\n    \"多伦县\"] },\n\n\n  {\n    \"name\": \"乌兰察布盟\",\n    \"area\": [\n    \"集宁市\",\n    \"丰镇市\",\n    \"卓资县\",\n    \"化德县\",\n    \"商都县\",\n    \"兴和县\",\n    \"凉城县\",\n    \"察哈尔右翼前旗\",\n    \"察哈尔右翼中旗\",\n    \"察哈尔右翼后旗\",\n    \"四子王旗\"] },\n\n\n  {\n    \"name\": \"伊克昭盟\",\n    \"area\": [\n    \"东胜市\",\n    \"达拉特旗\",\n    \"准格尔旗\",\n    \"鄂托克前旗\",\n    \"鄂托克旗\",\n    \"杭锦旗\",\n    \"乌审旗\",\n    \"伊金霍洛旗\"] },\n\n\n  {\n    \"name\": \"巴彦淖尔盟\",\n    \"area\": [\n    \"临河市\",\n    \"五原县\",\n    \"磴口县\",\n    \"乌拉特前旗\",\n    \"乌拉特中旗\",\n    \"乌拉特后旗\",\n    \"杭锦后旗\"] },\n\n\n  {\n    \"name\": \"阿拉善盟\",\n    \"area\": [\n    \"阿拉善左旗\",\n    \"阿拉善右旗\",\n    \"额济纳旗\"] }] },\n\n\n\n\n{\n  \"name\": \"辽宁省\",\n  \"city\": [\n  {\n    \"name\": \"沈阳市\",\n    \"area\": [\n    \"沈河区\",\n    \"皇姑区\",\n    \"和平区\",\n    \"大东区\",\n    \"铁西区\",\n    \"苏家屯区\",\n    \"东陵区\",\n    \"于洪区\",\n    \"新民市\",\n    \"法库县\",\n    \"辽中县\",\n    \"康平县\",\n    \"新城子区\"] },\n\n\n  {\n    \"name\": \"大连市\",\n    \"area\": [\n    \"西岗区\",\n    \"中山区\",\n    \"沙河口区\",\n    \"甘井子区\",\n    \"旅顺口区\",\n    \"金州区\",\n    \"瓦房店市\",\n    \"普兰店市\",\n    \"庄河市\",\n    \"长海县\"] },\n\n\n  {\n    \"name\": \"鞍山市\",\n    \"area\": [\n    \"铁东区\",\n    \"铁西区\",\n    \"立山区\",\n    \"千山区\",\n    \"海城市\",\n    \"台安县\",\n    \"岫岩满族自治县\"] },\n\n\n  {\n    \"name\": \"抚顺市\",\n    \"area\": [\n    \"顺城区\",\n    \"新抚区\",\n    \"东洲区\",\n    \"望花区\",\n    \"抚顺县\",\n    \"清原满族自治县\",\n    \"新宾满族自治县\"] },\n\n\n  {\n    \"name\": \"本溪市\",\n    \"area\": [\n    \"平山区\",\n    \"明山区\",\n    \"溪湖区\",\n    \"南芬区\",\n    \"本溪满族自治县\",\n    \"桓仁满族自治县\"] },\n\n\n  {\n    \"name\": \"丹东市\",\n    \"area\": [\n    \"振兴区\",\n    \"元宝区\",\n    \"振安区\",\n    \"东港市\",\n    \"凤城市\",\n    \"宽甸满族自治县\"] },\n\n\n  {\n    \"name\": \"锦州市\",\n    \"area\": [\n    \"太和区\",\n    \"古塔区\",\n    \"凌河区\",\n    \"凌海市\",\n    \"黑山县\",\n    \"义县\",\n    \"北宁市\"] },\n\n\n  {\n    \"name\": \"营口市\",\n    \"area\": [\n    \"站前区\",\n    \"西市区\",\n    \"鲅鱼圈区\",\n    \"老边区\",\n    \"大石桥市\",\n    \"盖州市\"] },\n\n\n  {\n    \"name\": \"阜新市\",\n    \"area\": [\n    \"海州区\",\n    \"新邱区\",\n    \"太平区\",\n    \"清河门区\",\n    \"细河区\",\n    \"彰武县\",\n    \"阜新蒙古族自治县\"] },\n\n\n  {\n    \"name\": \"辽阳市\",\n    \"area\": [\n    \"白塔区\",\n    \"文圣区\",\n    \"宏伟区\",\n    \"太子河区\",\n    \"弓长岭区\",\n    \"灯塔市\",\n    \"辽阳县\"] },\n\n\n  {\n    \"name\": \"盘锦\",\n    \"area\": [\n    \"双台子区\",\n    \"兴隆台区\",\n    \"盘山县\",\n    \"大洼县\"] },\n\n\n  {\n    \"name\": \"铁岭市\",\n    \"area\": [\n    \"银州区\",\n    \"清河区\",\n    \"调兵山市\",\n    \"开原市\",\n    \"铁岭县\",\n    \"昌图县\",\n    \"西丰县\"] },\n\n\n  {\n    \"name\": \"朝阳市\",\n    \"area\": [\n    \"双塔区\",\n    \"龙城区\",\n    \"凌源市\",\n    \"北票市\",\n    \"朝阳县\",\n    \"建平县\",\n    \"喀喇沁左翼蒙古族自治县\"] },\n\n\n  {\n    \"name\": \"葫芦岛市\",\n    \"area\": [\n    \"龙港区\",\n    \"南票区\",\n    \"连山区\",\n    \"兴城市\",\n    \"绥中县\",\n    \"建昌县\"] }] },\n\n\n\n\n{\n  \"name\": \"吉林省\",\n  \"city\": [\n  {\n    \"name\": \"长春市\",\n    \"area\": [\n    \"朝阳区\",\n    \"宽城区\",\n    \"二道区\",\n    \"南关区\",\n    \"绿园区\",\n    \"双阳区\",\n    \"九台市\",\n    \"榆树市\",\n    \"德惠市\",\n    \"农安县\"] },\n\n\n  {\n    \"name\": \"吉林市\",\n    \"area\": [\n    \"船营区\",\n    \"昌邑区\",\n    \"龙潭区\",\n    \"丰满区\",\n    \"舒兰市\",\n    \"桦甸市\",\n    \"蛟河市\",\n    \"磐石市\",\n    \"永吉县\"] },\n\n\n  {\n    \"name\": \"四平\",\n    \"area\": [\n    \"铁西区\",\n    \"铁东区\",\n    \"公主岭市\",\n    \"双辽市\",\n    \"梨树县\",\n    \"伊通满族自治县\"] },\n\n\n  {\n    \"name\": \"辽源市\",\n    \"area\": [\n    \"龙山区\",\n    \"西安区\",\n    \"东辽县\",\n    \"东丰县\"] },\n\n\n  {\n    \"name\": \"通化市\",\n    \"area\": [\n    \"东昌区\",\n    \"二道江区\",\n    \"梅河口市\",\n    \"集安市\",\n    \"通化县\",\n    \"辉南县\",\n    \"柳河县\"] },\n\n\n  {\n    \"name\": \"白山市\",\n    \"area\": [\n    \"八道江区\",\n    \"江源区\",\n    \"临江市\",\n    \"靖宇县\",\n    \"抚松县\",\n    \"长白朝鲜族自治县\"] },\n\n\n  {\n    \"name\": \"松原市\",\n    \"area\": [\n    \"宁江区\",\n    \"乾安县\",\n    \"长岭县\",\n    \"扶余县\",\n    \"前郭尔罗斯蒙古族自治县\"] },\n\n\n  {\n    \"name\": \"白城市\",\n    \"area\": [\n    \"洮北区\",\n    \"大安市\",\n    \"洮南市\",\n    \"镇赉县\",\n    \"通榆县\"] },\n\n\n  {\n    \"name\": \"延边朝鲜族自治州\",\n    \"area\": [\n    \"延吉市\",\n    \"图们市\",\n    \"敦化市\",\n    \"龙井市\",\n    \"珲春市\",\n    \"和龙市\",\n    \"安图县\",\n    \"汪清县\"] }] },\n\n\n\n\n{\n  \"name\": \"黑龙江省\",\n  \"city\": [\n  {\n    \"name\": \"哈尔滨市\",\n    \"area\": [\n    \"松北区\",\n    \"道里区\",\n    \"南岗区\",\n    \"平房区\",\n    \"香坊区\",\n    \"道外区\",\n    \"呼兰区\",\n    \"阿城区\",\n    \"双城市\",\n    \"尚志市\",\n    \"五常市\",\n    \"宾县\",\n    \"方正县\",\n    \"通河县\",\n    \"巴彦县\",\n    \"延寿县\",\n    \"木兰县\",\n    \"依兰县\"] },\n\n\n  {\n    \"name\": \"齐齐哈尔市\",\n    \"area\": [\n    \"龙沙区\",\n    \"昂昂溪区\",\n    \"铁锋区\",\n    \"建华区\",\n    \"富拉尔基区\",\n    \"碾子山区\",\n    \"梅里斯达斡尔族区\",\n    \"讷河市\",\n    \"富裕县\",\n    \"拜泉县\",\n    \"甘南县\",\n    \"依安县\",\n    \"克山县\",\n    \"泰来县\",\n    \"克东县\",\n    \"龙江县\"] },\n\n\n  {\n    \"name\": \"鹤岗市\",\n    \"area\": [\n    \"兴山区\",\n    \"工农区\",\n    \"南山区\",\n    \"兴安区\",\n    \"向阳区\",\n    \"东山区\",\n    \"萝北县\",\n    \"绥滨县\"] },\n\n\n  {\n    \"name\": \"双鸭山\",\n    \"area\": [\n    \"尖山区\",\n    \"岭东区\",\n    \"四方台区\",\n    \"宝山区\",\n    \"集贤县\",\n    \"宝清县\",\n    \"友谊县\",\n    \"饶河县\"] },\n\n\n  {\n    \"name\": \"鸡西市\",\n    \"area\": [\n    \"鸡冠区\",\n    \"恒山区\",\n    \"城子河区\",\n    \"滴道区\",\n    \"梨树区\",\n    \"麻山区\",\n    \"密山市\",\n    \"虎林市\",\n    \"鸡东县\"] },\n\n\n  {\n    \"name\": \"大庆市\",\n    \"area\": [\n    \"萨尔图区\",\n    \"红岗区\",\n    \"龙凤区\",\n    \"让胡路区\",\n    \"大同区\",\n    \"林甸县\",\n    \"肇州县\",\n    \"肇源县\",\n    \"杜尔伯特蒙古族自治县\"] },\n\n\n  {\n    \"name\": \"伊春市\",\n    \"area\": [\n    \"伊春区\",\n    \"带岭区\",\n    \"南岔区\",\n    \"金山屯区\",\n    \"西林区\",\n    \"美溪区\",\n    \"乌马河区\",\n    \"翠峦区\",\n    \"友好区\",\n    \"上甘岭区\",\n    \"五营区\",\n    \"红星区\",\n    \"新青区\",\n    \"汤旺河区\",\n    \"乌伊岭区\",\n    \"铁力市\",\n    \"嘉荫县\"] },\n\n\n  {\n    \"name\": \"牡丹江市\",\n    \"area\": [\n    \"爱民区\",\n    \"东安区\",\n    \"阳明区\",\n    \"西安区\",\n    \"绥芬河市\",\n    \"宁安市\",\n    \"海林市\",\n    \"穆棱市\",\n    \"林口县\",\n    \"东宁县\"] },\n\n\n  {\n    \"name\": \"佳木斯市\",\n    \"area\": [\n    \"向阳区\",\n    \"前进区\",\n    \"东风区\",\n    \"郊区\",\n    \"同江市\",\n    \"富锦市\",\n    \"桦川县\",\n    \"抚远县\",\n    \"桦南县\",\n    \"汤原县\"] },\n\n\n  {\n    \"name\": \"七台河市\",\n    \"area\": [\n    \"桃山区\",\n    \"新兴区\",\n    \"茄子河区\",\n    \"勃利县\"] },\n\n\n  {\n    \"name\": \"黑河市\",\n    \"area\": [\n    \"爱辉区\",\n    \"北安市\",\n    \"五大连池市\",\n    \"逊克县\",\n    \"嫩江县\",\n    \"孙吴县\"] },\n\n\n  {\n    \"name\": \"绥化市\",\n    \"area\": [\n    \"北林区\",\n    \"安达市\",\n    \"肇东市\",\n    \"海伦市\",\n    \"绥棱县\",\n    \"兰西县\",\n    \"明水县\",\n    \"青冈县\",\n    \"庆安县\",\n    \"望奎县\"] },\n\n\n  {\n    \"name\": \"大兴安岭地区\",\n    \"area\": [\n    \"呼玛县\",\n    \"塔河县\",\n    \"漠河县\",\n    \"大兴安岭辖区\"] }] },\n\n\n\n\n{\n  \"name\": \"上海市\",\n  \"city\": [\n  {\n    \"name\": \"上海市\",\n    \"area\": [\n    \"黄浦区\",\n    \"卢湾区\",\n    \"徐汇区\",\n    \"长宁区\",\n    \"静安区\",\n    \"普陀区\",\n    \"闸北区\",\n    \"虹口区\",\n    \"杨浦区\",\n    \"宝山区\",\n    \"闵行区\",\n    \"嘉定区\",\n    \"松江区\",\n    \"金山区\",\n    \"青浦区\",\n    \"南汇区\",\n    \"奉贤区\",\n    \"浦东新区\",\n    \"崇明县\"] }] },\n\n\n\n\n{\n  \"name\": \"江苏省\",\n  \"city\": [\n  {\n    \"name\": \"南京市\",\n    \"area\": [\n    \"玄武区\",\n    \"白下区\",\n    \"秦淮区\",\n    \"建邺区\",\n    \"鼓楼区\",\n    \"下关区\",\n    \"栖霞区\",\n    \"雨花台区\",\n    \"浦口区\",\n    \"江宁区\",\n    \"六合区\",\n    \"溧水县\",\n    \"高淳县\"] },\n\n\n  {\n    \"name\": \"苏州市\",\n    \"area\": [\n    \"金阊区\",\n    \"平江区\",\n    \"沧浪区\",\n    \"虎丘区\",\n    \"吴中区\",\n    \"相城区\",\n    \"常熟市\",\n    \"张家港市\",\n    \"昆山市\",\n    \"吴江市\",\n    \"太仓市\"] },\n\n\n  {\n    \"name\": \"无锡市\",\n    \"area\": [\n    \"崇安区\",\n    \"南长区\",\n    \"北塘区\",\n    \"滨湖区\",\n    \"锡山区\",\n    \"惠山区\",\n    \"江阴市\",\n    \"宜兴市\"] },\n\n\n  {\n    \"name\": \"常州市\",\n    \"area\": [\n    \"钟楼区\",\n    \"天宁区\",\n    \"戚墅堰区\",\n    \"新北区\",\n    \"武进区\",\n    \"金坛市\",\n    \"溧阳市\"] },\n\n\n  {\n    \"name\": \"镇江市\",\n    \"area\": [\n    \"京口区\",\n    \"润州区\",\n    \"丹徒区\",\n    \"丹阳市\",\n    \"扬中市\",\n    \"句容市\"] },\n\n\n  {\n    \"name\": \"南通市\",\n    \"area\": [\n    \"崇川区\",\n    \"港闸区\",\n    \"通州市\",\n    \"如皋市\",\n    \"海门市\",\n    \"启东市\",\n    \"海安县\",\n    \"如东县\"] },\n\n\n  {\n    \"name\": \"泰州市\",\n    \"area\": [\n    \"海陵区\",\n    \"高港区\",\n    \"姜堰市\",\n    \"泰兴市\",\n    \"靖江市\",\n    \"兴化市\"] },\n\n\n  {\n    \"name\": \"扬州市\",\n    \"area\": [\n    \"广陵区\",\n    \"维扬区\",\n    \"邗江区\",\n    \"江都市\",\n    \"仪征市\",\n    \"高邮市\",\n    \"宝应县\"] },\n\n\n  {\n    \"name\": \"盐城市\",\n    \"area\": [\n    \"亭湖区\",\n    \"盐都区\",\n    \"大丰市\",\n    \"东台市\",\n    \"建湖县\",\n    \"射阳县\",\n    \"阜宁县\",\n    \"滨海县\",\n    \"响水县\"] },\n\n\n  {\n    \"name\": \"连云港市\",\n    \"area\": [\n    \"新浦区\",\n    \"海州区\",\n    \"连云区\",\n    \"东海县\",\n    \"灌云县\",\n    \"赣榆县\",\n    \"灌南县\"] },\n\n\n  {\n    \"name\": \"徐州市\",\n    \"area\": [\n    \"云龙区\",\n    \"鼓楼区\",\n    \"九里区\",\n    \"泉山区\",\n    \"贾汪区\",\n    \"邳州市\",\n    \"新沂市\",\n    \"铜山县\",\n    \"睢宁县\",\n    \"沛县\",\n    \"丰县\"] },\n\n\n  {\n    \"name\": \"淮安市\",\n    \"area\": [\n    \"清河区\",\n    \"清浦区\",\n    \"楚州区\",\n    \"淮阴区\",\n    \"涟水县\",\n    \"洪泽县\",\n    \"金湖县\",\n    \"盱眙县\"] },\n\n\n  {\n    \"name\": \"宿迁市\",\n    \"area\": [\n    \"宿城区\",\n    \"宿豫区\",\n    \"沭阳县\",\n    \"泗阳县\",\n    \"泗洪县\"] }] },\n\n\n\n\n{\n  \"name\": \"浙江省\",\n  \"city\": [\n  {\n    \"name\": \"杭州市\",\n    \"area\": [\n    \"拱墅区\",\n    \"西湖区\",\n    \"上城区\",\n    \"下城区\",\n    \"江干区\",\n    \"滨江区\",\n    \"余杭区\",\n    \"萧山区\",\n    \"建德市\",\n    \"富阳市\",\n    \"临安市\",\n    \"桐庐县\",\n    \"淳安县\"] },\n\n\n  {\n    \"name\": \"宁波市\",\n    \"area\": [\n    \"海曙区\",\n    \"江东区\",\n    \"江北区\",\n    \"镇海区\",\n    \"北仑区\",\n    \"鄞州区\",\n    \"余姚市\",\n    \"慈溪市\",\n    \"奉化市\",\n    \"宁海县\",\n    \"象山县\"] },\n\n\n  {\n    \"name\": \"温州市\",\n    \"area\": [\n    \"鹿城区\",\n    \"龙湾区\",\n    \"瓯海区\",\n    \"瑞安市\",\n    \"乐清市\",\n    \"永嘉县\",\n    \"洞头县\",\n    \"平阳县\",\n    \"苍南县\",\n    \"文成县\",\n    \"泰顺县\"] },\n\n\n  {\n    \"name\": \"嘉兴市\",\n    \"area\": [\n    \"秀城区\",\n    \"秀洲区\",\n    \"海宁市\",\n    \"平湖市\",\n    \"桐乡市\",\n    \"嘉善县\",\n    \"海盐县\"] },\n\n\n  {\n    \"name\": \"湖州市\",\n    \"area\": [\n    \"吴兴区\",\n    \"南浔区\",\n    \"长兴县\",\n    \"德清县\",\n    \"安吉县\"] },\n\n\n  {\n    \"name\": \"绍兴市\",\n    \"area\": [\n    \"越城区\",\n    \"诸暨市\",\n    \"上虞市\",\n    \"嵊州市\",\n    \"绍兴县\",\n    \"新昌县\"] },\n\n\n  {\n    \"name\": \"金华市\",\n    \"area\": [\n    \"婺城区\",\n    \"金东区\",\n    \"兰溪市\",\n    \"义乌市\",\n    \"东阳市\",\n    \"永康市\",\n    \"武义县\",\n    \"浦江县\",\n    \"磐安县\"] },\n\n\n  {\n    \"name\": \"衢州市\",\n    \"area\": [\n    \"柯城区\",\n    \"衢江区\",\n    \"江山市\",\n    \"龙游县\",\n    \"常山县\",\n    \"开化县\"] },\n\n\n  {\n    \"name\": \"舟山市\",\n    \"area\": [\n    \"定海区\",\n    \"普陀区\",\n    \"岱山县\",\n    \"嵊泗县\"] },\n\n\n  {\n    \"name\": \"台州市\",\n    \"area\": [\n    \"椒江区\",\n    \"黄岩区\",\n    \"路桥区\",\n    \"临海市\",\n    \"温岭市\",\n    \"玉环县\",\n    \"天台县\",\n    \"仙居县\",\n    \"三门县\"] },\n\n\n  {\n    \"name\": \"丽水市\",\n    \"area\": [\n    \"莲都区\",\n    \"龙泉市\",\n    \"缙云县\",\n    \"青田县\",\n    \"云和县\",\n    \"遂昌县\",\n    \"松阳县\",\n    \"庆元县\",\n    \"景宁畲族自治县\"] }] },\n\n\n\n\n{\n  \"name\": \"安徽省\",\n  \"city\": [\n  {\n    \"name\": \"合肥市\",\n    \"area\": [\n    \"庐阳区\",\n    \"瑶海区\",\n    \"蜀山区\",\n    \"包河区\",\n    \"长丰县\",\n    \"肥东县\",\n    \"肥西县\"] },\n\n\n  {\n    \"name\": \"芜湖市\",\n    \"area\": [\n    \"镜湖区\",\n    \"弋江区\",\n    \"鸠江区\",\n    \"三山区\",\n    \"芜湖县\",\n    \"南陵县\",\n    \"繁昌县\"] },\n\n\n  {\n    \"name\": \"蚌埠市\",\n    \"area\": [\n    \"蚌山区\",\n    \"龙子湖区\",\n    \"禹会区\",\n    \"淮上区\",\n    \"怀远县\",\n    \"固镇县\",\n    \"五河县\"] },\n\n\n  {\n    \"name\": \"淮南市\",\n    \"area\": [\n    \"田家庵区\",\n    \"大通区\",\n    \"谢家集区\",\n    \"八公山区\",\n    \"潘集区\",\n    \"凤台县\"] },\n\n\n  {\n    \"name\": \"马鞍山市\",\n    \"area\": [\n    \"雨山区\",\n    \"花山区\",\n    \"金家庄区\",\n    \"当涂县\"] },\n\n\n  {\n    \"name\": \"淮北市\",\n    \"area\": [\n    \"相山区\",\n    \"杜集区\",\n    \"烈山区\",\n    \"濉溪县\"] },\n\n\n  {\n    \"name\": \"铜陵市\",\n    \"area\": [\n    \"铜官山区\",\n    \"狮子山区\",\n    \"郊区\",\n    \"铜陵县\"] },\n\n\n  {\n    \"name\": \"安庆市\",\n    \"area\": [\n    \"迎江区\",\n    \"大观区\",\n    \"宜秀区\",\n    \"桐城市\",\n    \"宿松县\",\n    \"枞阳县\",\n    \"太湖县\",\n    \"怀宁县\",\n    \"岳西县\",\n    \"望江县\",\n    \"潜山县\"] },\n\n\n  {\n    \"name\": \"黄山市\",\n    \"area\": [\n    \"屯溪区\",\n    \"黄山区\",\n    \"徽州区\",\n    \"休宁县\",\n    \"歙县\",\n    \"祁门县\",\n    \"黟县\"] },\n\n\n  {\n    \"name\": \"滁州市\",\n    \"area\": [\n    \"琅琊区\",\n    \"南谯区\",\n    \"天长市\",\n    \"明光市\",\n    \"全椒县\",\n    \"来安县\",\n    \"定远县\",\n    \"凤阳县\"] },\n\n\n  {\n    \"name\": \"阜阳市\",\n    \"area\": [\n    \"颍州区\",\n    \"颍东区\",\n    \"颍泉区\",\n    \"界首市\",\n    \"临泉县\",\n    \"颍上县\",\n    \"阜南县\",\n    \"太和县\"] },\n\n\n  {\n    \"name\": \"宿州市\",\n    \"area\": [\n    \"埇桥区\",\n    \"萧县\",\n    \"泗县\",\n    \"砀山县\",\n    \"灵璧县\"] },\n\n\n  {\n    \"name\": \"巢湖市\",\n    \"area\": [\n    \"居巢区\",\n    \"含山县\",\n    \"无为县\",\n    \"庐江县\",\n    \"和县\"] },\n\n\n  {\n    \"name\": \"六安市\",\n    \"area\": [\n    \"金安区\",\n    \"裕安区\",\n    \"寿县\",\n    \"霍山县\",\n    \"霍邱县\",\n    \"舒城县\",\n    \"金寨县\"] },\n\n\n  {\n    \"name\": \"亳州市\",\n    \"area\": [\n    \"谯城区\",\n    \"利辛县\",\n    \"涡阳县\",\n    \"蒙城县\"] },\n\n\n  {\n    \"name\": \"池州市\",\n    \"area\": [\n    \"贵池区\",\n    \"东至县\",\n    \"石台县\",\n    \"青阳县\"] },\n\n\n  {\n    \"name\": \"宣城市\",\n    \"area\": [\n    \"宣州区\",\n    \"宁国市\",\n    \"广德县\",\n    \"郎溪县\",\n    \"泾县\",\n    \"旌德县\",\n    \"绩溪县\"] }] },\n\n\n\n\n{\n  \"name\": \"福建省\",\n  \"city\": [\n  {\n    \"name\": \"福州市\",\n    \"area\": [\n    \"鼓楼区\",\n    \"台江区\",\n    \"仓山区\",\n    \"马尾区\",\n    \"晋安区\",\n    \"福清市\",\n    \"长乐市\",\n    \"闽侯县\",\n    \"闽清县\",\n    \"永泰县\",\n    \"连江县\",\n    \"罗源县\",\n    \"平潭县\"] },\n\n\n  {\n    \"name\": \"厦门市\",\n    \"area\": [\n    \"思明区\",\n    \"海沧区\",\n    \"湖里区\",\n    \"集美区\",\n    \"同安区\",\n    \"翔安区\"] },\n\n\n  {\n    \"name\": \"莆田市\",\n    \"area\": [\n    \"城厢区\",\n    \"涵江区\",\n    \"荔城区\",\n    \"秀屿区\",\n    \"仙游县\"] },\n\n\n  {\n    \"name\": \"三明市\",\n    \"area\": [\n    \"梅列区\",\n    \"三元区\",\n    \"永安市\",\n    \"明溪县\",\n    \"将乐县\",\n    \"大田县\",\n    \"宁化县\",\n    \"建宁县\",\n    \"沙县\",\n    \"尤溪县\",\n    \"清流县\",\n    \"泰宁县\"] },\n\n\n  {\n    \"name\": \"泉州市\",\n    \"area\": [\n    \"鲤城区\",\n    \"丰泽区\",\n    \"洛江区\",\n    \"泉港区\",\n    \"石狮市\",\n    \"晋江市\",\n    \"南安市\",\n    \"惠安县\",\n    \"永春县\",\n    \"安溪县\",\n    \"德化县\",\n    \"金门县\"] },\n\n\n  {\n    \"name\": \"漳州市\",\n    \"area\": [\n    \"芗城区\",\n    \"龙文区\",\n    \"龙海市\",\n    \"平和县\",\n    \"南靖县\",\n    \"诏安县\",\n    \"漳浦县\",\n    \"华安县\",\n    \"东山县\",\n    \"长泰县\",\n    \"云霄县\"] },\n\n\n  {\n    \"name\": \"南平市\",\n    \"area\": [\n    \"延平区\",\n    \"建瓯市\",\n    \"邵武市\",\n    \"武夷山市\",\n    \"建阳市\",\n    \"松溪县\",\n    \"光泽县\",\n    \"顺昌县\",\n    \"浦城县\",\n    \"政和县\"] },\n\n\n  {\n    \"name\": \"龙岩市\",\n    \"area\": [\n    \"新罗区\",\n    \"漳平市\",\n    \"长汀县\",\n    \"武平县\",\n    \"上杭县\",\n    \"永定县\",\n    \"连城县\"] },\n\n\n  {\n    \"name\": \"宁德市\",\n    \"area\": [\n    \"蕉城区\",\n    \"福安市\",\n    \"福鼎市\",\n    \"寿宁县\",\n    \"霞浦县\",\n    \"柘荣县\",\n    \"屏南县\",\n    \"古田县\",\n    \"周宁县\"] }] },\n\n\n\n\n{\n  \"name\": \"江西省\",\n  \"city\": [\n  {\n    \"name\": \"南昌市\",\n    \"area\": [\n    \"东湖区\",\n    \"西湖区\",\n    \"青云谱区\",\n    \"湾里区\",\n    \"青山湖区\",\n    \"新建县\",\n    \"南昌县\",\n    \"进贤县\",\n    \"安义县\"] },\n\n\n  {\n    \"name\": \"景德镇市\",\n    \"area\": [\n    \"珠山区\",\n    \"昌江区\",\n    \"乐平市\",\n    \"浮梁县\"] },\n\n\n  {\n    \"name\": \"萍乡市\",\n    \"area\": [\n    \"安源区\",\n    \"湘东区\",\n    \"莲花县\",\n    \"上栗县\",\n    \"芦溪县\"] },\n\n\n  {\n    \"name\": \"九江市\",\n    \"area\": [\n    \"浔阳区\",\n    \"庐山区\",\n    \"瑞昌市\",\n    \"九江县\",\n    \"星子县\",\n    \"武宁县\",\n    \"彭泽县\",\n    \"永修县\",\n    \"修水县\",\n    \"湖口县\",\n    \"德安县\",\n    \"都昌县\"] },\n\n\n  {\n    \"name\": \"新余市\",\n    \"area\": [\n    \"渝水区\",\n    \"分宜县\"] },\n\n\n  {\n    \"name\": \"鹰潭市\",\n    \"area\": [\n    \"月湖区\",\n    \"贵溪市\",\n    \"余江县\"] },\n\n\n  {\n    \"name\": \"赣州市\",\n    \"area\": [\n    \"章贡区\",\n    \"瑞金市\",\n    \"南康市\",\n    \"石城县\",\n    \"安远县\",\n    \"赣县\",\n    \"宁都县\",\n    \"寻乌县\",\n    \"兴国县\",\n    \"定南县\",\n    \"上犹县\",\n    \"于都县\",\n    \"龙南县\",\n    \"崇义县\",\n    \"信丰县\",\n    \"全南县\",\n    \"大余县\",\n    \"会昌县\"] },\n\n\n  {\n    \"name\": \"吉安市\",\n    \"area\": [\n    \"吉州区\",\n    \"青原区\",\n    \"井冈山市\",\n    \"吉安县\",\n    \"永丰县\",\n    \"永新县\",\n    \"新干县\",\n    \"泰和县\",\n    \"峡江县\",\n    \"遂川县\",\n    \"安福县\",\n    \"吉水县\",\n    \"万安县\"] },\n\n\n  {\n    \"name\": \"宜春市\",\n    \"area\": [\n    \"袁州区\",\n    \"丰城市\",\n    \"樟树市\",\n    \"高安市\",\n    \"铜鼓县\",\n    \"靖安县\",\n    \"宜丰县\",\n    \"奉新县\",\n    \"万载县\",\n    \"上高县\"] },\n\n\n  {\n    \"name\": \"抚州市\",\n    \"area\": [\n    \"临川区\",\n    \"南丰县\",\n    \"乐安县\",\n    \"金溪县\",\n    \"南城县\",\n    \"东乡县\",\n    \"资溪县\",\n    \"宜黄县\",\n    \"广昌县\",\n    \"黎川县\",\n    \"崇仁县\"] },\n\n\n  {\n    \"name\": \"上饶市\",\n    \"area\": [\n    \"信州区\",\n    \"德兴市\",\n    \"上饶县\",\n    \"广丰县\",\n    \"鄱阳县\",\n    \"婺源县\",\n    \"铅山县\",\n    \"余干县\",\n    \"横峰县\",\n    \"弋阳县\",\n    \"玉山县\",\n    \"万年县\"] }] },\n\n\n\n\n{\n  \"name\": \"山东省\",\n  \"city\": [\n  {\n    \"name\": \"济南市\",\n    \"area\": [\n    \"市中区\",\n    \"历下区\",\n    \"天桥区\",\n    \"槐荫区\",\n    \"历城区\",\n    \"长清区\",\n    \"章丘市\",\n    \"平阴县\",\n    \"济阳县\",\n    \"商河县\"] },\n\n\n  {\n    \"name\": \"青岛市\",\n    \"area\": [\n    \"市南区\",\n    \"市北区\",\n    \"城阳区\",\n    \"四方区\",\n    \"李沧区\",\n    \"黄岛区\",\n    \"崂山区\",\n    \"胶南市\",\n    \"胶州市\",\n    \"平度市\",\n    \"莱西市\",\n    \"即墨市\"] },\n\n\n  {\n    \"name\": \"淄博市\",\n    \"area\": [\n    \"张店区\",\n    \"临淄区\",\n    \"淄川区\",\n    \"博山区\",\n    \"周村区\",\n    \"桓台县\",\n    \"高青县\",\n    \"沂源县\"] },\n\n\n  {\n    \"name\": \"枣庄市\",\n    \"area\": [\n    \"市中区\",\n    \"山亭区\",\n    \"峄城区\",\n    \"台儿庄区\",\n    \"薛城区\",\n    \"滕州市\"] },\n\n\n  {\n    \"name\": \"东营市\",\n    \"area\": [\n    \"东营区\",\n    \"河口区\",\n    \"垦利县\",\n    \"广饶县\",\n    \"利津县\"] },\n\n\n  {\n    \"name\": \"烟台市\",\n    \"area\": [\n    \"芝罘区\",\n    \"福山区\",\n    \"牟平区\",\n    \"莱山区\",\n    \"龙口市\",\n    \"莱阳市\",\n    \"莱州市\",\n    \"招远市\",\n    \"蓬莱市\",\n    \"栖霞市\",\n    \"海阳市\",\n    \"长岛县\"] },\n\n\n  {\n    \"name\": \"潍坊市\",\n    \"area\": [\n    \"潍城区\",\n    \"寒亭区\",\n    \"坊子区\",\n    \"奎文区\",\n    \"青州市\",\n    \"诸城市\",\n    \"寿光市\",\n    \"安丘市\",\n    \"高密市\",\n    \"昌邑市\",\n    \"昌乐县\",\n    \"临朐县\"] },\n\n\n  {\n    \"name\": \"济宁市\",\n    \"area\": [\n    \"市中区\",\n    \"任城区\",\n    \"曲阜市\",\n    \"兖州市\",\n    \"邹城市\",\n    \"鱼台县\",\n    \"金乡县\",\n    \"嘉祥县\",\n    \"微山县\",\n    \"汶上县\",\n    \"泗水县\",\n    \"梁山县\"] },\n\n\n  {\n    \"name\": \"泰安市\",\n    \"area\": [\n    \"泰山区\",\n    \"岱岳区\",\n    \"新泰市\",\n    \"肥城市\",\n    \"宁阳县\",\n    \"东平县\"] },\n\n\n  {\n    \"name\": \"威海市\",\n    \"area\": [\n    \"环翠区\",\n    \"乳山市\",\n    \"文登市\",\n    \"荣成市\"] },\n\n\n  {\n    \"name\": \"日照市\",\n    \"area\": [\n    \"东港区\",\n    \"岚山区\",\n    \"五莲县\",\n    \"莒县\"] },\n\n\n  {\n    \"name\": \"莱芜市\",\n    \"area\": [\n    \"莱城区\",\n    \"钢城区\"] },\n\n\n  {\n    \"name\": \"临沂市\",\n    \"area\": [\n    \"兰山区\",\n    \"罗庄区\",\n    \"河东区\",\n    \"沂南县\",\n    \"郯城县\",\n    \"沂水县\",\n    \"苍山县\",\n    \"费县\",\n    \"平邑县\",\n    \"莒南县\",\n    \"蒙阴县\",\n    \"临沭县\"] },\n\n\n  {\n    \"name\": \"德州市\",\n    \"area\": [\n    \"德城区\",\n    \"乐陵市\",\n    \"禹城市\",\n    \"陵县\",\n    \"宁津县\",\n    \"齐河县\",\n    \"武城县\",\n    \"庆云县\",\n    \"平原县\",\n    \"夏津县\",\n    \"临邑县\"] },\n\n\n  {\n    \"name\": \"聊城市\",\n    \"area\": [\n    \"东昌府区\",\n    \"临清市\",\n    \"高唐县\",\n    \"阳谷县\",\n    \"茌平县\",\n    \"莘县\",\n    \"东阿县\",\n    \"冠县\"] },\n\n\n  {\n    \"name\": \"滨州市\",\n    \"area\": [\n    \"滨城区\",\n    \"邹平县\",\n    \"沾化县\",\n    \"惠民县\",\n    \"博兴县\",\n    \"阳信县\",\n    \"无棣县\"] },\n\n\n  {\n    \"name\": \"菏泽市\",\n    \"area\": [\n    \"牡丹区\",\n    \"鄄城县\",\n    \"单县\",\n    \"郓城县\",\n    \"曹县\",\n    \"定陶县\",\n    \"巨野县\",\n    \"东明县\",\n    \"成武县\"] }] },\n\n\n\n\n{\n  \"name\": \"河南省\",\n  \"city\": [\n  {\n    \"name\": \"郑州市\",\n    \"area\": [\n    \"中原区\",\n    \"金水区\",\n    \"二七区\",\n    \"管城回族区\",\n    \"上街区\",\n    \"惠济区\",\n    \"巩义市\",\n    \"新郑市\",\n    \"新密市\",\n    \"登封市\",\n    \"荥阳市\",\n    \"中牟县\"] },\n\n\n  {\n    \"name\": \"开封市\",\n    \"area\": [\n    \"鼓楼区\",\n    \"龙亭区\",\n    \"顺河回族区\",\n    \"禹王台区\",\n    \"金明区\",\n    \"开封县\",\n    \"尉氏县\",\n    \"兰考县\",\n    \"杞县\",\n    \"通许县\"] },\n\n\n  {\n    \"name\": \"洛阳市\",\n    \"area\": [\n    \"西工区\",\n    \"老城区\",\n    \"涧西区\",\n    \"瀍河回族区\",\n    \"洛龙区\",\n    \"吉利区\",\n    \"偃师市\",\n    \"孟津县\",\n    \"汝阳县\",\n    \"伊川县\",\n    \"洛宁县\",\n    \"嵩县\",\n    \"宜阳县\",\n    \"新安县\",\n    \"栾川县\"] },\n\n\n  {\n    \"name\": \"平顶山市\",\n    \"area\": [\n    \"新华区\",\n    \"卫东区\",\n    \"湛河区\",\n    \"石龙区\",\n    \"汝州市\",\n    \"舞钢市\",\n    \"宝丰县\",\n    \"叶县\",\n    \"郏县\",\n    \"鲁山县\"] },\n\n\n  {\n    \"name\": \"安阳市\",\n    \"area\": [\n    \"北关区\",\n    \"文峰区\",\n    \"殷都区\",\n    \"龙安区\",\n    \"林州市\",\n    \"安阳县\",\n    \"滑县\",\n    \"内黄县\",\n    \"汤阴县\"] },\n\n\n  {\n    \"name\": \"鹤壁市\",\n    \"area\": [\n    \"淇滨区\",\n    \"山城区\",\n    \"鹤山区\",\n    \"浚县\",\n    \"淇县\"] },\n\n\n  {\n    \"name\": \"新乡市\",\n    \"area\": [\n    \"卫滨区\",\n    \"红旗区\",\n    \"凤泉区\",\n    \"牧野区\",\n    \"卫辉市\",\n    \"辉县市\",\n    \"新乡县\",\n    \"获嘉县\",\n    \"原阳县\",\n    \"长垣县\",\n    \"封丘县\",\n    \"延津县\"] },\n\n\n  {\n    \"name\": \"焦作市\",\n    \"area\": [\n    \"解放区\",\n    \"中站区\",\n    \"马村区\",\n    \"山阳区\",\n    \"沁阳市\",\n    \"孟州市\",\n    \"修武县\",\n    \"温县\",\n    \"武陟县\",\n    \"博爱县\"] },\n\n\n  {\n    \"name\": \"濮阳市\",\n    \"area\": [\n    \"华龙区\",\n    \"濮阳县\",\n    \"南乐县\",\n    \"台前县\",\n    \"清丰县\",\n    \"范县\"] },\n\n\n  {\n    \"name\": \"许昌市\",\n    \"area\": [\n    \"魏都区\",\n    \"禹州市\",\n    \"长葛市\",\n    \"许昌县\",\n    \"鄢陵县\",\n    \"襄城县\"] },\n\n\n  {\n    \"name\": \"漯河市\",\n    \"area\": [\n    \"源汇区\",\n    \"郾城区\",\n    \"召陵区\",\n    \"临颍县\",\n    \"舞阳县\"] },\n\n\n  {\n    \"name\": \"三门峡市\",\n    \"area\": [\n    \"湖滨区\",\n    \"义马市\",\n    \"灵宝市\",\n    \"渑池县\",\n    \"卢氏县\",\n    \"陕县\"] },\n\n\n  {\n    \"name\": \"南阳市\",\n    \"area\": [\n    \"卧龙区\",\n    \"宛城区\",\n    \"邓州市\",\n    \"桐柏县\",\n    \"方城县\",\n    \"淅川县\",\n    \"镇平县\",\n    \"唐河县\",\n    \"南召县\",\n    \"内乡县\",\n    \"新野县\",\n    \"社旗县\",\n    \"西峡县\"] },\n\n\n  {\n    \"name\": \"商丘市\",\n    \"area\": [\n    \"梁园区\",\n    \"睢阳区\",\n    \"永城市\",\n    \"宁陵县\",\n    \"虞城县\",\n    \"民权县\",\n    \"夏邑县\",\n    \"柘城县\",\n    \"睢县\"] },\n\n\n  {\n    \"name\": \"信阳市\",\n    \"area\": [\n    \"浉河区\",\n    \"平桥区\",\n    \"潢川县\",\n    \"淮滨县\",\n    \"息县\",\n    \"新县\",\n    \"商城县\",\n    \"固始县\",\n    \"罗山县\",\n    \"光山县\"] },\n\n\n  {\n    \"name\": \"周口市\",\n    \"area\": [\n    \"川汇区\",\n    \"项城市\",\n    \"商水县\",\n    \"淮阳县\",\n    \"太康县\",\n    \"鹿邑县\",\n    \"西华县\",\n    \"扶沟县\",\n    \"沈丘县\",\n    \"郸城县\"] },\n\n\n  {\n    \"name\": \"驻马店市\",\n    \"area\": [\n    \"驿城区\",\n    \"确山县\",\n    \"新蔡县\",\n    \"上蔡县\",\n    \"西平县\",\n    \"泌阳县\",\n    \"平舆县\",\n    \"汝南县\",\n    \"遂平县\",\n    \"正阳县\"] },\n\n\n  {\n    \"name\": \"焦作市\",\n    \"area\": [\n    \"济源市\"] }] },\n\n\n\n\n{\n  \"name\": \"湖北省\",\n  \"city\": [\n  {\n    \"name\": \"武汉市\",\n    \"area\": [\n    \"江岸区\",\n    \"武昌区\",\n    \"江汉区\",\n    \"硚口区\",\n    \"汉阳区\",\n    \"青山区\",\n    \"洪山区\",\n    \"东西湖区\",\n    \"汉南区\",\n    \"蔡甸区\",\n    \"江夏区\",\n    \"黄陂区\",\n    \"新洲区\"] },\n\n\n  {\n    \"name\": \"黄石市\",\n    \"area\": [\n    \"黄石港区\",\n    \"西塞山区\",\n    \"下陆区\",\n    \"铁山区\",\n    \"大冶市\",\n    \"阳新县\"] },\n\n\n  {\n    \"name\": \"十堰市\",\n    \"area\": [\n    \"张湾区\",\n    \"茅箭区\",\n    \"丹江口市\",\n    \"郧县\",\n    \"竹山县\",\n    \"房县\",\n    \"郧西县\",\n    \"竹溪县\"] },\n\n\n  {\n    \"name\": \"荆州市\",\n    \"area\": [\n    \"沙市区\",\n    \"荆州区\",\n    \"洪湖市\",\n    \"石首市\",\n    \"松滋市\",\n    \"监利县\",\n    \"公安县\",\n    \"江陵县\"] },\n\n\n  {\n    \"name\": \"宜昌市\",\n    \"area\": [\n    \"西陵区\",\n    \"伍家岗区\",\n    \"点军区\",\n    \"猇亭区\",\n    \"夷陵区\",\n    \"宜都市\",\n    \"当阳市\",\n    \"枝江市\",\n    \"秭归县\",\n    \"远安县\",\n    \"兴山县\",\n    \"五峰土家族自治县\",\n    \"长阳土家族自治县\"] },\n\n\n  {\n    \"name\": \"襄樊市\",\n    \"area\": [\n    \"襄城区\",\n    \"樊城区\",\n    \"襄阳区\",\n    \"老河口市\",\n    \"枣阳市\",\n    \"宜城市\",\n    \"南漳县\",\n    \"谷城县\",\n    \"保康县\"] },\n\n\n  {\n    \"name\": \"鄂州市\",\n    \"area\": [\n    \"鄂城区\",\n    \"华容区\",\n    \"梁子湖区\"] },\n\n\n  {\n    \"name\": \"荆门市\",\n    \"area\": [\n    \"东宝区\",\n    \"掇刀区\",\n    \"钟祥市\",\n    \"京山县\",\n    \"沙洋县\"] },\n\n\n  {\n    \"name\": \"孝感市\",\n    \"area\": [\n    \"孝南区\",\n    \"应城市\",\n    \"安陆市\",\n    \"汉川市\",\n    \"云梦县\",\n    \"大悟县\",\n    \"孝昌县\"] },\n\n\n  {\n    \"name\": \"黄冈市\",\n    \"area\": [\n    \"黄州区\",\n    \"麻城市\",\n    \"武穴市\",\n    \"红安县\",\n    \"罗田县\",\n    \"浠水县\",\n    \"蕲春县\",\n    \"黄梅县\",\n    \"英山县\",\n    \"团风县\"] },\n\n\n  {\n    \"name\": \"咸宁市\",\n    \"area\": [\n    \"咸安区\",\n    \"赤壁市\",\n    \"嘉鱼县\",\n    \"通山县\",\n    \"崇阳县\",\n    \"通城县\"] },\n\n\n  {\n    \"name\": \"随州市\",\n    \"area\": [\n    \"曾都区\",\n    \"广水市\"] },\n\n\n  {\n    \"name\": \"恩施土家族苗族自治州\",\n    \"area\": [\n    \"恩施市\",\n    \"利川市\",\n    \"建始县\",\n    \"来凤县\",\n    \"巴东县\",\n    \"鹤峰县\",\n    \"宣恩县\",\n    \"咸丰县\"] },\n\n\n  {\n    \"name\": \"仙桃市\",\n    \"area\": [\n    \"仙桃\"] },\n\n\n  {\n    \"name\": \"天门市\",\n    \"area\": [\n    \"天门\"] },\n\n\n  {\n    \"name\": \"潜江市\",\n    \"area\": [\n    \"潜江\"] },\n\n\n  {\n    \"name\": \"神农架林区\",\n    \"area\": [\n    \"神农架林区\"] }] },\n\n\n\n\n{\n  \"name\": \"湖南省\",\n  \"city\": [\n  {\n    \"name\": \"长沙市\",\n    \"area\": [\n    \"岳麓区\",\n    \"芙蓉区\",\n    \"天心区\",\n    \"开福区\",\n    \"雨花区\",\n    \"浏阳市\",\n    \"长沙县\",\n    \"望城县\",\n    \"宁乡县\"] },\n\n\n  {\n    \"name\": \"株洲市\",\n    \"area\": [\n    \"天元区\",\n    \"荷塘区\",\n    \"芦淞区\",\n    \"石峰区\",\n    \"醴陵市\",\n    \"株洲县\",\n    \"炎陵县\",\n    \"茶陵县\",\n    \"攸县\"] },\n\n\n  {\n    \"name\": \"湘潭市\",\n    \"area\": [\n    \"岳塘区\",\n    \"雨湖区\",\n    \"湘乡市\",\n    \"韶山市\",\n    \"湘潭县\"] },\n\n\n  {\n    \"name\": \"衡阳市\",\n    \"area\": [\n    \"雁峰区\",\n    \"珠晖区\",\n    \"石鼓区\",\n    \"蒸湘区\",\n    \"南岳区\",\n    \"耒阳市\",\n    \"常宁市\",\n    \"衡阳县\",\n    \"衡东县\",\n    \"衡山县\",\n    \"衡南县\",\n    \"祁东县\"] },\n\n\n  {\n    \"name\": \"邵阳市\",\n    \"area\": [\n    \"双清区\",\n    \"大祥区\",\n    \"北塔区\",\n    \"武冈市\",\n    \"邵东县\",\n    \"洞口县\",\n    \"新邵县\",\n    \"绥宁县\",\n    \"新宁县\",\n    \"邵阳县\",\n    \"隆回县\",\n    \"城步苗族自治县\"] },\n\n\n  {\n    \"name\": \"岳阳市\",\n    \"area\": [\n    \"岳阳楼区\",\n    \"云溪区\",\n    \"君山区\",\n    \"临湘市\",\n    \"汨罗市\",\n    \"岳阳县\",\n    \"湘阴县\",\n    \"平江县\",\n    \"华容县\"] },\n\n\n  {\n    \"name\": \"常德市\",\n    \"area\": [\n    \"武陵区\",\n    \"鼎城区\",\n    \"津市市\",\n    \"澧县\",\n    \"临澧县\",\n    \"桃源县\",\n    \"汉寿县\",\n    \"安乡县\",\n    \"石门县\"] },\n\n\n  {\n    \"name\": \"张家界市\",\n    \"area\": [\n    \"永定区\",\n    \"武陵源区\",\n    \"慈利县\",\n    \"桑植县\"] },\n\n\n  {\n    \"name\": \"益阳市\",\n    \"area\": [\n    \"赫山区\",\n    \"资阳区\",\n    \"沅江市\",\n    \"桃江县\",\n    \"南县\",\n    \"安化县\"] },\n\n\n  {\n    \"name\": \"郴州市\",\n    \"area\": [\n    \"北湖区\",\n    \"苏仙区\",\n    \"资兴市\",\n    \"宜章县\",\n    \"汝城县\",\n    \"安仁县\",\n    \"嘉禾县\",\n    \"临武县\",\n    \"桂东县\",\n    \"永兴县\",\n    \"桂阳县\"] },\n\n\n  {\n    \"name\": \"永州市\",\n    \"area\": [\n    \"冷水滩区\",\n    \"零陵区\",\n    \"祁阳县\",\n    \"蓝山县\",\n    \"宁远县\",\n    \"新田县\",\n    \"东安县\",\n    \"江永县\",\n    \"道县\",\n    \"双牌县\",\n    \"江华瑶族自治县\"] },\n\n\n  {\n    \"name\": \"怀化市\",\n    \"area\": [\n    \"鹤城区\",\n    \"洪江市\",\n    \"会同县\",\n    \"沅陵县\",\n    \"辰溪县\",\n    \"溆浦县\",\n    \"中方县\",\n    \"新晃侗族自治县\",\n    \"芷江侗族自治县\",\n    \"通道侗族自治县\",\n    \"靖州苗族侗族自治县\",\n    \"麻阳苗族自治县\"] },\n\n\n  {\n    \"name\": \"娄底市\",\n    \"area\": [\n    \"娄星区\",\n    \"冷水江市\",\n    \"涟源市\",\n    \"新化县\",\n    \"双峰县\"] },\n\n\n  {\n    \"name\": \"湘西土家族苗族自治州\",\n    \"area\": [\n    \"吉首市\",\n    \"古丈县\",\n    \"龙山县\",\n    \"永顺县\",\n    \"凤凰县\",\n    \"泸溪县\",\n    \"保靖县\",\n    \"花垣县\"] }] },\n\n\n\n\n{\n  \"name\": \"广东省\",\n  \"city\": [\n  {\n    \"name\": \"广州市\",\n    \"area\": [\n    \"越秀区\",\n    \"荔湾区\",\n    \"海珠区\",\n    \"天河区\",\n    \"白云区\",\n    \"黄埔区\",\n    \"番禺区\",\n    \"花都区\",\n    \"南沙区\",\n    \"萝岗区\",\n    \"增城市\",\n    \"从化市\"] },\n\n\n  {\n    \"name\": \"深圳市\",\n    \"area\": [\n    \"福田区\",\n    \"罗湖区\",\n    \"南山区\",\n    \"宝安区\",\n    \"龙岗区\",\n    \"盐田区\"] },\n\n\n  {\n    \"name\": \"东莞市\",\n    \"area\": [\n    \"莞城\",\n    \"常平\",\n    \"塘厦\",\n    \"塘厦\",\n    \"塘厦\"] },\n\n\n  {\n    \"name\": \"中山市\",\n    \"area\": [\n    \"中山\"] },\n\n\n  {\n    \"name\": \"潮州市\",\n    \"area\": [\n    \"湘桥区\",\n    \"潮安县\",\n    \"饶平县\"] },\n\n\n  {\n    \"name\": \"揭阳市\",\n    \"area\": [\n    \"榕城区\",\n    \"揭东县\",\n    \"揭西县\",\n    \"惠来县\",\n    \"普宁市\"] },\n\n\n  {\n    \"name\": \"云浮市\",\n    \"area\": [\n    \"云城区\",\n    \"新兴县\",\n    \"郁南县\",\n    \"云安县\",\n    \"罗定市\"] },\n\n\n  {\n    \"name\": \"珠海市\",\n    \"area\": [\n    \"香洲区\",\n    \"斗门区\",\n    \"金湾区\"] },\n\n\n  {\n    \"name\": \"汕头市\",\n    \"area\": [\n    \"金平区\",\n    \"濠江区\",\n    \"龙湖区\",\n    \"潮阳区\",\n    \"潮南区\",\n    \"澄海区\",\n    \"南澳县\"] },\n\n\n  {\n    \"name\": \"韶关市\",\n    \"area\": [\n    \"浈江区\",\n    \"武江区\",\n    \"曲江区\",\n    \"乐昌市\",\n    \"南雄市\",\n    \"始兴县\",\n    \"仁化县\",\n    \"翁源县\",\n    \"新丰县\",\n    \"乳源瑶族自治县\"] },\n\n\n  {\n    \"name\": \"佛山市\",\n    \"area\": [\n    \"禅城区\",\n    \"南海区\",\n    \"顺德区\",\n    \"三水区\",\n    \"高明区\"] },\n\n\n  {\n    \"name\": \"江门市\",\n    \"area\": [\n    \"蓬江区\",\n    \"江海区\",\n    \"新会区\",\n    \"恩平市\",\n    \"台山市\",\n    \"开平市\",\n    \"鹤山市\"] },\n\n\n  {\n    \"name\": \"湛江市\",\n    \"area\": [\n    \"赤坎区\",\n    \"霞山区\",\n    \"坡头区\",\n    \"麻章区\",\n    \"吴川市\",\n    \"廉江市\",\n    \"雷州市\",\n    \"遂溪县\",\n    \"徐闻县\"] },\n\n\n  {\n    \"name\": \"茂名市\",\n    \"area\": [\n    \"茂南区\",\n    \"茂港区\",\n    \"化州市\",\n    \"信宜市\",\n    \"高州市\",\n    \"电白县\"] },\n\n\n  {\n    \"name\": \"肇庆市\",\n    \"area\": [\n    \"端州区\",\n    \"鼎湖区\",\n    \"高要市\",\n    \"四会市\",\n    \"广宁县\",\n    \"怀集县\",\n    \"封开县\",\n    \"德庆县\"] },\n\n\n  {\n    \"name\": \"惠州市\",\n    \"area\": [\n    \"惠城区\",\n    \"惠阳区\",\n    \"博罗县\",\n    \"惠东县\",\n    \"龙门县\"] },\n\n\n  {\n    \"name\": \"梅州市\",\n    \"area\": [\n    \"梅江区\",\n    \"兴宁市\",\n    \"梅县\",\n    \"大埔县\",\n    \"丰顺县\",\n    \"五华县\",\n    \"平远县\",\n    \"蕉岭县\"] },\n\n\n  {\n    \"name\": \"汕尾市\",\n    \"area\": [\n    \"城区\",\n    \"陆丰市\",\n    \"海丰县\",\n    \"陆河县\"] },\n\n\n  {\n    \"name\": \"河源市\",\n    \"area\": [\n    \"源城区\",\n    \"紫金县\",\n    \"龙川县\",\n    \"连平县\",\n    \"和平县\",\n    \"东源县\"] },\n\n\n  {\n    \"name\": \"阳江市\",\n    \"area\": [\n    \"江城区\",\n    \"阳春市\",\n    \"阳西县\",\n    \"阳东县\"] },\n\n\n  {\n    \"name\": \"清远市\",\n    \"area\": [\n    \"清城区\",\n    \"英德市\",\n    \"连州市\",\n    \"佛冈县\",\n    \"阳山县\",\n    \"清新县\",\n    \"连山壮族瑶族自治县\",\n    \"连南瑶族自治县\"] }] },\n\n\n\n\n{\n  \"name\": \"广西\",\n  \"city\": [\n  {\n    \"name\": \"南宁市\",\n    \"area\": [\n    \"青秀区\",\n    \"兴宁区\",\n    \"西乡塘区\",\n    \"良庆区\",\n    \"江南区\",\n    \"邕宁区\",\n    \"武鸣县\",\n    \"隆安县\",\n    \"马山县\",\n    \"上林县\",\n    \"宾阳县\",\n    \"横县\"] },\n\n\n  {\n    \"name\": \"柳州市\",\n    \"area\": [\n    \"城中区\",\n    \"鱼峰区\",\n    \"柳北区\",\n    \"柳南区\",\n    \"柳江县\",\n    \"柳城县\",\n    \"鹿寨县\",\n    \"融安县\",\n    \"融水苗族自治县\",\n    \"三江侗族自治县\"] },\n\n\n  {\n    \"name\": \"桂林市\",\n    \"area\": [\n    \"象山区\",\n    \"秀峰区\",\n    \"叠彩区\",\n    \"七星区\",\n    \"雁山区\",\n    \"阳朔县\",\n    \"临桂县\",\n    \"灵川县\",\n    \"全州县\",\n    \"平乐县\",\n    \"兴安县\",\n    \"灌阳县\",\n    \"荔浦县\",\n    \"资源县\",\n    \"永福县\",\n    \"龙胜各族自治县\",\n    \"恭城瑶族自治县\"] },\n\n\n  {\n    \"name\": \"梧州市\",\n    \"area\": [\n    \"万秀区\",\n    \"蝶山区\",\n    \"长洲区\",\n    \"岑溪市\",\n    \"苍梧县\",\n    \"藤县\",\n    \"蒙山县\"] },\n\n\n  {\n    \"name\": \"北海市\",\n    \"area\": [\n    \"海城区\",\n    \"银海区\",\n    \"铁山港区\",\n    \"合浦县\"] },\n\n\n  {\n    \"name\": \"防城港市\",\n    \"area\": [\n    \"港口区\",\n    \"防城区\",\n    \"东兴市\",\n    \"上思县\"] },\n\n\n  {\n    \"name\": \"钦州市\",\n    \"area\": [\n    \"钦南区\",\n    \"钦北区\",\n    \"灵山县\",\n    \"浦北县\"] },\n\n\n  {\n    \"name\": \"贵港市\",\n    \"area\": [\n    \"港北区\",\n    \"港南区\",\n    \"覃塘区\",\n    \"桂平市\",\n    \"平南县\"] },\n\n\n  {\n    \"name\": \"玉林市\",\n    \"area\": [\n    \"玉州区\",\n    \"北流市\",\n    \"容县\",\n    \"陆川县\",\n    \"博白县\",\n    \"兴业县\"] },\n\n\n  {\n    \"name\": \"百色市\",\n    \"area\": [\n    \"右江区\",\n    \"凌云县\",\n    \"平果县\",\n    \"西林县\",\n    \"乐业县\",\n    \"德保县\",\n    \"田林县\",\n    \"田阳县\",\n    \"靖西县\",\n    \"田东县\",\n    \"那坡县\",\n    \"隆林各族自治县\"] },\n\n\n  {\n    \"name\": \"贺州市\",\n    \"area\": [\n    \"八步区\",\n    \"钟山县\",\n    \"昭平县\",\n    \"富川瑶族自治县\"] },\n\n\n  {\n    \"name\": \"河池市\",\n    \"area\": [\n    \"金城江区\",\n    \"宜州市\",\n    \"天峨县\",\n    \"凤山县\",\n    \"南丹县\",\n    \"东兰县\",\n    \"都安瑶族自治县\",\n    \"罗城仫佬族自治县\",\n    \"巴马瑶族自治县\",\n    \"环江毛南族自治县\",\n    \"大化瑶族自治县\"] },\n\n\n  {\n    \"name\": \"来宾市\",\n    \"area\": [\n    \"兴宾区\",\n    \"合山市\",\n    \"象州县\",\n    \"武宣县\",\n    \"忻城县\",\n    \"金秀瑶族自治县\"] },\n\n\n  {\n    \"name\": \"崇左市\",\n    \"area\": [\n    \"江州区\",\n    \"凭祥市\",\n    \"宁明县\",\n    \"扶绥县\",\n    \"龙州县\",\n    \"大新县\",\n    \"天等县\"] }] },\n\n\n\n\n{\n  \"name\": \"海南省\",\n  \"city\": [\n  {\n    \"name\": \"海口市\",\n    \"area\": [\n    \"龙华区\",\n    \"秀英区\",\n    \"琼山区\",\n    \"美兰区\"] },\n\n\n  {\n    \"name\": \"三亚市\",\n    \"area\": [\n    \"三亚市\"] },\n\n\n  {\n    \"name\": \"五指山市\",\n    \"area\": [\n    \"五指山\"] },\n\n\n  {\n    \"name\": \"琼海市\",\n    \"area\": [\n    \"琼海\"] },\n\n\n  {\n    \"name\": \"儋州市\",\n    \"area\": [\n    \"儋州\"] },\n\n\n  {\n    \"name\": \"文昌市\",\n    \"area\": [\n    \"文昌\"] },\n\n\n  {\n    \"name\": \"万宁市\",\n    \"area\": [\n    \"万宁\"] },\n\n\n  {\n    \"name\": \"东方市\",\n    \"area\": [\n    \"东方\"] },\n\n\n  {\n    \"name\": \"澄迈县\",\n    \"area\": [\n    \"澄迈县\"] },\n\n\n  {\n    \"name\": \"定安县\",\n    \"area\": [\n    \"定安县\"] },\n\n\n  {\n    \"name\": \"屯昌县\",\n    \"area\": [\n    \"屯昌县\"] },\n\n\n  {\n    \"name\": \"临高县\",\n    \"area\": [\n    \"临高县\"] },\n\n\n  {\n    \"name\": \"白沙黎族自治县\",\n    \"area\": [\n    \"白沙黎族自治县\"] },\n\n\n  {\n    \"name\": \"昌江黎族自治县\",\n    \"area\": [\n    \"昌江黎族自治县\"] },\n\n\n  {\n    \"name\": \"乐东黎族自治县\",\n    \"area\": [\n    \"乐东黎族自治县\"] },\n\n\n  {\n    \"name\": \"陵水黎族自治县\",\n    \"area\": [\n    \"陵水黎族自治县\"] },\n\n\n  {\n    \"name\": \"保亭黎族苗族自治县\",\n    \"area\": [\n    \"保亭黎族苗族自治县\"] },\n\n\n  {\n    \"name\": \"琼中黎族苗族自治县\",\n    \"area\": [\n    \"琼中黎族苗族自治县\"] }] },\n\n\n\n\n{\n  \"name\": \"重庆市\",\n  \"city\": [\n  {\n    \"name\": \"重庆市\",\n    \"area\": [\n    \"渝中区\",\n    \"大渡口区\",\n    \"江北区\",\n    \"南岸区\",\n    \"北碚区\",\n    \"渝北区\",\n    \"巴南区\",\n    \"长寿区\",\n    \"双桥区\",\n    \"沙坪坝区\",\n    \"万盛区\",\n    \"万州区\",\n    \"涪陵区\",\n    \"黔江区\",\n    \"永川区\",\n    \"合川区\",\n    \"江津区\",\n    \"九龙坡区\",\n    \"南川区\",\n    \"綦江县\",\n    \"潼南县\",\n    \"荣昌县\",\n    \"璧山县\",\n    \"大足县\",\n    \"铜梁县\",\n    \"梁平县\",\n    \"开县\",\n    \"忠县\",\n    \"城口县\",\n    \"垫江县\",\n    \"武隆县\",\n    \"丰都县\",\n    \"奉节县\",\n    \"云阳县\",\n    \"巫溪县\",\n    \"巫山县\",\n    \"石柱土家族自治县\",\n    \"秀山土家族苗族自治县\",\n    \"酉阳土家族苗族自治县\",\n    \"彭水苗族土家族自治县\"] }] },\n\n\n\n\n{\n  \"name\": \"四川省\",\n  \"city\": [\n  {\n    \"name\": \"成都市\",\n    \"area\": [\n    \"青羊区\",\n    \"锦江区\",\n    \"金牛区\",\n    \"武侯区\",\n    \"成华区\",\n    \"龙泉驿区\",\n    \"青白江区\",\n    \"新都区\",\n    \"温江区\",\n    \"都江堰市\",\n    \"彭州市\",\n    \"邛崃市\",\n    \"崇州市\",\n    \"金堂县\",\n    \"郫县\",\n    \"新津县\",\n    \"双流县\",\n    \"蒲江县\",\n    \"大邑县\"] },\n\n\n  {\n    \"name\": \"自贡市\",\n    \"area\": [\n    \"大安区\",\n    \"自流井区\",\n    \"贡井区\",\n    \"沿滩区\",\n    \"荣县\",\n    \"富顺县\"] },\n\n\n  {\n    \"name\": \"攀枝花市\",\n    \"area\": [\n    \"仁和区\",\n    \"米易县\",\n    \"盐边县\",\n    \"东区\",\n    \"西区\"] },\n\n\n  {\n    \"name\": \"泸州市\",\n    \"area\": [\n    \"江阳区\",\n    \"纳溪区\",\n    \"龙马潭区\",\n    \"泸县\",\n    \"合江县\",\n    \"叙永县\",\n    \"古蔺县\"] },\n\n\n  {\n    \"name\": \"德阳市\",\n    \"area\": [\n    \"旌阳区\",\n    \"广汉市\",\n    \"什邡市\",\n    \"绵竹市\",\n    \"罗江县\",\n    \"中江县\"] },\n\n\n  {\n    \"name\": \"绵阳市\",\n    \"area\": [\n    \"涪城区\",\n    \"游仙区\",\n    \"江油市\",\n    \"盐亭县\",\n    \"三台县\",\n    \"平武县\",\n    \"安县\",\n    \"梓潼县\",\n    \"北川羌族自治县\"] },\n\n\n  {\n    \"name\": \"广元市\",\n    \"area\": [\n    \"元坝区\",\n    \"朝天区\",\n    \"青川县\",\n    \"旺苍县\",\n    \"剑阁县\",\n    \"苍溪县\",\n    \"市中区\"] },\n\n\n  {\n    \"name\": \"遂宁市\",\n    \"area\": [\n    \"船山区\",\n    \"安居区\",\n    \"射洪县\",\n    \"蓬溪县\",\n    \"大英县\"] },\n\n\n  {\n    \"name\": \"内江市\",\n    \"area\": [\n    \"市中区\",\n    \"东兴区\",\n    \"资中县\",\n    \"隆昌县\",\n    \"威远县\"] },\n\n\n  {\n    \"name\": \"乐山市\",\n    \"area\": [\n    \"市中区\",\n    \"五通桥区\",\n    \"沙湾区\",\n    \"金口河区\",\n    \"峨眉山市\",\n    \"夹江县\",\n    \"井研县\",\n    \"犍为县\",\n    \"沐川县\",\n    \"马边彝族自治县\",\n    \"峨边彝族自治县\"] },\n\n\n  {\n    \"name\": \"南充\",\n    \"area\": [\n    \"顺庆区\",\n    \"高坪区\",\n    \"嘉陵区\",\n    \"阆中市\",\n    \"营山县\",\n    \"蓬安县\",\n    \"仪陇县\",\n    \"南部县\",\n    \"西充县\"] },\n\n\n  {\n    \"name\": \"眉山市\",\n    \"area\": [\n    \"东坡区\",\n    \"仁寿县\",\n    \"彭山县\",\n    \"洪雅县\",\n    \"丹棱县\",\n    \"青神县\"] },\n\n\n  {\n    \"name\": \"宜宾市\",\n    \"area\": [\n    \"翠屏区\",\n    \"宜宾县\",\n    \"兴文县\",\n    \"南溪县\",\n    \"珙县\",\n    \"长宁县\",\n    \"高县\",\n    \"江安县\",\n    \"筠连县\",\n    \"屏山县\"] },\n\n\n  {\n    \"name\": \"广安市\",\n    \"area\": [\n    \"广安区\",\n    \"华蓥市\",\n    \"岳池县\",\n    \"邻水县\",\n    \"武胜县\"] },\n\n\n  {\n    \"name\": \"达州市\",\n    \"area\": [\n    \"通川区\",\n    \"万源市\",\n    \"达县\",\n    \"渠县\",\n    \"宣汉县\",\n    \"开江县\",\n    \"大竹县\"] },\n\n\n  {\n    \"name\": \"雅安市\",\n    \"area\": [\n    \"雨城区\",\n    \"芦山县\",\n    \"石棉县\",\n    \"名山县\",\n    \"天全县\",\n    \"荥经县\",\n    \"宝兴县\",\n    \"汉源县\"] },\n\n\n  {\n    \"name\": \"巴中市\",\n    \"area\": [\n    \"巴州区\",\n    \"南江县\",\n    \"平昌县\",\n    \"通江县\"] },\n\n\n  {\n    \"name\": \"资阳市\",\n    \"area\": [\n    \"雁江区\",\n    \"简阳市\",\n    \"安岳县\",\n    \"乐至县\"] },\n\n\n  {\n    \"name\": \"阿坝藏族羌族自治州\",\n    \"area\": [\n    \"马尔康县\",\n    \"九寨沟县\",\n    \"红原县\",\n    \"汶川县\",\n    \"阿坝县\",\n    \"理县\",\n    \"若尔盖县\",\n    \"小金县\",\n    \"黑水县\",\n    \"金川县\",\n    \"松潘县\",\n    \"壤塘县\",\n    \"茂县\"] },\n\n\n  {\n    \"name\": \"甘孜藏族自治州\",\n    \"area\": [\n    \"康定县\",\n    \"丹巴县\",\n    \"炉霍县\",\n    \"九龙县\",\n    \"甘孜县\",\n    \"雅江县\",\n    \"新龙县\",\n    \"道孚县\",\n    \"白玉县\",\n    \"理塘县\",\n    \"德格县\",\n    \"乡城县\",\n    \"石渠县\",\n    \"稻城县\",\n    \"色达县\",\n    \"巴塘县\",\n    \"泸定县\",\n    \"得荣县\"] },\n\n\n  {\n    \"name\": \"凉山彝族自治州\",\n    \"area\": [\n    \"西昌市\",\n    \"美姑县\",\n    \"昭觉县\",\n    \"金阳县\",\n    \"甘洛县\",\n    \"布拖县\",\n    \"雷波县\",\n    \"普格县\",\n    \"宁南县\",\n    \"喜德县\",\n    \"会东县\",\n    \"越西县\",\n    \"会理县\",\n    \"盐源县\",\n    \"德昌县\",\n    \"冕宁县\",\n    \"木里藏族自治县\"] }] },\n\n\n\n\n{\n  \"name\": \"贵州省\",\n  \"city\": [\n  {\n    \"name\": \"贵阳市\",\n    \"area\": [\n    \"南明区\",\n    \"云岩区\",\n    \"花溪区\",\n    \"乌当区\",\n    \"白云区\",\n    \"小河区\",\n    \"清镇市\",\n    \"开阳县\",\n    \"修文县\",\n    \"息烽县\"] },\n\n\n  {\n    \"name\": \"六盘水市\",\n    \"area\": [\n    \"钟山区\",\n    \"水城县\",\n    \"盘县\",\n    \"六枝特区\"] },\n\n\n  {\n    \"name\": \"遵义市\",\n    \"area\": [\n    \"红花岗区\",\n    \"汇川区\",\n    \"赤水市\",\n    \"仁怀市\",\n    \"遵义县\",\n    \"绥阳县\",\n    \"桐梓县\",\n    \"习水县\",\n    \"凤冈县\",\n    \"正安县\",\n    \"余庆县\",\n    \"湄潭县\",\n    \"道真仡佬族苗族自治县\",\n    \"务川仡佬族苗族自治县\"] },\n\n\n  {\n    \"name\": \"安顺市\",\n    \"area\": [\n    \"西秀区\",\n    \"普定县\",\n    \"平坝县\",\n    \"镇宁布依族苗族自治县\",\n    \"紫云苗族布依族自治县\",\n    \"关岭布依族苗族自治县\"] },\n\n\n  {\n    \"name\": \"铜仁地区\",\n    \"area\": [\n    \"铜仁市\",\n    \"德江县\",\n    \"江口县\",\n    \"思南县\",\n    \"石阡县\",\n    \"玉屏侗族自治县\",\n    \"松桃苗族自治县\",\n    \"印江土家族苗族自治县\",\n    \"沿河土家族自治县\",\n    \"万山特区\"] },\n\n\n  {\n    \"name\": \"毕节地区\",\n    \"area\": [\n    \"毕节市\",\n    \"黔西县\",\n    \"大方县\",\n    \"织金县\",\n    \"金沙县\",\n    \"赫章县\",\n    \"纳雍县\",\n    \"威宁彝族回族苗族自治县\"] },\n\n\n  {\n    \"name\": \"黔西南布依族苗族自治州\",\n    \"area\": [\n    \"兴义市\",\n    \"望谟县\",\n    \"兴仁县\",\n    \"普安县\",\n    \"册亨县\",\n    \"晴隆县\",\n    \"贞丰县\",\n    \"安龙县\"] },\n\n\n  {\n    \"name\": \"黔东南苗族侗族自治州\",\n    \"area\": [\n    \"凯里市\",\n    \"施秉县\",\n    \"从江县\",\n    \"锦屏县\",\n    \"镇远县\",\n    \"麻江县\",\n    \"台江县\",\n    \"天柱县\",\n    \"黄平县\",\n    \"榕江县\",\n    \"剑河县\",\n    \"三穗县\",\n    \"雷山县\",\n    \"黎平县\",\n    \"岑巩县\",\n    \"丹寨县\"] },\n\n\n  {\n    \"name\": \"黔南布依族苗族自治州\",\n    \"area\": [\n    \"都匀市\",\n    \"福泉市\",\n    \"贵定县\",\n    \"惠水县\",\n    \"罗甸县\",\n    \"瓮安县\",\n    \"荔波县\",\n    \"龙里县\",\n    \"平塘县\",\n    \"长顺县\",\n    \"独山县\",\n    \"三都水族自治县\"] }] },\n\n\n\n\n{\n  \"name\": \"云南省\",\n  \"city\": [\n  {\n    \"name\": \"昆明市\",\n    \"area\": [\n    \"盘龙区\",\n    \"五华区\",\n    \"官渡区\",\n    \"西山区\",\n    \"东川区\",\n    \"安宁市\",\n    \"呈贡县\",\n    \"晋宁县\",\n    \"富民县\",\n    \"宜良县\",\n    \"嵩明县\",\n    \"石林彝族自治县\",\n    \"禄劝彝族苗族自治县\",\n    \"寻甸回族彝族自治县\"] },\n\n\n  {\n    \"name\": \"曲靖市\",\n    \"area\": [\n    \"麒麟区\",\n    \"宣威市\",\n    \"马龙县\",\n    \"沾益县\",\n    \"富源县\",\n    \"罗平县\",\n    \"师宗县\",\n    \"陆良县\",\n    \"会泽县\"] },\n\n\n  {\n    \"name\": \"玉溪市\",\n    \"area\": [\n    \"红塔区\",\n    \"江川县\",\n    \"澄江县\",\n    \"通海县\",\n    \"华宁县\",\n    \"易门县\",\n    \"峨山彝族自治县\",\n    \"新平彝族傣族自治县\",\n    \"元江哈尼族彝族傣族自治县\"] },\n\n\n  {\n    \"name\": \"保山市\",\n    \"area\": [\n    \"隆阳区\",\n    \"施甸县\",\n    \"腾冲县\",\n    \"龙陵县\",\n    \"昌宁县\"] },\n\n\n  {\n    \"name\": \"昭通市\",\n    \"area\": [\n    \"昭阳区\",\n    \"鲁甸县\",\n    \"巧家县\",\n    \"盐津县\",\n    \"大关县\",\n    \"永善县\",\n    \"绥江县\",\n    \"镇雄县\",\n    \"彝良县\",\n    \"威信县\",\n    \"水富县\"] },\n\n\n  {\n    \"name\": \"丽江市\",\n    \"area\": [\n    \"古城区\",\n    \"永胜县\",\n    \"华坪县\",\n    \"玉龙纳西族自治县\",\n    \"宁蒗彝族自治县\"] },\n\n\n  {\n    \"name\": \"普洱市\",\n    \"area\": [\n    \"思茅区\",\n    \"普洱哈尼族彝族自治县\",\n    \"墨江哈尼族自治县\",\n    \"景东彝族自治县\",\n    \"景谷傣族彝族自治县\",\n    \"镇沅彝族哈尼族拉祜族自治县\",\n    \"江城哈尼族彝族自治县\",\n    \"孟连傣族拉祜族佤族自治县\",\n    \"澜沧拉祜族自治县\",\n    \"西盟佤族自治县\"] },\n\n\n  {\n    \"name\": \"临沧市\",\n    \"area\": [\n    \"临翔区\",\n    \"凤庆县\",\n    \"云县\",\n    \"永德县\",\n    \"镇康县\",\n    \"双江拉祜族佤族布朗族傣族自治县\",\n    \"耿马傣族佤族自治县\",\n    \"沧源佤族自治县\"] },\n\n\n  {\n    \"name\": \"德宏傣族景颇族自治州\",\n    \"area\": [\n    \"潞西市\",\n    \"瑞丽市\",\n    \"梁河县\",\n    \"盈江县\",\n    \"陇川县\"] },\n\n\n  {\n    \"name\": \"怒江傈僳族自治州\",\n    \"area\": [\n    \"泸水县\",\n    \"福贡县\",\n    \"贡山独龙族怒族自治县\",\n    \"兰坪白族普米族自治县\"] },\n\n\n  {\n    \"name\": \"迪庆藏族自治州\",\n    \"area\": [\n    \"香格里拉县\",\n    \"德钦县\",\n    \"维西傈僳族自治县\"] },\n\n\n  {\n    \"name\": \"大理白族自治州\",\n    \"area\": [\n    \"大理市\",\n    \"祥云县\",\n    \"宾川县\",\n    \"弥渡县\",\n    \"永平县\",\n    \"云龙县\",\n    \"洱源县\",\n    \"剑川县\",\n    \"鹤庆县\",\n    \"漾濞彝族自治县\",\n    \"南涧彝族自治县\",\n    \"巍山彝族回族自治县\"] },\n\n\n  {\n    \"name\": \"楚雄彝族自治州\",\n    \"area\": [\n    \"楚雄市\",\n    \"双柏县\",\n    \"牟定县\",\n    \"南华县\",\n    \"姚安县\",\n    \"大姚县\",\n    \"永仁县\",\n    \"元谋县\",\n    \"武定县\",\n    \"禄丰县\"] },\n\n\n  {\n    \"name\": \"红河哈尼族彝族自治州\",\n    \"area\": [\n    \"蒙自县\",\n    \"个旧市\",\n    \"开远市\",\n    \"绿春县\",\n    \"建水县\",\n    \"石屏县\",\n    \"弥勒县\",\n    \"泸西县\",\n    \"元阳县\",\n    \"红河县\",\n    \"金平苗族瑶族傣族自治县\",\n    \"河口瑶族自治县\",\n    \"屏边苗族自治县\"] },\n\n\n  {\n    \"name\": \"文山壮族苗族自治州\",\n    \"area\": [\n    \"文山县\",\n    \"砚山县\",\n    \"西畴县\",\n    \"麻栗坡县\",\n    \"马关县\",\n    \"丘北县\",\n    \"广南县\",\n    \"富宁县\"] },\n\n\n  {\n    \"name\": \"西双版纳傣族自治州\",\n    \"area\": [\n    \"景洪市\",\n    \"勐海县\",\n    \"勐腊县\"] }] },\n\n\n\n\n{\n  \"name\": \"西藏\",\n  \"city\": [\n  {\n    \"name\": \"拉萨市\",\n    \"area\": [\n    \"城关区\",\n    \"林周县\",\n    \"当雄县\",\n    \"尼木县\",\n    \"曲水县\",\n    \"堆龙德庆县\",\n    \"达孜县\",\n    \"墨竹工卡县\"] },\n\n\n  {\n    \"name\": \"那曲地区\",\n    \"area\": [\n    \"那曲县\",\n    \"嘉黎县\",\n    \"比如县\",\n    \"聂荣县\",\n    \"安多县\",\n    \"申扎县\",\n    \"索县\",\n    \"班戈县\",\n    \"巴青县\",\n    \"尼玛县\"] },\n\n\n  {\n    \"name\": \"昌都地区\",\n    \"area\": [\n    \"昌都县\",\n    \"江达县\",\n    \"贡觉县\",\n    \"类乌齐县\",\n    \"丁青县\",\n    \"察雅县\",\n    \"八宿县\",\n    \"左贡县\",\n    \"芒康县\",\n    \"洛隆县\",\n    \"边坝县\"] },\n\n\n  {\n    \"name\": \"林芝地区\",\n    \"area\": [\n    \"林芝县\",\n    \"工布江达县\",\n    \"米林县\",\n    \"墨脱县\",\n    \"波密县\",\n    \"察隅县\",\n    \"朗县\"] },\n\n\n  {\n    \"name\": \"山南地区\",\n    \"area\": [\n    \"乃东县\",\n    \"扎囊县\",\n    \"贡嘎县\",\n    \"桑日县\",\n    \"琼结县\",\n    \"曲松县\",\n    \"措美县\",\n    \"洛扎县\",\n    \"加查县\",\n    \"隆子县\",\n    \"错那县\",\n    \"浪卡子县\"] },\n\n\n  {\n    \"name\": \"日喀则地区\",\n    \"area\": [\n    \"日喀则市\",\n    \"南木林县\",\n    \"江孜县\",\n    \"定日县\",\n    \"萨迦县\",\n    \"拉孜县\",\n    \"昂仁县\",\n    \"谢通门县\",\n    \"白朗县\",\n    \"仁布县\",\n    \"康马县\",\n    \"定结县\",\n    \"仲巴县\",\n    \"亚东县\",\n    \"吉隆县\",\n    \"聂拉木县\",\n    \"萨嘎县\",\n    \"岗巴县\"] },\n\n\n  {\n    \"name\": \"阿里地区\",\n    \"area\": [\n    \"噶尔县\",\n    \"普兰县\",\n    \"札达县\",\n    \"日土县\",\n    \"革吉县\",\n    \"改则县\",\n    \"措勤县\"] }] },\n\n\n\n\n{\n  \"name\": \"陕西省\",\n  \"city\": [\n  {\n    \"name\": \"西安市\",\n    \"area\": [\n    \"莲湖区\",\n    \"新城区\",\n    \"碑林区\",\n    \"雁塔区\",\n    \"灞桥区\",\n    \"未央区\",\n    \"阎良区\",\n    \"临潼区\",\n    \"长安区\",\n    \"高陵县\",\n    \"蓝田县\",\n    \"户县\",\n    \"周至县\"] },\n\n\n  {\n    \"name\": \"铜川市\",\n    \"area\": [\n    \"耀州区\",\n    \"王益区\",\n    \"印台区\",\n    \"宜君县\"] },\n\n\n  {\n    \"name\": \"宝鸡市\",\n    \"area\": [\n    \"渭滨区\",\n    \"金台区\",\n    \"陈仓区\",\n    \"岐山县\",\n    \"凤翔县\",\n    \"陇县\",\n    \"太白县\",\n    \"麟游县\",\n    \"扶风县\",\n    \"千阳县\",\n    \"眉县\",\n    \"凤县\"] },\n\n\n  {\n    \"name\": \"咸阳市\",\n    \"area\": [\n    \"秦都区\",\n    \"渭城区\",\n    \"杨陵区\",\n    \"兴平市\",\n    \"礼泉县\",\n    \"泾阳县\",\n    \"永寿县\",\n    \"三原县\",\n    \"彬县\",\n    \"旬邑县\",\n    \"长武县\",\n    \"乾县\",\n    \"武功县\",\n    \"淳化县\"] },\n\n\n  {\n    \"name\": \"渭南市\",\n    \"area\": [\n    \"临渭区\",\n    \"韩城市\",\n    \"华阴市\",\n    \"蒲城县\",\n    \"潼关县\",\n    \"白水县\",\n    \"澄城县\",\n    \"华县\",\n    \"合阳县\",\n    \"富平县\",\n    \"大荔县\"] },\n\n\n  {\n    \"name\": \"延安市\",\n    \"area\": [\n    \"宝塔区\",\n    \"安塞县\",\n    \"洛川县\",\n    \"子长县\",\n    \"黄陵县\",\n    \"延川县\",\n    \"富县\",\n    \"延长县\",\n    \"甘泉县\",\n    \"宜川县\",\n    \"志丹县\",\n    \"黄龙县\",\n    \"吴起县\"] },\n\n\n  {\n    \"name\": \"汉中市\",\n    \"area\": [\n    \"汉台区\",\n    \"留坝县\",\n    \"镇巴县\",\n    \"城固县\",\n    \"南郑县\",\n    \"洋县\",\n    \"宁强县\",\n    \"佛坪县\",\n    \"勉县\",\n    \"西乡县\",\n    \"略阳县\"] },\n\n\n  {\n    \"name\": \"榆林市\",\n    \"area\": [\n    \"榆阳区\",\n    \"清涧县\",\n    \"绥德县\",\n    \"神木县\",\n    \"佳县\",\n    \"府谷县\",\n    \"子洲县\",\n    \"靖边县\",\n    \"横山县\",\n    \"米脂县\",\n    \"吴堡县\",\n    \"定边县\"] },\n\n\n  {\n    \"name\": \"安康市\",\n    \"area\": [\n    \"汉滨区\",\n    \"紫阳县\",\n    \"岚皋县\",\n    \"旬阳县\",\n    \"镇坪县\",\n    \"平利县\",\n    \"石泉县\",\n    \"宁陕县\",\n    \"白河县\",\n    \"汉阴县\"] },\n\n\n  {\n    \"name\": \"商洛市\",\n    \"area\": [\n    \"商州区\",\n    \"镇安县\",\n    \"山阳县\",\n    \"洛南县\",\n    \"商南县\",\n    \"丹凤县\",\n    \"柞水县\"] }] },\n\n\n\n\n{\n  \"name\": \"甘肃省\",\n  \"city\": [\n  {\n    \"name\": \"兰州市\",\n    \"area\": [\n    \"城关区\",\n    \"七里河区\",\n    \"西固区\",\n    \"安宁区\",\n    \"红古区\",\n    \"永登县\",\n    \"皋兰县\",\n    \"榆中县\"] },\n\n\n  {\n    \"name\": \"嘉峪关市\",\n    \"area\": [\n    \"嘉峪关市\"] },\n\n\n  {\n    \"name\": \"金昌市\",\n    \"area\": [\n    \"金川区\",\n    \"永昌县\"] },\n\n\n  {\n    \"name\": \"白银市\",\n    \"area\": [\n    \"白银区\",\n    \"平川区\",\n    \"靖远县\",\n    \"会宁县\",\n    \"景泰县\"] },\n\n\n  {\n    \"name\": \"天水市\",\n    \"area\": [\n    \"清水县\",\n    \"秦安县\",\n    \"甘谷县\",\n    \"武山县\",\n    \"张家川回族自治县\",\n    \"北道区\",\n    \"秦城区\"] },\n\n\n  {\n    \"name\": \"武威市\",\n    \"area\": [\n    \"凉州区\",\n    \"民勤县\",\n    \"古浪县\",\n    \"天祝藏族自治县\"] },\n\n\n  {\n    \"name\": \"酒泉市\",\n    \"area\": [\n    \"肃州区\",\n    \"玉门市\",\n    \"敦煌市\",\n    \"金塔县\",\n    \"肃北蒙古族自治县\",\n    \"阿克塞哈萨克族自治县\",\n    \"安西县\"] },\n\n\n  {\n    \"name\": \"张掖市\",\n    \"area\": [\n    \"甘州区\",\n    \"民乐县\",\n    \"临泽县\",\n    \"高台县\",\n    \"山丹县\",\n    \"肃南裕固族自治县\"] },\n\n\n  {\n    \"name\": \"庆阳市\",\n    \"area\": [\n    \"西峰区\",\n    \"庆城县\",\n    \"环县\",\n    \"华池县\",\n    \"合水县\",\n    \"正宁县\",\n    \"宁县\",\n    \"镇原县\"] },\n\n\n  {\n    \"name\": \"平凉市\",\n    \"area\": [\n    \"崆峒区\",\n    \"泾川县\",\n    \"灵台县\",\n    \"崇信县\",\n    \"华亭县\",\n    \"庄浪县\",\n    \"静宁县\"] },\n\n\n  {\n    \"name\": \"定西市\",\n    \"area\": [\n    \"安定区\",\n    \"通渭县\",\n    \"临洮县\",\n    \"漳县\",\n    \"岷县\",\n    \"渭源县\",\n    \"陇西县\"] },\n\n\n  {\n    \"name\": \"陇南市\",\n    \"area\": [\n    \"武都区\",\n    \"成县\",\n    \"宕昌县\",\n    \"康县\",\n    \"文县\",\n    \"西和县\",\n    \"礼县\",\n    \"两当县\",\n    \"徽县\"] },\n\n\n  {\n    \"name\": \"临夏回族自治州\",\n    \"area\": [\n    \"临夏市\",\n    \"临夏县\",\n    \"康乐县\",\n    \"永靖县\",\n    \"广河县\",\n    \"和政县\",\n    \"东乡族自治县\",\n    \"积石山保安族东乡族撒拉族自治县\"] },\n\n\n  {\n    \"name\": \"甘南藏族自治州\",\n    \"area\": [\n    \"合作市\",\n    \"临潭县\",\n    \"卓尼县\",\n    \"舟曲县\",\n    \"迭部县\",\n    \"玛曲县\",\n    \"碌曲县\",\n    \"夏河县\"] }] },\n\n\n\n\n{\n  \"name\": \"青海省\",\n  \"city\": [\n  {\n    \"name\": \"西宁市\",\n    \"area\": [\n    \"城中区\",\n    \"城东区\",\n    \"城西区\",\n    \"城北区\",\n    \"湟源县\",\n    \"湟中县\",\n    \"大通回族土族自治县\"] },\n\n\n  {\n    \"name\": \"海东地区\",\n    \"area\": [\n    \"平安县\",\n    \"乐都县\",\n    \"民和回族土族自治县\",\n    \"互助土族自治县\",\n    \"化隆回族自治县\",\n    \"循化撒拉族自治县\"] },\n\n\n  {\n    \"name\": \"海北藏族自治州\",\n    \"area\": [\n    \"海晏县\",\n    \"祁连县\",\n    \"刚察县\",\n    \"门源回族自治县\"] },\n\n\n  {\n    \"name\": \"海南藏族自治州\",\n    \"area\": [\n    \"共和县\",\n    \"同德县\",\n    \"贵德县\",\n    \"兴海县\",\n    \"贵南县\"] },\n\n\n  {\n    \"name\": \"黄南藏族自治州\",\n    \"area\": [\n    \"同仁县\",\n    \"尖扎县\",\n    \"泽库县\",\n    \"河南蒙古族自治县\"] },\n\n\n  {\n    \"name\": \"果洛藏族自治州\",\n    \"area\": [\n    \"玛沁县\",\n    \"班玛县\",\n    \"甘德县\",\n    \"达日县\",\n    \"久治县\",\n    \"玛多县\"] },\n\n\n  {\n    \"name\": \"玉树藏族自治州\",\n    \"area\": [\n    \"玉树县\",\n    \"杂多县\",\n    \"称多县\",\n    \"治多县\",\n    \"囊谦县\",\n    \"曲麻莱县\"] },\n\n\n  {\n    \"name\": \"海西蒙古族藏族自治州\",\n    \"area\": [\n    \"德令哈市\",\n    \"格尔木市\",\n    \"乌兰县\",\n    \"都兰县\",\n    \"天峻县\"] }] },\n\n\n\n\n{\n  \"name\": \"宁夏\",\n  \"city\": [\n  {\n    \"name\": \"银川市\",\n    \"area\": [\n    \"兴庆区\",\n    \"西夏区\",\n    \"金凤区\",\n    \"灵武市\",\n    \"永宁县\",\n    \"贺兰县\"] },\n\n\n  {\n    \"name\": \"石嘴山市\",\n    \"area\": [\n    \"大武口区\",\n    \"惠农区\",\n    \"平罗县\"] },\n\n\n  {\n    \"name\": \"吴忠市\",\n    \"area\": [\n    \"利通区\",\n    \"青铜峡市\",\n    \"盐池县\",\n    \"同心县\"] },\n\n\n  {\n    \"name\": \"固原市\",\n    \"area\": [\n    \"原州区\",\n    \"西吉县\",\n    \"隆德县\",\n    \"泾源县\",\n    \"彭阳县\"] },\n\n\n  {\n    \"name\": \"中卫市\",\n    \"area\": [\n    \"沙坡头区\",\n    \"中宁县\",\n    \"海原县\"] }] },\n\n\n\n\n{\n  \"name\": \"新疆\",\n  \"city\": [\n  {\n    \"name\": \"乌鲁木齐市\",\n    \"area\": [\n    \"天山区\",\n    \"沙依巴克区\",\n    \"新市区\",\n    \"水磨沟区\",\n    \"头屯河区\",\n    \"达坂城区\",\n    \"东山区\",\n    \"乌鲁木齐县\"] },\n\n\n  {\n    \"name\": \"克拉玛依市\",\n    \"area\": [\n    \"克拉玛依区\",\n    \"独山子区\",\n    \"白碱滩区\",\n    \"乌尔禾区\"] },\n\n\n  {\n    \"name\": \"吐鲁番地区\",\n    \"area\": [\n    \"吐鲁番市\",\n    \"托克逊县\",\n    \"鄯善县\"] },\n\n\n  {\n    \"name\": \"哈密地区\",\n    \"area\": [\n    \"哈密市\",\n    \"伊吾县\",\n    \"巴里坤哈萨克自治县\"] },\n\n\n  {\n    \"name\": \"和田地区\",\n    \"area\": [\n    \"和田市\",\n    \"和田县\",\n    \"洛浦县\",\n    \"民丰县\",\n    \"皮山县\",\n    \"策勒县\",\n    \"于田县\",\n    \"墨玉县\"] },\n\n\n  {\n    \"name\": \"阿克苏地区\",\n    \"area\": [\n    \"阿克苏市\",\n    \"温宿县\",\n    \"沙雅县\",\n    \"拜城县\",\n    \"阿瓦提县\",\n    \"库车县\",\n    \"柯坪县\",\n    \"新和县\",\n    \"乌什县\"] },\n\n\n  {\n    \"name\": \"喀什地区\",\n    \"area\": [\n    \"喀什市\",\n    \"巴楚县\",\n    \"泽普县\",\n    \"伽师县\",\n    \"叶城县\",\n    \"岳普湖县\",\n    \"疏勒县\",\n    \"麦盖提县\",\n    \"英吉沙县\",\n    \"莎车县\",\n    \"疏附县\",\n    \"塔什库尔干塔吉克自治县\"] },\n\n\n  {\n    \"name\": \"克孜勒苏柯尔克孜自治州\",\n    \"area\": [\n    \"阿图什市\",\n    \"阿合奇县\",\n    \"乌恰县\",\n    \"阿克陶县\"] },\n\n\n  {\n    \"name\": \"巴音郭楞蒙古自治州\",\n    \"area\": [\n    \"库尔勒市\",\n    \"和静县\",\n    \"尉犁县\",\n    \"和硕县\",\n    \"且末县\",\n    \"博湖县\",\n    \"轮台县\",\n    \"若羌县\",\n    \"焉耆回族自治县\"] },\n\n\n  {\n    \"name\": \"昌吉回族自治州\",\n    \"area\": [\n    \"昌吉市\",\n    \"阜康市\",\n    \"奇台县\",\n    \"玛纳斯县\",\n    \"吉木萨尔县\",\n    \"呼图壁县\",\n    \"木垒哈萨克自治县\",\n    \"米泉市\"] },\n\n\n  {\n    \"name\": \"博尔塔拉蒙古自治州\",\n    \"area\": [\n    \"博乐市\",\n    \"精河县\",\n    \"温泉县\"] },\n\n\n  {\n    \"name\": \"石河子\",\n    \"area\": [\n    \"石河子\"] },\n\n\n  {\n    \"name\": \"阿拉尔\",\n    \"area\": [\n    \"阿拉尔\"] },\n\n\n  {\n    \"name\": \"图木舒克\",\n    \"area\": [\n    \"图木舒克\"] },\n\n\n  {\n    \"name\": \"五家渠\",\n    \"area\": [\n    \"五家渠\"] },\n\n\n  {\n    \"name\": \"伊犁哈萨克自治州\",\n    \"area\": [\n    \"伊宁市\",\n    \"奎屯市\",\n    \"伊宁县\",\n    \"特克斯县\",\n    \"尼勒克县\",\n    \"昭苏县\",\n    \"新源县\",\n    \"霍城县\",\n    \"巩留县\",\n    \"察布查尔锡伯自治县\",\n    \"塔城地区\",\n    \"阿勒泰地区\"] }] },\n\n\n\n\n{\n  \"name\": \"台湾省\",\n  \"city\": [\n  {\n    \"name\": \"台北市\",\n    \"area\": [\n    \"内湖区\",\n    \"南港区\",\n    \"中正区\",\n    \"万华区\",\n    \"大同区\",\n    \"中山区\",\n    \"松山区\",\n    \"大安区\",\n    \"信义区\",\n    \"文山区\",\n    \"士林区\",\n    \"北投区\"] },\n\n\n  {\n    \"name\": \"新北市\",\n    \"area\": [\n    \"板桥区\",\n    \"汐止区\",\n    \"新店区\"] },\n\n\n  {\n    \"name\": \"桃园市\",\n    \"area\": [\n    \"其他\"] },\n\n\n  {\n    \"name\": \"台中市\",\n    \"area\": [\n    \"其他\"] },\n\n\n  {\n    \"name\": \"台南市\",\n    \"area\": [\n    \"其他\"] },\n\n\n  {\n    \"name\": \"高雄市\",\n    \"area\": [\n    \"其他\"] }] },\n\n\n\n\n{\n  \"name\": \"澳门\",\n  \"city\": [\n  {\n    \"name\": \"澳门\",\n    \"area\": [\n    \"花地玛堂区\",\n    \"圣安多尼堂区\",\n    \"大堂区\",\n    \"望德堂区\",\n    \"风顺堂区\",\n    \"嘉模堂区\",\n    \"圣方济各堂区\",\n    \"路凼\"] }] },\n\n\n\n\n{\n  \"name\": \"香港\",\n  \"city\": [\n  {\n    \"name\": \"香港\",\n    \"area\": [\n    \"深水埗区\",\n    \"油尖旺区\",\n    \"九龙城区\",\n    \"黄大仙区\",\n    \"观塘区\",\n    \"北区\",\n    \"大埔区\",\n    \"沙田区\",\n    \"西贡区\",\n    \"元朗区\",\n    \"屯门区\",\n    \"荃湾区\",\n    \"葵青区\",\n    \"离岛区\",\n    \"中西区\",\n    \"湾仔区\",\n    \"东区\",\n    \"南区\"] }] }];exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///540\n");

/***/ }),

/***/ 6:
/*!******************************************************!*\
  !*** ./node_modules/@dcloudio/uni-stat/package.json ***!
  \******************************************************/
/*! exports provided: _from, _id, _inBundle, _integrity, _location, _phantomChildren, _requested, _requiredBy, _resolved, _shasum, _spec, _where, author, bugs, bundleDependencies, deprecated, description, devDependencies, files, gitHead, homepage, license, main, name, repository, scripts, version, default */
/***/ (function(module) {

eval("module.exports = {\"_from\":\"@dcloudio/uni-stat@next\",\"_id\":\"@dcloudio/uni-stat@2.0.0-26420200313001\",\"_inBundle\":false,\"_integrity\":\"sha512-7dPuazTiDmUyRcw+WW+UlWGKH0eeCUB+p0P4pJVKEHjpdXnXgvDQCSdJk764NH99TfsUycnuxecP5oHckVa88g==\",\"_location\":\"/@dcloudio/uni-stat\",\"_phantomChildren\":{},\"_requested\":{\"type\":\"tag\",\"registry\":true,\"raw\":\"@dcloudio/uni-stat@next\",\"name\":\"@dcloudio/uni-stat\",\"escapedName\":\"@dcloudio%2funi-stat\",\"scope\":\"@dcloudio\",\"rawSpec\":\"next\",\"saveSpec\":null,\"fetchSpec\":\"next\"},\"_requiredBy\":[\"#USER\",\"/\",\"/@dcloudio/vue-cli-plugin-uni\"],\"_resolved\":\"https://registry.npmjs.org/@dcloudio/uni-stat/-/uni-stat-2.0.0-26420200313001.tgz\",\"_shasum\":\"a006e329e033cd412accfa635f8933dbb822a9c3\",\"_spec\":\"@dcloudio/uni-stat@next\",\"_where\":\"/Users/guoshengqiang/Documents/dcloud-plugins/release/uniapp-cli\",\"author\":\"\",\"bugs\":{\"url\":\"https://github.com/dcloudio/uni-app/issues\"},\"bundleDependencies\":false,\"deprecated\":false,\"description\":\"\",\"devDependencies\":{\"@babel/core\":\"^7.5.5\",\"@babel/preset-env\":\"^7.5.5\",\"eslint\":\"^6.1.0\",\"rollup\":\"^1.19.3\",\"rollup-plugin-babel\":\"^4.3.3\",\"rollup-plugin-clear\":\"^2.0.7\",\"rollup-plugin-commonjs\":\"^10.0.2\",\"rollup-plugin-copy\":\"^3.1.0\",\"rollup-plugin-eslint\":\"^7.0.0\",\"rollup-plugin-json\":\"^4.0.0\",\"rollup-plugin-node-resolve\":\"^5.2.0\",\"rollup-plugin-replace\":\"^2.2.0\",\"rollup-plugin-uglify\":\"^6.0.2\"},\"files\":[\"dist\",\"package.json\",\"LICENSE\"],\"gitHead\":\"b1fdbafab5dd4673cff64188a5203d0c947e4f50\",\"homepage\":\"https://github.com/dcloudio/uni-app#readme\",\"license\":\"Apache-2.0\",\"main\":\"dist/index.js\",\"name\":\"@dcloudio/uni-stat\",\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/dcloudio/uni-app.git\",\"directory\":\"packages/uni-stat\"},\"scripts\":{\"build\":\"NODE_ENV=production rollup -c rollup.config.js\",\"dev\":\"NODE_ENV=development rollup -w -c rollup.config.js\"},\"version\":\"2.0.0-26420200313001\"};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI2LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n");

/***/ }),

/***/ 7:
/*!************************************************************!*\
  !*** D:/work/financeForum_app/pages.json?{"type":"style"} ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = { \"pages\": { \"pages/index\": { \"navigationBarTitleText\": \"子诺新微金\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/login\": { \"navigationBarTitleText\": \"登录\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/registered\": { \"navigationBarTitleText\": \"注册\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/forgetPassword\": { \"navigationBarTitleText\": \"找回密码\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/collection\": { \"navigationBarTitleText\": \"精准匹配\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/apply\": { \"navigationBarTitleText\": \"极品干货\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/exchang\": { \"navigationBarTitleText\": \"子诺交流区\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/me\": { \"navigationBarTitleText\": \"个人中心\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/articleDetail\": { \"navigationBarTitleText\": \"文章详情\", \"usingComponents\": { \"jyf-parser\": \"/components/jyf-parser\" }, \"usingAutoImportComponents\": {} }, \"pages/queryTool\": { \"navigationBarTitleText\": \"查询工具\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/post\": { \"navigationBarTitleText\": \"发帖\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/experience\": { \"navigationBarTitleText\": \"选择模块\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/productSupermarket\": { \"navigationBarTitleText\": \"产品超市\", \"usingComponents\": { \"uni-drawer\": \"/components/uni-drawer\" }, \"usingAutoImportComponents\": {} }, \"pages/meUserInfo\": { \"navigationBarTitleText\": \"个人信息\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/meFavorite\": { \"navigationBarTitleText\": \"我的收藏\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/meFollow\": { \"navigationBarTitleText\": \"我的关注\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/meFriend\": { \"navigationBarTitleText\": \"我的好友\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/mePost\": { \"navigationBarTitleText\": \"我的发表\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/meMyDraft\": { \"navigationBarTitleText\": \"我的草稿\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/meMyMobile\": { \"navigationBarTitleText\": \"我的手机\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/meMyMobile_1\": { \"navigationBarTitleText\": \"更换手机号\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/meMyMobile_2\": { \"navigationBarTitleText\": \"更换手机号\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/meMyMobile_3\": { \"navigationBarTitleText\": \"更换手机号\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/meMessage\": { \"navigationBarTitleText\": \"我的消息\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/meCertification\": { \"navigationBarTitleText\": \"用户认证\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/meVIP\": { \"navigationBarTitleText\": \"开通会员\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/joinMember\": { \"navigationBarTitleText\": \"加入会员\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/contactCustomer\": { \"navigationBarTitleText\": \"联系客服\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/meSpread\": { \"navigationBarTitleText\": \"推广返佣\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/meService\": { \"navigationBarTitleText\": \"联系客服\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/meSetting\": { \"navigationBarTitleText\": \"个人设置\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/indexA\": { \"enablePullDownRefresh\": true, \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/meCertificationConfirm\": { \"navigationBarTitleText\": \"实名认证\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/meEditSet\": { \"navigationBarTitleText\": \"信息录入\", \"usingComponents\": { \"picker-address\": \"/components/wangding-pickerAddress\" }, \"usingAutoImportComponents\": {} }, \"pages/meEdit\": { \"navigationBarTitleText\": \"编辑\", \"usingComponents\": { \"picker-address\": \"/components/wangding-pickerAddress\" }, \"usingAutoImportComponents\": {} }, \"pages/meApplyMessage\": { \"navigationBarTitleText\": \"系统消息\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/meTreaty\": { \"navigationBarTitleText\": \"相关协议\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/paySuccess\": { \"navigationBarTitleText\": \"支付成功\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/productDetail\": { \"navigationBarTitleText\": \"产品详情\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/searchNetloan\": { \"navigationBarTitleText\": \"搜索\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/allProduct\": { \"navigationBarTitleText\": \"所有产品\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/applyShow\": { \"navigationBarTitleText\": \"分类\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/iframe\": { \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/meFan\": { \"navigationBarTitleText\": \"我的粉丝\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/tel\": { \"navigationBarTitleText\": \"手机实名查询-嘉合骏贷款超市\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/payType\": { \"navigationBarTitleText\": \"支付方式\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/search\": { \"navigationBarTitleText\": \"搜索\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/meTeamList\": { \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/commissionSet\": { \"navigationBarTitleText\": \"返佣设置\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/getQrCode\": { \"navigationBarTitleText\": \"获取二维码\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/cashOut\": { \"navigationBarTitleText\": \"提现\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/promptlyGetQr\": { \"navigationBarTitleText\": \"获取二维码\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/teamPeopleDetail\": { \"navigationBarTitleText\": \"用户信息\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/message\": { \"navigationBarTitleText\": \"消息\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/teamList\": { \"navigationBarTitleText\": \"团队列表\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/shareCode\": { \"navigationBarTitleText\": \"获取二维码\", \"usingComponents\": { \"uni-popup\": \"/components/uni-popup\" }, \"usingAutoImportComponents\": {} }, \"pages/meApply\": { \"navigationBarTitleText\": \"系统应用\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/exchangList\": { \"enablePullDownRefresh\": true, \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/boardData\": { \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/showCode\": { \"navigationBarTitleText\": \"推广二维码\", \"usingComponents\": { \"uni-popup\": \"/components/uni-popup\" }, \"usingAutoImportComponents\": {} }, \"pages/messageDetail\": { \"navigationBarTitleText\": \"系统消息详情\", \"usingComponents\": { \"jyf-parser\": \"/components/jyf-parser\" }, \"usingAutoImportComponents\": {} } }, \"globalStyle\": { \"navigationBarTextStyle\": \"white\", \"navigationBarTitleText\": \"uni-app\", \"navigationBarBackgroundColor\": \"#2390DC\", \"backgroundColor\": \"#F8F8F8\" } };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n");

/***/ }),

/***/ 8:
/*!***********************************************************!*\
  !*** D:/work/financeForum_app/pages.json?{"type":"stat"} ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = { \"appid\": \"__UNI__F2BA9AA\" };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJzR0FBZSxFQUFDLFNBQVEsZ0JBQVQsRSIsImZpbGUiOiI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1wiYXBwaWRcIjpcIl9fVU5JX19GMkJBOUFBXCJ9Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8\n");

/***/ })

}]);